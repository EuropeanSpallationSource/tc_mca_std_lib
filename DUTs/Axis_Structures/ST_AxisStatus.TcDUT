<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <DUT Name="ST_AxisStatus" Id="{665afad4-438f-0e33-0727-6e8aec20b565}">
    <Declaration><![CDATA[TYPE ST_AxisStatus :
STRUCT
    //Outputs & Status
    bAxisInitialized: BOOL := FALSE; //True when all parameters from actReadMcParameters are valid
    bEnabled: BOOL; //Axis drive enabled
    bAxisReadyToMove: BOOL; //Axis enabled and input ok from additional equipment (e.g. airpad, brake).
    bCommandAborted: BOOL; //Command aborted output of the eCommand function blocks
    bBusy: BOOL; //Axis busy (eCommand function block is active)
    bDone: BOOL; //Last eCommand function block executed successfully
    //bDone will also be set with the InGear and InVelocity outputs
    //When InVelocity is set, fbMoveVelocity is still acitve, which is reflected by the bBusy status
    bInVelocity: BOOL; //MC_MoveVelocity has reached target velocity; will stay true until the movement stops
    bHomed: BOOL; //True when the axis has been successfully homed
    bMoving: BOOL; //Moving state from the NC
    bMovingForward: BOOL; //Moving forward indicator from NC
    bMovingBackward: BOOL; //Moving backward indicator from NC
    bInTargetPosition: BOOL; //True if the axis is in the target position
    bFwEnabled: BOOL; //Positive movement of axis is enabled/disabled
    bBwEnabled: BOOL; //Negative movement of axis is enabled/disabled
    bInterlockedFwd: BOOL; //True if the axis is interlocked in the forward direction
    bInterlockedBwd: BOOL; //True if the axis is interlocked in the backward direction
    bGeared: BOOL; //True if the axis is geared as a slave to another axis
    bBacklashCompensating: BOOL; //True if the axis is currently compensating for backlash
    bCoupledGear1: BOOL; //True if coupled to gear 1
    bCoupledGear2: BOOL; //True if coupled to gear 2
    bCoupledGear3: BOOL; //True if coupled to gear 3
    bCoupledGear4: BOOL; //True if coupled to gear 4
    fActPosition: LREAL; //Actual position value
    fActTemperature: REAL; //Actual Temperature
    bHighTempAxisDisabled: BOOL := FALSE; //True if the axis is disabled due to high temperature
    bTempSensorError: BOOL; //Error when PT1OO is wrongly connected or disconnected
    nEncoderRawCounter AT %I*: UDINT; //Raw encoder counter value
    nStepperDriveCounter AT %I*: UDINT; //Raw internal counter value from the stepper drive
    fActVelocity: LREAL; //Current Velocity of the Axis
    bError: BOOL; //True if the axis is in an NC Error Stop state from Axis_Status
    nErrorID: UDINT; //ID of the last error from a motion function block or NC
    bAirpadPressureError: BOOL; //True if pressure unexpectedly lost
    bAirpadTimeoutError: BOOL; //True if airpad did not report pressurized in time
    bExternalBrakeFailure: BOOL; //True if brake engaged unexpectedly.
    bExternalBrakeTimeoutError: BOOL; //True if external brake id not report released in time
    bCommandHandlerBufferingCommand: BOOL; //True if CommandHandler is waiting on a permit before releasing the command
    bCommandHandlerTimeoutError: BOOL; //True if CommandHandler did not receive a permit in time
    eInternalMotionCommand: E_MotionFunctions;
END_STRUCT
END_TYPE
]]></Declaration>
  </DUT>
</TcPlcObject>