<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.5">
  <POU Name="FB_PneumaticAxis" Id="{0ba43c5d-0b1b-4802-81a2-a56c90343a83}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PneumaticAxis

VAR_IN_OUT
    stPneumaticAxisStruct: ST_PneumaticAxisStruct;
END_VAR
VAR
    fbTimerExtend: TON; //Timing the extraction of the cylinder
    fbTimerRetract: TON; //Timing the retraction of the cylinder
    fbTrigRisingEdgePermit: R_TRIG; //Rising edge detection for Permit signal
    fbTrigExtendManual: R_TRIG; //Rising edge detection for manual push button
    fbTrigRetractManual: R_TRIG; //Rising edge detection for manual push button

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Initialization();

CASE stPneumaticAxisStruct.ePneumaticAxisState OF

    E_PneumaticMode.eSingleSolenoidControl:
    Single_Solenoid();

    E_PneumaticMode.eError:
    Single_Solenoid_Error();

    E_PneumaticMode.eReset:
    Reset();
END_CASE




















]]></ST>
    </Implementation>
    <Action Name="ErrorCheck" Id="{8b3d850c-470a-444a-af07-097a9845aaa1}">
      <Implementation>
        <ST><![CDATA[//IF the command to extract is given, but the cylinder hasn't moved from the bLimitBwd
    IF  fbTimerExtend.Q AND stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitBwd THEN
             stPneumaticAxisStruct.stPneumaticAxisStatus.bExtending := FALSE;
             stPneumaticAxisStruct.ePneumaticAxisState := E_PneumaticMode.eError;
    END_IF
//If the command to extract has timed out
    IF  fbTimerExtend.Q AND (NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitFwd AND NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitBwd) THEN
            stPneumaticAxisStruct.stPneumaticAxisStatus.bExtending := FALSE;
            stPneumaticAxisStruct.ePneumaticAxisState := E_PneumaticMode.eError;
    END_IF

//IF the command to retract has been given, but the cylinder hasn't moved from bLimitFwd
        IF  fbTimerRetract.Q AND stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitFwd THEN
            stPneumaticAxisStruct.stPneumaticAxisStatus.bRetracting := FALSE;
            stPneumaticAxisStruct.ePneumaticAxisState := E_PneumaticMode.eError;
        END_IF

//If the command to retract has timed out
        IF  fbTimerRetract.Q AND (NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitFwd AND NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitBwd) THEN
            stPneumaticAxisStruct.stPneumaticAxisStatus.bRetracting := FALSE;
            stPneumaticAxisStruct.ePneumaticAxisState := E_PneumaticMode.eError;
        END_IF
    ]]></ST>
      </Implementation>
    </Action>
    <Action Name="Initialization" Id="{484c2371-b110-4d54-b677-54e40f38dcea}">
      <Implementation>
        <ST><![CDATA[stPneumaticAxisStruct.stPneumaticAxisStatus.bRetracted := stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitBwd;
stPneumaticAxisStruct.stPneumaticAxisStatus.bExtracted := stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitFwd;

//Check if Permit signal is ON
IF NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bPSSPermit THEN
            stPneumaticAxisStruct.stPneumaticAxisOutputs.bValveOn := FALSE;

END_IF

//Reset Error if the Permit signal is back ON
fbTrigRisingEdgePermit(clk:=stPneumaticAxisStruct.stPneumaticAxisFBVariables.bReset);

IF fbTrigRisingEdgePermit.Q THEN
    stPneumaticAxisStruct.ePneumaticAxisState := E_PneumaticMode.eReset;
END_IF

//Check if Interlock signal is ON
IF stPneumaticAxisStruct.stPneumaticAxisInputs.bInterlock THEN
            stPneumaticAxisStruct.stPneumaticAxisOutputs.bValveOn := FALSE;
END_IF

//Check for errors in Air pressure (to be implemented)]]></ST>
      </Implementation>
    </Action>
    <Action Name="Reset" Id="{2dda1b42-e462-445a-870e-db34c0266d90}">
      <Implementation>
        <ST><![CDATA[stPneumaticAxisStruct.stPneumaticAxisStatus.sStatus := 'NO_ERRORS_READY_TO_START';
stPneumaticAxisStruct.ePneumaticAxisErrors := E_PneumaticAxisErrors.eNoError;
stPneumaticAxisStruct.stPneumaticAxisStatus.bError := FALSE;
stPneumaticAxisStruct.ePneumaticAxisState := E_PneumaticMode.eSingleSolenoidControl;

  ]]></ST>
      </Implementation>
    </Action>
    <Action Name="Single_Solenoid" Id="{d7d61ab1-a144-43ab-8977-936c72509c4b}">
      <Implementation>
        <ST><![CDATA[//Enter allowed times for extraction and retraction of pneumatic cylinder in ms
 fbTimerExtend.PT := INT_TO_TIME( stPneumaticAxisStruct.stPneumaticAxisFBVariables.nTimeToExtend);
 fbTimerRetract.PT := INT_TO_TIME( stPneumaticAxisStruct.stPneumaticAxisFBVariables.nTimeToRetract);


//Checking for Permit signal from PSS while the cylinder is moving
IF NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bPSSPermit AND (stPneumaticAxisStruct.stPneumaticAxisStatus.bExtending OR stPneumaticAxisStruct.stPneumaticAxisStatus.bRetracting) THEN
            stPneumaticAxisStruct.stPneumaticAxisOutputs.bValveOn := FALSE;
            stPneumaticAxisStruct.ePneumaticAxisState := E_PneumaticMode.eError;
END_IF

//Checking if the Interlock signal is ON while the cylinder is moving
IF stPneumaticAxisStruct.stPneumaticAxisInputs.bInterlock AND (stPneumaticAxisStruct.stPneumaticAxisStatus.bExtending OR stPneumaticAxisStruct.stPneumaticAxisStatus.bRetracting) THEN
            stPneumaticAxisStruct.stPneumaticAxisOutputs.bValveOn := FALSE;
            stPneumaticAxisStruct.ePneumaticAxisState := E_PneumaticMode.eError;
END_IF

//Starting the control and signal monitoring of pneumatic actuator

//Starting the timing of extraction movement
fbTimerExtend();
fbTimerExtend(IN := stPneumaticAxisStruct.stPneumaticAxisStatus.bExtending);

//If the manual momentary push button is used for control of the pneumatic cylinder
fbTrigExtendManual(clk:=stPneumaticAxisStruct.stPneumaticAxisInputs.bExtendManual);

IF fbTrigExtendManual.Q THEN
    stPneumaticAxisStruct.stPneumaticAxisFBVariables.bStartExtendManual := TRUE;
END_IF


//Starting the extraction movement
IF (stPneumaticAxisStruct.stPneumaticAxisControl.bExtend OR stPneumaticAxisStruct.stPneumaticAxisFBVariables.bStartExtendManual) AND NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitFwd THEN
        stPneumaticAxisStruct.stPneumaticAxisOutputs.bValveOn := TRUE;
        stPneumaticAxisStruct.stPneumaticAxisStatus.bExtending := TRUE;

ErrorCheck();

END_IF

// Extraction of the cylinder finished, reset timer
IF (stPneumaticAxisStruct.stPneumaticAxisControl.bExtend OR stPneumaticAxisStruct.stPneumaticAxisFBVariables.bStartExtendManual) AND stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitFwd AND NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitBwd THEN
        stPneumaticAxisStruct.stPneumaticAxisFBVariables.bStateChange := TRUE;
        stPneumaticAxisStruct.stPneumaticAxisStatus.bExtending := FALSE;
        stPneumaticAxisStruct.stPneumaticAxisControl.bExtend := FALSE;
        stPneumaticAxisStruct.stPneumaticAxisFBVariables.bStartExtendManual := FALSE;
END_IF


//Starting the retraction movement and retraction timing
fbTimerRetract();
fbTimerRetract (IN := stPneumaticAxisStruct.stPneumaticAxisStatus.bRetracting);

//If the manual momentary push button is used for control of the pneumatic cylinder
fbTrigRetractManual(clk:=stPneumaticAxisStruct.stPneumaticAxisInputs.bRetractManual);

IF fbTrigRetractManual.Q THEN
    stPneumaticAxisStruct.stPneumaticAxisFBVariables.bStartRetractManual := TRUE;
END_IF

IF  (stPneumaticAxisStruct.stPneumaticAxisControl.bRetract OR stPneumaticAxisStruct.stPneumaticAxisFBVariables.bStartRetractManual) AND NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitBwd AND stPneumaticAxisStruct.stPneumaticAxisFBVariables.bStateChange THEN
        stPneumaticAxisStruct.stPneumaticAxisOutputs.bValveOn := FALSE;
        stPneumaticAxisStruct.stPneumaticAxisStatus.bRetracting := TRUE;

ErrorCheck();

END_IF

// Retraction of the cylinder finished, reset timer
IF  (stPneumaticAxisStruct.stPneumaticAxisControl.bRetract OR stPneumaticAxisStruct.stPneumaticAxisFBVariables.bStartRetractManual) AND stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitBwd THEN
        stPneumaticAxisStruct.stPneumaticAxisFBVariables.bStateChange := FALSE;
        stPneumaticAxisStruct.stPneumaticAxisStatus.bRetracting := FALSE;
        stPneumaticAxisStruct.stPneumaticAxisControl.bRetract := FALSE;
        stPneumaticAxisStruct.stPneumaticAxisFBVariables.bStartRetractManual := FALSE;
END_IF











 ]]></ST>
      </Implementation>
    </Action>
    <Action Name="Single_Solenoid_Error" Id="{f8576b29-f01d-47be-8f5e-a9ddd919db93}">
      <Implementation>
        <ST><![CDATA[IF NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bPSSPermit AND (stPneumaticAxisStruct.stPneumaticAxisStatus.bExtending OR stPneumaticAxisStruct.stPneumaticAxisStatus.bRetracting)THEN
    stPneumaticAxisStruct.ePneumaticAxisErrors := E_PneumaticAxisErrors.eNoPermit;
END_IF

IF stPneumaticAxisStruct.stPneumaticAxisInputs.bInterlock AND (stPneumaticAxisStruct.stPneumaticAxisStatus.bExtending OR stPneumaticAxisStruct.stPneumaticAxisStatus.bRetracting) THEN
     stPneumaticAxisStruct.ePneumaticAxisErrors := E_PneumaticAxisErrors.eInterlockOn;
END_IF

IF  fbTimerExtend.Q AND stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitBwd THEN
    stPneumaticAxisStruct.ePneumaticAxisErrors := E_PneumaticAxisErrors.eNotMovingExtract;
END_IF

IF  fbTimerExtend.Q AND NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitFwd AND NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitBwd THEN
    stPneumaticAxisStruct.ePneumaticAxisErrors := E_PneumaticAxisErrors.eExtractTimedOut;
END_IF

IF  fbTimerRetract.Q AND stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitFwd THEN
    stPneumaticAxisStruct.ePneumaticAxisErrors := E_PneumaticAxisErrors.eNotMovingRetract;
END_IF

IF  fbTimerRetract.Q AND NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitFwd AND NOT stPneumaticAxisStruct.stPneumaticAxisInputs.bLimitBwd THEN
    stPneumaticAxisStruct.ePneumaticAxisErrors := E_PneumaticAxisErrors.eRetractTimedOut;
END_IF


CASE  stPneumaticAxisStruct.ePneumaticAxisErrors OF

    E_PneumaticAxisErrors.eNoError:
    stPneumaticAxisStruct.stPneumaticAxisStatus.bError := FALSE;

    E_PneumaticAxisErrors.eExtractTimedOut:
    stPneumaticAxisStruct.stPneumaticAxisStatus.sStatus := 'ERROR: COMMAND TIMED OUT';
    stPneumaticAxisStruct.stPneumaticAxisStatus.bError := TRUE;

    E_PneumaticAxisErrors.eRetractTimedOut:
    stPneumaticAxisStruct.stPneumaticAxisStatus.sStatus := 'ERROR: COMMAND TIMED OUT';
    stPneumaticAxisStruct.stPneumaticAxisStatus.bError := TRUE;

    E_PneumaticAxisErrors.eNotMovingExtract:
    stPneumaticAxisStruct.stPneumaticAxisStatus.sStatus := 'ERROR: CYLINDER NOT MOVING';
    stPneumaticAxisStruct.stPneumaticAxisStatus.bError := TRUE;

    E_PneumaticAxisErrors.eNotMovingRetract:
    stPneumaticAxisStruct.stPneumaticAxisStatus.sStatus := 'ERROR: CYLINDER NOT MOVING';
    stPneumaticAxisStruct.stPneumaticAxisStatus.bError := TRUE;

    E_PneumaticAxisErrors.eNoPermit:
    stPneumaticAxisStruct.stPneumaticAxisStatus.sStatus := 'ERROR: NO PERMIT SIGNAL';
    stPneumaticAxisStruct.stPneumaticAxisStatus.bError := TRUE;

    E_PneumaticAxisErrors.eInterlockOn:
    stPneumaticAxisStruct.stPneumaticAxisStatus.sStatus := 'ERROR: INTERLOCK SIGNAL ON';
    stPneumaticAxisStruct.stPneumaticAxisStatus.bError := TRUE;

END_CASE

stPneumaticAxisStruct.stPneumaticAxisControl.bExtend := FALSE;
stPneumaticAxisStruct.stPneumaticAxisControl.bRetract := FALSE;
stPneumaticAxisStruct.stPneumaticAxisOutputs.bValveOn := FALSE;
stPneumaticAxisStruct.stPneumaticAxisFBVariables.bStartExtendManual := FALSE;
stPneumaticAxisStruct.stPneumaticAxisFBVariables.bStartRetractManual := FALSE;
stPneumaticAxisStruct.stPneumaticAxisStatus.bExtending := FALSE;
stPneumaticAxisStruct.stPneumaticAxisStatus.bRetracting := FALSE;
]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_PneumaticAxis">
      <LineId Id="509" Count="32" />
      <LineId Id="262" Count="0" />
    </LineIds>
    <LineIds Name="FB_PneumaticAxis.ErrorCheck">
      <LineId Id="2" Count="10" />
      <LineId Id="14" Count="9" />
      <LineId Id="13" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_PneumaticAxis.Initialization">
      <LineId Id="2" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="27" Count="2" />
      <LineId Id="20" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="4" Count="4" />
      <LineId Id="1" Count="0" />
      <LineId Id="22" Count="3" />
      <LineId Id="21" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="30" Count="0" />
    </LineIds>
    <LineIds Name="FB_PneumaticAxis.Reset">
      <LineId Id="8" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="29" Count="0" />
    </LineIds>
    <LineIds Name="FB_PneumaticAxis.Single_Solenoid">
      <LineId Id="48" Count="0" />
      <LineId Id="43" Count="1" />
      <LineId Id="257" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="342" Count="2" />
      <LineId Id="341" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="359" Count="1" />
      <LineId Id="363" Count="0" />
      <LineId Id="361" Count="1" />
      <LineId Id="358" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="308" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="333" Count="0" />
      <LineId Id="332" Count="0" />
      <LineId Id="328" Count="3" />
      <LineId Id="327" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="309" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="365" Count="0" />
      <LineId Id="306" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="17" Count="1" />
      <LineId Id="248" Count="0" />
      <LineId Id="356" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="370" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="348" Count="0" />
      <LineId Id="335" Count="4" />
      <LineId Id="334" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="253" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="366" Count="0" />
      <LineId Id="32" Count="2" />
      <LineId Id="157" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="252" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="129" Count="1" />
      <LineId Id="135" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_PneumaticAxis.Single_Solenoid_Error">
      <LineId Id="32" Count="2" />
      <LineId Id="63" Count="2" />
      <LineId Id="62" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="46" Count="1" />
      <LineId Id="49" Count="1" />
      <LineId Id="53" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="5" Count="3" />
      <LineId Id="11" Count="1" />
      <LineId Id="17" Count="4" />
      <LineId Id="23" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="67" Count="3" />
      <LineId Id="10" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="80" Count="6" />
      <LineId Id="79" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>