<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="FB_Axis" Id="{45901cd0-c6d2-4114-b7cf-de832171219f}" SpecialFunc="None">
    <Declaration><![CDATA[//Function block to run a virtual drive with Nc
FUNCTION_BLOCK FB_Axis
VAR
    sVersion: STRING := '1.0.4';
END_VAR

VAR CONSTANT
    nMULTI_MASTER_MAX_AXES: UINT := 4;
    //Kept static as numerator is LREAL and consistent with multigearing
    nRATIO_DENOMINATOR_DEFAULT: UINT := 1;
    //By default 0 as represents no existing gearing
    nNO_GEARING: UINT := 0;
END_VAR

VAR_IN_OUT
    stAxisStruct: ST_AxisStruct;
END_VAR

VAR
    iAxisIndex: UINT;
    iMultiMastersAxesIndex: UINT;
    iSlaveAxesIndex: UINT;

    stMasterAxis: ST_GearAxis := (nIndex := 1, fRatio := 0);
    fbReset: MC_Reset;
    fbPower: MC_Power;
    fbStop: MC_Stop;
    fbHalt: MC_Halt;
    fbJog: MC_Jog;
    fbMoveAbsolute: MC_MoveAbsolute;
    fbMoveVelocity: MC_MoveVelocity;
    fbMoveRelative: MC_MoveRelative;
    fbMoveModulo: MC_MoveModulo;
    fbGearIn: MC_GearIn;
    fbGearOut: MC_GearOut;
    fbGearInMultiMaster: MC_GearInMultiMaster;
    fbHome: FB_Homing;
    fbExecuteRiseEdge: R_TRIG;
    fbStopRiseEdge: R_TRIG;
    fbResetRiseEdge: R_TRIG;
    fbSetParameter_RTRIG: R_TRIG;
    fbWriteParameter: MC_WriteParameter;
    fbReadParameter: MC_ReadParameter;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[stAxisStruct.Axis.ReadStatus();

//Call of all MC Instances and set all Executes to FALSE
fbPower(Axis := stAxisStruct.Axis);
fbPower.Enable := FALSE;

fbReset(Axis := stAxisStruct.Axis);
fbReset.Execute := FALSE;

fbStop(Axis := stAxisStruct.Axis);
fbStop.Execute := FALSE;

fbHalt(Axis := stAxisStruct.Axis);
fbHalt.Execute := FALSE;

fbJog(Axis := stAxisStruct.Axis);

fbHome(Axis := stAxisStruct.Axis);
fbHome.bExecute := FALSE;

fbMoveAbsolute(Axis := stAxisStruct.Axis);
fbMoveAbsolute.Execute := FALSE;

fbMoveRelative(Axis := stAxisStruct.Axis);
fbMoveRelative.Execute := FALSE;

fbMoveVelocity(Axis := stAxisStruct.Axis);
fbMoveVelocity.Execute := FALSE;

fbMoveModulo(Axis := stAxisStruct.Axis);
fbMoveModulo.Execute := FALSE;

fbGearin(Slave := stAxisStruct.Axis, Master := GVL.astAxes[stMasterAxis.nIndex].Axis);
fbGearIn.Execute := FALSE;

fbGearInMultiMaster(Slave := stAxisStruct.Axis,
    Master1 := GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[1].nIndex].Axis,
    Master2 := GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[2].nIndex].Axis,
    Master3 := GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[3].nIndex].Axis,
    Master4 := GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[4].nIndex].Axis);

fbGearOut(Slave := stAxisStruct.Axis);
fbGearOut.Execute := FALSE;

fbWriteParameter(Axis := stAxisStruct.Axis);
fbWriteParameter.Execute := FALSE;

//Read Parameter
fbReadParameter( 
Axis            := stAxisStruct.Axis, 
Enable          := TRUE, 
ParameterNumber := stAxisStruct.stconfig.eAxisParameters, 
ReadMode        := READMODE_CYCLIC);

IF NOT fbReadParameter.Error THEN
    stAxisStruct.stconfig.fReadAxisParameter := fbReadParameter.Value;
END_IF

//Linking the limit swtiches
stAxisStruct.stStatus.bFwEnabled := stAxisStruct.stInputs.bLimitFwd;
stAxisStruct.stStatus.bBwEnabled := stAxisStruct.stInputs.bLimitBwd;

FOR iAxisIndex := 1 TO GVL_APP.nAXIS_NUM DO
    IF (stAxisStruct.stConfig.afMultiSlaveAxisRatio[iAxisIndex] <> 0) THEN
        stAxisStruct.stStatus.bFwEnabled := stAxisStruct.stStatus.bFwEnabled AND SEL(stAxisStruct.stConfig.afMultiSlaveAxisRatio[iAxisIndex] > 0, GVL.astAxes[iAxisIndex].stStatus.bBwEnabled, GVL.astAxes[iAxisIndex].stStatus.bFwEnabled);
        stAxisStruct.stStatus.bBwEnabled := stAxisStruct.stStatus.bBwEnabled AND SEL(stAxisStruct.stConfig.afMultiSlaveAxisRatio[iAxisIndex] > 0, GVL.astAxes[iAxisIndex].stStatus.bFwEnabled, GVL.astAxes[iAxisIndex].stStatus.bBwEnabled);
    END_IF
END_FOR

//Power
fbPower.Enable := stAxisStruct.stControl.bEnable;
fbPower.Enable_Positive := stAxisStruct.stStatus.bFwEnabled;
fbPower.Enable_Negative := stAxisStruct.stStatus.bBwEnabled;
fbPower.Override := stAxisStruct.stConfig.fOverride;
stAxisStruct.stStatus.bEnabled := fbPower.Status;

//Stop
fbStop.Execute := stAxisStruct.stControl.bStop;
fbStop.Deceleration := stAxisStruct.stConfig.fDeceleration;
IF stAxisStruct.stControl.bStop AND stAxisStruct.Axis.Status.Stopping THEN
    stAxisStruct.stControl.bStop := FALSE;
END_IF

//Reset
fbReset.Execute := stAxisStruct.stControl.bReset AND stAxisStruct.stStatus.bError;
IF stAxisStruct.stControl.bReset AND NOT (stAxisStruct.stStatus.bError OR stAxisStruct.stStatus.bWarning) THEN
    stAxisStruct.stControl.bReset := FALSE;
END_IF

//Motion Functions
CASE stAxisStruct.stControl.eCommand OF
    E_MotionFunctions.eMoveAbsolute:
        fbMoveAbsolute.Execute := stAxisStruct.stControl.bExecute;
        fbMoveAbsolute.Position := stAxisStruct.stConfig.fPosition;
        fbMoveAbsolute.Velocity := ABS(stAxisStruct.stConfig.fVelocity);
        fbMoveAbsolute.Acceleration := stAxisStruct.stConfig.fAcceleration;
        fbMoveAbsolute.Deceleration := stAxisStruct.stConfig.fDeceleration;

    E_MotionFunctions.eMoveRelative:
        fbMoveRelative.Execute := stAxisStruct.stControl.bExecute;
        fbMoveRelative.Distance := stAxisStruct.stConfig.fPosition;
        fbMoveRelative.Velocity := ABS(stAxisStruct.stConfig.fVelocity);
        fbMoveRelative.Acceleration := stAxisStruct.stConfig.fAcceleration;
        fbMoveRelative.Deceleration := stAxisStruct.stConfig.fDeceleration;

    E_MotionFunctions.eJog:
        fbJog.JogForward := stAxisStruct.stControl.bJogFwd AND NOT (stAxisStruct.stControl.bExecute OR stAxisStruct.stStatus.bError);
        fbJog.JogBackwards := stAxisStruct.stControl.bJogBwd AND NOT (stAxisStruct.stControl.bExecute OR stAxisStruct.stStatus.bError);
        fbJog.Mode := 0;
        fbJog.Velocity := stAxisStruct.stConfig.fVelocity;
        fbJog.Acceleration := stAxisStruct.stConfig.fAcceleration;
        fbJog.Deceleration := stAxisStruct.stConfig.fDeceleration;

    E_MotionFunctions.eMoveVelocity:
        fbMoveVelocity.Execute := stAxisStruct.stControl.bExecute;
        fbMoveVelocity.Velocity := ABS(stAxisStruct.stConfig.fVelocity);
        fbMoveVelocity.Acceleration := stAxisStruct.stConfig.fAcceleration;
        fbMoveVelocity.Deceleration := stAxisStruct.stConfig.fDeceleration;
        fbMoveVelocity.Direction := SEL(stAxisStruct.stConfig.fVelocity < 0, MC_Positive_Direction, MC_Negative_Direction);

    E_MotionFunctions.eMoveModulo:
        fbMoveModulo.Execute := stAxisStruct.stControl.bExecute;
        fbMoveModulo.Position := stAxisStruct.stConfig.fPosition;
        fbMoveModulo.Velocity := ABS(stAxisStruct.stConfig.fVelocity);
        fbMoveModulo.Acceleration := stAxisStruct.stConfig.fAcceleration;
        fbMoveModulo.Deceleration := stAxisStruct.stConfig.fDeceleration;

    E_MotionFunctions.eGearIn:
        fbGearIn.Execute := stAxisStruct.stControl.bExecute;
        fbGearIn.RatioNumerator := stMasterAxis.fRatio;
        fbGearIn.RatioDenominator := nRATIO_DENOMINATOR_DEFAULT;

        IF NOT fbGearIn.InGear THEN
            stMasterAxis.nIndex := stAxisStruct.stConfig.stMasterAxis.nIndex;
            stMasterAxis.fRatio := stAxisStruct.stConfig.stMasterAxis.fRatio;
        END_IF

        //Confirm slaves have no gearing before attempting to gear in
         IF fbGearIn.InGear AND (GVL.astAxes[stMasterAxis.nIndex].stConfig.afSlaveAxisRatio[GVL.iAxis] = nNO_GEARING) THEN
            GVL.astAxes[stMasterAxis.nIndex].stConfig.afSlaveAxisRatio[GVL.iAxis] := stMasterAxis.fRatio;
        END_IF

    E_MotionFunctions.eGearInMultiMaster:
        IF stAxisStruct.stControl.bExecute AND NOT stAxisStruct.Axis.Status.Coupled THEN
            //Latch master references
            FOR iMultiMastersAxesIndex := 1 TO nMULTI_MASTER_MAX_AXES DO
                IF stAxisStruct.stConfig.astMultiMasterAxis[iMultiMastersAxesIndex].nIndex > 0 AND stAxisStruct.stConfig.astMultiMasterAxis[iMultiMastersAxesIndex].nIndex <= GVL_APP.nAXIS_NUM THEN
                    stAxisStruct.stConfig.astMultiMasterAxisLatched[iMultiMastersAxesIndex].nIndex := stAxisStruct.stConfig.astMultiMasterAxis[iMultiMastersAxesIndex].nIndex;
                END_IF
            END_FOR
            //Latch gear ratios
            FOR iMultiMastersAxesIndex := 1 TO nMULTI_MASTER_MAX_AXES DO
                stAxisStruct.stConfig.astMultiMasterAxisLatched[iMultiMastersAxesIndex].fRatio := stAxisStruct.stConfig.astMultiMasterAxis[iMultiMastersAxesIndex].fRatio;
            END_FOR
            //Transfer gear ratios to FB
            fbGearInMultiMaster.GearRatio1 := stAxisStruct.stConfig.astMultiMasterAxisLatched[1].fRatio;
            fbGearInMultiMaster.GearRatio2 := stAxisStruct.stConfig.astMultiMasterAxisLatched[2].fRatio;
            fbGearInMultiMaster.GearRatio3 := stAxisStruct.stConfig.astMultiMasterAxisLatched[3].fRatio;
            fbGearInMultiMaster.GearRatio4 := stAxisStruct.stConfig.astMultiMasterAxisLatched[4].fRatio;
            fbGearInMultiMaster.Enable := stAxisStruct.stControl.bExecute;
        END_IF

        IF fbGearInMultiMaster.Error THEN
            fbGearInMultiMaster.Enable := FALSE;
        END_IF

    E_MotionFunctions.eGearOut:
        fbGearOut.Execute := stAxisStruct.stControl.bExecute;
        fbGearInMultiMaster.Enable := FALSE;

        IF fbGearOut.Done THEN
            //Clear slave ratio from master axis slave array
            GVL.astAxes[stMasterAxis.nIndex].stConfig.afSlaveAxisRatio[GVL.iAxis] := nNO_GEARING;
            FOR iSlaveAxesIndex := 1 TO GVL_APP.nAXIS_NUM DO
                GVL.astAxes[iSlaveAxesIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := nNO_GEARING;
            END_FOR
        END_IF

    E_MotionFunctions.eHome:
        fbHome.bExecute := stAxisStruct.stControl.bExecute;
        fbHome.bReset := stAxisStruct.stControl.bReset;
        fbHome.bStop := stAxisStruct.stControl.bStop;
        fbHome.eHomeProc := stAxisStruct.stConfig.eHomeSeq;
        fbHome.fHomePosition := stAxisStruct.stConfig.fHomePosition;
        fbHome.bLimitBwd := stAxisStruct.stInputs.bLimitBwd;
        fbHome.bLimitFwd := stAxisStruct.stInputs.bLimitFwd;
        fbHome.bHomeSensor := stAxisStruct.stInputs.bHomeSensor;
        stAxisStruct.stStatus.bHomed := fbHome.bHomed;
    
    E_MotionFunctions.eWriteParameter:
        fbSetParameter_RTRIG(clk := stAxisStruct.stcontrol.bExecute);
        
        fbWriteParameter.Execute        := fbSetParameter_RTRIG.Q;
        fbWriteParameter.ParameterNumber:= stAxisStruct.stConfig.eAxisParameters;
        fbWriteParameter.Value          := stAxisStruct.stConfig.fWriteAxisParameter;

END_CASE

//Busy
stAxisStruct.stStatus.bBusy := stAxisStruct.Axis.Status.HasJob;

//Done
IF fbMoveAbsolute.Done OR fbMoveModulo.Done OR fbMoveRelative.Done OR fbHome.fbFinishHoming.Done THEN
        stAxisStruct.stStatus.bDone := TRUE;
ELSIF stAxisStruct.Axis.Status.HasJob THEN
        stAxisStruct.stStatus.bDone := FALSE;
END_IF

//Error from functions and Nc
IF stAxisStruct.stStatus.bError AND NOT stAxisStruct.stControl.bReset THEN
    stAxisStruct.stStatus.bError := stAxisStruct.stStatus.bError;
    stAxisStruct.stStatus.nErrorID := stAxisStruct.stStatus.nErrorID;

ELSIF fbPower.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbPower.ErrorID;

ELSIF fbHalt.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbHalt.ErrorID;

ELSIF fbJog.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbJog.ErrorID;

ELSIF fbMoveVelocity.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbMoveVelocity.ErrorID;

ELSIF fbMoveRelative.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbMoveRelative.ErrorID;

ELSIF fbMoveAbsolute.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbMoveAbsolute.ErrorID;

ELSIF fbMoveModulo.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbMoveModulo.ErrorID;

ELSIF fbHome.bError THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbHome.nErrorID;

ELSIF fbGearIn.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbGearIn.ErrorID;

ELSIF fbGearInMultiMaster.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbGearInMultiMaster.ErrorID;

ELSIF fbGearInMultiMaster.Error THEN
    stAxisStruct.stStatus.bError:=TRUE;
    stAxisStruct.stStatus.nErrorId:=fbGearInMultiMaster.ErrorID;

ELSIF fbGearOut.Error and stAxisStruct.Axis.Status.Coupled THEN
    stAxisStruct.stStatus.bError:=TRUE;
    stAxisStruct.stStatus.nErrorId:=fbGearOut.ErrorID;
    
ELSIF fbWriteParameter.Error THEN
    stAxisStruct.stStatus.bError:=TRUE;    
    stAxisStruct.stStatus.nErrorId := fbWriteParameter.ErrorID;
    
ELSIF fbReadParameter.Error THEN
    stAxisStruct.stStatus.bError:=TRUE;
    stAxisStruct.stStatus.nErrorId := fbReadParameter.ErrorID;  
    
ELSIF stAxisStruct.Axis.Status.Error  THEN
    stAxisStruct.stStatus.bError := stAxisStruct.Axis.Status.Error;
    stAxisStruct.stStatus.nErrorId := stAxisStruct.Axis.Status.ErrorID;

ELSE
    stAxisStruct.stStatus.bError := FALSE;
    stAxisStruct.stStatus.nErrorId := 0;
END_IF;

//Warnings from functions and Nc
IF stAxisStruct.stStatus.bWarning AND NOT stAxisStruct.stControl.bReset THEN
    stAxisStruct.stStatus.bWarning := stAxisStruct.stStatus.bWarning;
ELSIF fbHome.bWarning THEN
    stAxisStruct.stStatus.bWarning := stAxisStruct.stStatus.bError;
ELSE
    stAxisStruct.stStatus.bWarning := FALSE;
END_IF;

//Actual Velocity
stAxisStruct.stStatus.fActVelocity := stAxisStruct.Axis.NcToPlc.ActVelo;

//Actual Position
IF stAxisStruct.Axis.Status.OpMode.Modulo THEN
    stAxisStruct.stStatus.fActPosition := stAxisStruct.Axis.NcToPlc.ModuloActPos;
ELSE
    stAxisStruct.stStatus.fActPosition := stAxisStruct.Axis.NcToPlc.ActPos;
END_IF

//Gearing Status
stAxisStruct.stStatus.bGeared := stAxisStruct.Axis.Status.Coupled;

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio1 <> 0 AND stAxisStruct.stConfig.astMultiMasterAxisLatched[1].nIndex <> 0 THEN
    GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[1].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio1;
    stAxisStruct.stStatus.bCoupledGear1 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear1 := FALSE;
END_IF

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio2 <> 0 AND stAxisStruct.stConfig.astMultiMasterAxisLatched[2].nIndex <> 0 THEN
    GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[2].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio2;
    stAxisStruct.stStatus.bCoupledGear2 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear2 := FALSE;
END_IF

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio3 <> 0 AND stAxisStruct.stConfig.astMultiMasterAxisLatched[3].nIndex <> 0 THEN
    GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[3].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio3;
    stAxisStruct.stStatus.bCoupledGear3 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear3 := FALSE;
END_IF

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio4 <> 0 AND stAxisStruct.stConfig.astMultiMasterAxisLatched[4].nIndex <> 0 THEN
    GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[4].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio4;
    stAxisStruct.stStatus.bCoupledGear4 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear4 := FALSE;
END_IF

//Gearing Status
stAxisStruct.stStatus.bGeared := stAxisStruct.Axis.Status.Coupled;

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio1 <> 0 AND stAxisStruct.stConfig.astMultiMasterAxisLatched[1].nIndex <> 0 THEN
    GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[1].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio1;
    stAxisStruct.stStatus.bCoupledGear1 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear1 := FALSE;
END_IF

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio2 <> 0 AND stAxisStruct.stConfig.astMultiMasterAxisLatched[2].nIndex <> 0 THEN
    GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[2].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio2;
    stAxisStruct.stStatus.bCoupledGear2 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear2 := FALSE;
END_IF

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio3 <> 0 AND stAxisStruct.stConfig.astMultiMasterAxisLatched[3].nIndex <> 0 THEN
    GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[3].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio3;
    stAxisStruct.stStatus.bCoupledGear3 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear3 := FALSE;
END_IF

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio4 <> 0 AND stAxisStruct.stConfig.astMultiMasterAxisLatched[4].nIndex <> 0 THEN
    GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[4].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio4;
    stAxisStruct.stStatus.bCoupledGear4 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear4 := FALSE;
END_IF

//Reset bExecute
stAxisStruct.stControl.bExecute := FALSE;]]></ST>
    </Implementation>
    <LineIds Name="FB_Axis">
      <LineId Id="2448" Count="0" />
      <LineId Id="2659" Count="0" />
      <LineId Id="2185" Count="0" />
      <LineId Id="2203" Count="0" />
      <LineId Id="2189" Count="0" />
      <LineId Id="2377" Count="2" />
      <LineId Id="2190" Count="0" />
      <LineId Id="2380" Count="0" />
      <LineId Id="2193" Count="0" />
      <LineId Id="2381" Count="0" />
      <LineId Id="2194" Count="1" />
      <LineId Id="2383" Count="0" />
      <LineId Id="2197" Count="0" />
      <LineId Id="2384" Count="0" />
      <LineId Id="2198" Count="0" />
      <LineId Id="2385" Count="0" />
      <LineId Id="2199" Count="0" />
      <LineId Id="2437" Count="0" />
      <LineId Id="2200" Count="0" />
      <LineId Id="2438" Count="0" />
      <LineId Id="2573" Count="0" />
      <LineId Id="2493" Count="0" />
      <LineId Id="2201" Count="0" />
      <LineId Id="2446" Count="0" />
      <LineId Id="3201" Count="0" />
      <LineId Id="3135" Count="0" />
      <LineId Id="3125" Count="9" />
      <LineId Id="2998" Count="0" />
      <LineId Id="1627" Count="1" />
      <LineId Id="2515" Count="0" />
      <LineId Id="2595" Count="0" />
      <LineId Id="2591" Count="0" />
      <LineId Id="2586" Count="2" />
      <LineId Id="2585" Count="0" />
      <LineId Id="2594" Count="0" />
      <LineId Id="2516" Count="0" />
      <LineId Id="1629" Count="0" />
      <LineId Id="1632" Count="3" />
      <LineId Id="1637" Count="0" />
      <LineId Id="1642" Count="0" />
      <LineId Id="1921" Count="0" />
      <LineId Id="1925" Count="1" />
      <LineId Id="2837" Count="0" />
      <LineId Id="2835" Count="1" />
      <LineId Id="2205" Count="0" />
      <LineId Id="2719" Count="0" />
      <LineId Id="2207" Count="0" />
      <LineId Id="2209" Count="0" />
      <LineId Id="2838" Count="0" />
      <LineId Id="2841" Count="1" />
      <LineId Id="2762" Count="0" />
      <LineId Id="2839" Count="0" />
      <LineId Id="1657" Count="0" />
      <LineId Id="2366" Count="0" />
      <LineId Id="2220" Count="0" />
      <LineId Id="2222" Count="3" />
      <LineId Id="2238" Count="0" />
      <LineId Id="2236" Count="0" />
      <LineId Id="2239" Count="0" />
      <LineId Id="2241" Count="1" />
      <LineId Id="2442" Count="0" />
      <LineId Id="2244" Count="0" />
      <LineId Id="2254" Count="0" />
      <LineId Id="2219" Count="0" />
      <LineId Id="2258" Count="0" />
      <LineId Id="2443" Count="0" />
      <LineId Id="2260" Count="0" />
      <LineId Id="2262" Count="2" />
      <LineId Id="2274" Count="0" />
      <LineId Id="2273" Count="0" />
      <LineId Id="2276" Count="3" />
      <LineId Id="2281" Count="0" />
      <LineId Id="2290" Count="1" />
      <LineId Id="2294" Count="4" />
      <LineId Id="2303" Count="0" />
      <LineId Id="2310" Count="0" />
      <LineId Id="2343" Count="0" />
      <LineId Id="2504" Count="0" />
      <LineId Id="2575" Count="0" />
      <LineId Id="2497" Count="0" />
      <LineId Id="2506" Count="0" />
      <LineId Id="2570" Count="1" />
      <LineId Id="2574" Count="0" />
      <LineId Id="2572" Count="0" />
      <LineId Id="2569" Count="0" />
      <LineId Id="2577" Count="0" />
      <LineId Id="2583" Count="0" />
      <LineId Id="2576" Count="0" />
      <LineId Id="2361" Count="1" />
      <LineId Id="2498" Count="0" />
      <LineId Id="2582" Count="0" />
      <LineId Id="2511" Count="0" />
      <LineId Id="2584" Count="0" />
      <LineId Id="2513" Count="0" />
      <LineId Id="2444" Count="0" />
      <LineId Id="2364" Count="0" />
      <LineId Id="2344" Count="0" />
      <LineId Id="2311" Count="0" />
      <LineId Id="2329" Count="1" />
      <LineId Id="2888" Count="0" />
      <LineId Id="2331" Count="5" />
      <LineId Id="2934" Count="0" />
      <LineId Id="2992" Count="0" />
      <LineId Id="3204" Count="0" />
      <LineId Id="3213" Count="1" />
      <LineId Id="3205" Count="2" />
      <LineId Id="3203" Count="0" />
      <LineId Id="2993" Count="2" />
      <LineId Id="2339" Count="0" />
      <LineId Id="2309" Count="0" />
      <LineId Id="2216" Count="0" />
      <LineId Id="1733" Count="0" />
      <LineId Id="3268" Count="0" />
      <LineId Id="1936" Count="1" />
      <LineId Id="2770" Count="0" />
      <LineId Id="2769" Count="0" />
      <LineId Id="2772" Count="0" />
      <LineId Id="2777" Count="2" />
      <LineId Id="2771" Count="0" />
      <LineId Id="1941" Count="1" />
      <LineId Id="2651" Count="2" />
      <LineId Id="1945" Count="28" />
      <LineId Id="3148" Count="4" />
      <LineId Id="3146" Count="0" />
      <LineId Id="1974" Count="1" />
      <LineId Id="1979" Count="3" />
      <LineId Id="2501" Count="0" />
      <LineId Id="1992" Count="0" />
      <LineId Id="2502" Count="0" />
      <LineId Id="1993" Count="1" />
      <LineId Id="2980" Count="1" />
      <LineId Id="2989" Count="2" />
      <LineId Id="2987" Count="1" />
      <LineId Id="2982" Count="0" />
      <LineId Id="2984" Count="2" />
      <LineId Id="2983" Count="0" />
      <LineId Id="1995" Count="6" />
      <LineId Id="2272" Count="0" />
      <LineId Id="1934" Count="0" />
      <LineId Id="202" Count="1" />
      <LineId Id="246" Count="18" />
      <LineId Id="2" Count="0" />
      <LineId Id="267" Count="95" />
      <LineId Id="3269" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>