<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="FB_Axis" Id="{45901cd0-c6d2-4114-b7cf-de832171219f}" SpecialFunc="None">
    <Declaration><![CDATA[//Function block to run a virtual drive with Nc
FUNCTION_BLOCK FB_Axis
VAR
    sVersion: STRING := '1.0.4';
END_VAR

VAR CONSTANT
    nMULTI_MASTER_MAX_AXES: UINT := 4;
    // Kept static as numerator is LREAL and consistent with multigearing
    nRATIO_DENOMINATOR_DEFAULT: UINT := 1;
    // By default 0 as represents no existing gearing
    nNO_GEARING: UINT := 0;
END_VAR

VAR_IN_OUT
    stAxisStruct: ST_AxisStruct;
END_VAR

VAR
    fbReset: MC_Reset;
    fbPower: MC_Power;
    fbStop: MC_Stop;
    fbHalt: MC_Halt;
    fbJog: MC_Jog;
    fbMoveAbsolute: MC_MoveAbsolute;
    fbMoveVelocity: MC_MoveVelocity;
    fbMoveRelative: MC_MoveRelative;
    fbMoveModulo: MC_MoveModulo;
    fbGearIn: MC_GearIn;
    fbGearOut: MC_GearOut;
    fbGearInMultiMaster: MC_GearInMultiMaster;
    fbHome: FB_Homing;
    fbExecuteRiseEdge: R_TRIG;
    fbStopRiseEdge: R_TRIG;
    fbResetRiseEdge: R_TRIG;
    stMasterAxis: ST_GearAxis := (nIndex:= 1, fRatio:= 0);
    iAxisIndex: UINT;
    iMultiMastersAxesIndex: UINT;
    iSlaveAxesIndex: UINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[stAxisStruct.Axis.ReadStatus();

// Call of all MC Instances and set all Executes to FALSE
fbPower(Axis:= stAxisStruct.Axis);
fbPower.Enable := FALSE;

fbReset(Axis:= stAxisStruct.Axis);
fbReset.Execute := FALSE;

fbStop(Axis:= stAxisStruct.Axis);
fbStop.Execute := FALSE;

fbHalt(Axis:= stAxisStruct.Axis);
fbHalt.Execute := FALSE;

fbJog(Axis:= stAxisStruct.Axis);

fbHome(Axis:= stAxisStruct.Axis);
fbHome.bExecute := FALSE;

fbMoveAbsolute(Axis:= stAxisStruct.Axis);
fbMoveAbsolute.Execute := FALSE;

fbMoveRelative(Axis:= stAxisStruct.Axis);
fbMoveRelative.Execute := FALSE;

fbMoveVelocity(Axis:= stAxisStruct.Axis);
fbMoveVelocity.Execute := FALSE;

fbMoveModulo(Axis:= stAxisStruct.Axis);
fbMoveModulo.Execute := FALSE;

fbGearin(Slave:= stAxisStruct.Axis, Master:= GVL.aAxes[stMasterAxis.nIndex].Axis);
fbGearIn.Execute := FALSE;

fbGearInMultiMaster(Slave:=stAxisStruct.Axis,
    Master1 := GVL.aAxes[stAxisStruct.stConfig.aMultiMasterAxisLatched[1].nIndex].Axis,
    Master2 := GVL.aAxes[stAxisStruct.stConfig.aMultiMasterAxisLatched[2].nIndex].Axis,
    Master3 := GVL.aAxes[stAxisStruct.stConfig.aMultiMasterAxisLatched[3].nIndex].Axis,
    Master4 := GVL.aAxes[stAxisStruct.stConfig.aMultiMasterAxisLatched[4].nIndex].Axis);

fbGearOut(Slave:=stAxisStruct.Axis);
fbGearOut.Execute := FALSE;

//Linking the limit swtiches
stAxisStruct.stStatus.bFwEnabled := stAxisStruct.stInputs.bLimitFwd;
stAxisStruct.stStatus.bBwEnabled := stAxisStruct.stInputs.bLimitBwd;

FOR iAxisIndex:= 1 TO GVL_APP.nAxisNum DO
    IF (stAxisStruct.stConfig.aMultiSlaveAxisRatio[iAxisIndex]<>0) THEN
        stAxisStruct.stStatus.bFwEnabled := stAxisStruct.stStatus.bFwEnabled AND SEL(stAxisStruct.stConfig.aMultiSlaveAxisRatio[iAxisIndex] > 0, GVL.aAxes[iAxisIndex].stStatus.bBwEnabled, GVL.aAxes[iAxisIndex].stStatus.bFwEnabled);
        stAxisStruct.stStatus.bBwEnabled := stAxisStruct.stStatus.bBwEnabled AND SEL(stAxisStruct.stConfig.aMultiSlaveAxisRatio[iAxisIndex] > 0, GVL.aAxes[iAxisIndex].stStatus.bFwEnabled, GVL.aAxes[iAxisIndex].stStatus.bBwEnabled);
    END_IF
END_FOR

//Power
fbPower.Enable := stAxisStruct.stControl.bEnable;
fbPower.Enable_Positive := stAxisStruct.stStatus.bFwEnabled;
fbPower.Enable_Negative := stAxisStruct.stStatus.bBwEnabled;
fbPower.Override := stAxisStruct.stConfig.fOverride;
stAxisStruct.stStatus.bEnabled := fbPower.Status;

//Stop
fbStop.Execute := stAxisStruct.stControl.bStop;
fbStop.Deceleration := stAxisStruct.stConfig.fDeceleration;
IF stAxisStruct.stControl.bStop AND stAxisStruct.Axis.Status.Stopping THEN
    stAxisStruct.stControl.bStop := FALSE;
END_IF

//Reset
fbReset.Execute := stAxisStruct.stControl.bReset AND stAxisStruct.stStatus.bError;
IF stAxisStruct.stControl.bReset AND NOT (stAxisStruct.stStatus.bError OR stAxisStruct.stStatus.bWarning) THEN
    stAxisStruct.stControl.bReset := FALSE;
END_IF

//Motion Functions
CASE stAxisStruct.stControl.eCommand OF
    E_MotionFunctions.eMoveAbsolute:
        fbMoveAbsolute.Execute := stAxisStruct.stControl.bExecute;
        fbMoveAbsolute.Position := stAxisStruct.stConfig.fPosition;
        fbMoveAbsolute.Velocity := ABS(stAxisStruct.stConfig.fVelocity);
        fbMoveAbsolute.Acceleration := stAxisStruct.stConfig.fAcceleration;
        fbMoveAbsolute.Deceleration := stAxisStruct.stConfig.fDeceleration;

    E_MotionFunctions.eMoveRelative:
        fbMoveRelative.Execute := stAxisStruct.stControl.bExecute;
        fbMoveRelative.Distance := stAxisStruct.stConfig.fPosition;
        fbMoveRelative.Velocity := ABS(stAxisStruct.stConfig.fVelocity);
        fbMoveRelative.Acceleration := stAxisStruct.stConfig.fAcceleration;
        fbMoveRelative.Deceleration := stAxisStruct.stConfig.fDeceleration;

    E_MotionFunctions.eJog:
        fbJog.JogForward := stAxisStruct.stControl.bJogFwd AND NOT (stAxisStruct.stControl.bExecute OR stAxisStruct.stStatus.bError);
        fbJog.JogBackwards := stAxisStruct.stControl.bJogBwd AND NOT (stAxisStruct.stControl.bExecute OR stAxisStruct.stStatus.bError);
        fbJog.Mode := 0;
        fbJog.Velocity := stAxisStruct.stConfig.fVelocity;
        fbJog.Acceleration := stAxisStruct.stConfig.fAcceleration;
        fbJog.Deceleration := stAxisStruct.stConfig.fDeceleration;

    E_MotionFunctions.eMoveVelocity:
        fbMoveVelocity.Execute := stAxisStruct.stControl.bExecute;
        fbMoveVelocity.Velocity := ABS(stAxisStruct.stConfig.fVelocity);
        fbMoveVelocity.Acceleration := stAxisStruct.stConfig.fAcceleration;
        fbMoveVelocity.Deceleration := stAxisStruct.stConfig.fDeceleration;
        fbMoveVelocity.Direction := SEL(stAxisStruct.stConfig.fVelocity < 0, MC_Positive_Direction, MC_Negative_Direction);

    E_MotionFunctions.eMoveModulo:
        fbMoveModulo.Execute := stAxisStruct.stControl.bExecute;
        fbMoveModulo.Position := stAxisStruct.stConfig.fPosition;
        fbMoveModulo.Velocity := ABS(stAxisStruct.stConfig.fVelocity);
        fbMoveModulo.Acceleration := stAxisStruct.stConfig.fAcceleration;
        fbMoveModulo.Deceleration := stAxisStruct.stConfig.fDeceleration;

    E_MotionFunctions.eGearIn:
        fbGearIn.Execute := stAxisStruct.stControl.bExecute;
        fbGearIn.RatioNumerator := stMasterAxis.fRatio;
        fbGearIn.RatioDenominator := nRATIO_DENOMINATOR_DEFAULT;
		
        IF NOT fbGearIn.InGear THEN
            stMasterAxis.nIndex := stAxisStruct.stConfig.stMasterAxis.nIndex;
            stMasterAxis.fRatio := stAxisStruct.stConfig.stMasterAxis.fRatio;
        END_IF
		
        // Confirm slaves have no gearing before attempting to gear in
         IF fbGearIn.InGear AND (GVL.aAxes[stMasterAxis.nIndex].stConfig.aSlaveAxisRatio[GVL.iAxis] = nNO_GEARING) THEN
            GVL.aAxes[stMasterAxis.nIndex].stConfig.aSlaveAxisRatio[GVL.iAxis] := stMasterAxis.fRatio;
        END_IF

    E_MotionFunctions.eGearInMultiMaster:
        IF stAxisStruct.stControl.bExecute AND NOT stAxisStruct.Axis.Status.Coupled THEN
            // Latch master references
            FOR iMultiMastersAxesIndex:= 1 TO nMULTI_MASTER_MAX_AXES DO
                IF stAxisStruct.stConfig.aMultiMasterAxis[iMultiMastersAxesIndex].nIndex > 0 AND stAxisStruct.stConfig.aMultiMasterAxis[iMultiMastersAxesIndex].nIndex <= GVL_APP.nAxisNum THEN
                    stAxisStruct.stConfig.aMultiMasterAxisLatched[iMultiMastersAxesIndex].nIndex := stAxisStruct.stConfig.aMultiMasterAxis[iMultiMastersAxesIndex].nIndex;
                END_IF
            END_FOR
            // Latch gear ratios
            FOR iMultiMastersAxesIndex:= 1 TO nMULTI_MASTER_MAX_AXES DO
                stAxisStruct.stConfig.aMultiMasterAxisLatched[iMultiMastersAxesIndex].fRatio := stAxisStruct.stConfig.aMultiMasterAxis[iMultiMastersAxesIndex].fRatio;
            END_FOR
            // Transfer gear ratios to FB
            fbGearInMultiMaster.GearRatio1 := stAxisStruct.stConfig.aMultiMasterAxisLatched[1].fRatio;
            fbGearInMultiMaster.GearRatio2 := stAxisStruct.stConfig.aMultiMasterAxisLatched[2].fRatio;
            fbGearInMultiMaster.GearRatio3 := stAxisStruct.stConfig.aMultiMasterAxisLatched[3].fRatio;
            fbGearInMultiMaster.GearRatio4 := stAxisStruct.stConfig.aMultiMasterAxisLatched[4].fRatio;
            fbGearInMultiMaster.Enable := stAxisStruct.stControl.bExecute;
        END_IF
		
        IF fbGearInMultiMaster.Error THEN
            fbGearInMultiMaster.Enable := FALSE;
        END_IF

    E_MotionFunctions.eGearOut:
        fbGearOut.Execute := stAxisStruct.stControl.bExecute;
        fbGearInMultiMaster.Enable := FALSE;
		
        IF fbGearOut.Done THEN
            //Clear slave ratio from master axis slave array
            GVL.aAxes[stMasterAxis.nIndex].stConfig.aSlaveAxisRatio[GVL.iAxis] := nNO_GEARING;
            FOR iSlaveAxesIndex:= 1 TO GVL_APP.nAxisNum DO
                GVL.aAxes[iSlaveAxesIndex].stConfig.aMultiSlaveAxisRatio[GVL.iAxis] := nNO_GEARING;
            END_FOR
        END_IF

    E_MotionFunctions.eHome:
        fbHome.bExecute := stAxisStruct.stControl.bExecute;
        fbHome.bReset := stAxisStruct.stControl.bReset;
        fbHome.bStop := stAxisStruct.stControl.bStop;
        fbHome.eHomeProc := stAxisStruct.stConfig.eHomeSeq;
        fbHome.fHomePosition := stAxisStruct.stConfig.fHomePosition;
        fbHome.bLimitBwd := stAxisStruct.stInputs.bLimitBwd;
        fbHome.bLimitFwd := stAxisStruct.stInputs.bLimitFwd;
        fbHome.bHomeSensor := stAxisStruct.stInputs.bHomeSensor;
        stAxisStruct.stStatus.bHomed := fbHome.bHomed;
END_CASE

// Busy
stAxisStruct.stStatus.bBusy := stAxisStruct.Axis.Status.HasJob;

// Done
IF fbMoveAbsolute.Done OR fbMoveModulo.Done OR fbMoveRelative.Done OR fbHome.fbFinishHoming.Done THEN
        stAxisStruct.stStatus.bDone := TRUE;
ELSIF stAxisStruct.Axis.Status.HasJob THEN
        stAxisStruct.stStatus.bDone := FALSE;
END_IF

// Error from functions and Nc
IF stAxisStruct.stStatus.bError AND NOT stAxisStruct.stControl.bReset THEN
    stAxisStruct.stStatus.bError := stAxisStruct.stStatus.bError;
    stAxisStruct.stStatus.nErrorID := stAxisStruct.stStatus.nErrorID;

ELSIF fbPower.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbPower.ErrorID;

ELSIF fbHalt.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbHalt.ErrorID;

ELSIF fbJog.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbJog.ErrorID;

ELSIF fbMoveVelocity.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbMoveVelocity.ErrorID;

ELSIF fbMoveRelative.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbMoveRelative.ErrorID;

ELSIF fbMoveAbsolute.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbMoveAbsolute.ErrorID;

ELSIF fbMoveModulo.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbMoveModulo.ErrorID;

ELSIF fbHome.bError THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbHome.nErrorID;

ELSIF fbGearIn.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbGearIn.ErrorID;

ELSIF fbGearIn.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbGearIn.ErrorID;

ELSIF fbGearInMultiMaster.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbGearInMultiMaster.ErrorID;

ELSIF fbGearInMultiMaster.Error THEN
    stAxisStruct.status.bError:=TRUE;
    stAxisStruct.status.nErrorId:=fbGearInMultiMaster.ErrorID;

ELSIF fbGearOut.Error and stAxisStruct.Axis.Status.Coupled THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbGearOut.ErrorID;

ELSIF stAxisStruct.Axis.Status.Error  THEN
    stAxisStruct.stStatus.bError := stAxisStruct.Axis.Status.Error;
    stAxisStruct.stStatus.nErrorId := stAxisStruct.Axis.Status.ErrorID;

ELSE
    stAxisStruct.stStatus.bError := FALSE;
    stAxisStruct.stStatus.nErrorId := 0;
END_IF;

// Warnings from functions and Nc
IF stAxisStruct.stStatus.bWarning AND NOT stAxisStruct.stControl.bReset THEN
    stAxisStruct.stStatus.bWarning := stAxisStruct.stStatus.bWarning;
ELSIF fbHome.bWarning THEN
    stAxisStruct.stStatus.bWarning := stAxisStruct.stStatus.bError;
ELSE
    stAxisStruct.stStatus.bWarning := FALSE;
END_IF;

// Actual Velocity
stAxisStruct.stStatus.fActVelocity := stAxisStruct.Axis.NcToPlc.ActVelo;

// Actual Position
IF stAxisStruct.Axis.Status.OpMode.Modulo THEN
    stAxisStruct.stStatus.fActPosition := stAxisStruct.Axis.NcToPlc.ModuloActPos;
ELSE
    stAxisStruct.stStatus.fActPosition := stAxisStruct.Axis.NcToPlc.ActPos;
END_IF

// Gearing Status
stAxisStruct.stStatus.bGeared := stAxisStruct.Axis.Status.Coupled;

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio1 <> 0 AND stAxisStruct.stConfig.aMultiMasterAxisLatched[1].nIndex <> 0 THEN
    GVL.aAxes[stAxisStruct.stConfig.aMultiMasterAxisLatched[1].nIndex].stConfig.aMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio1;
    stAxisStruct.stStatus.bCoupledGear1 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear1 := FALSE;
END_IF

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio2 <> 0 AND stAxisStruct.stConfig.aMultiMasterAxisLatched[2].nIndex <> 0 THEN
    GVL.aAxes[stAxisStruct.stConfig.aMultiMasterAxisLatched[2].nIndex].stConfig.aMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio2;
    stAxisStruct.stStatus.bCoupledGear2 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear2 := FALSE;
END_IF

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio3 <> 0 AND stAxisStruct.stConfig.aMultiMasterAxisLatched[3].nIndex <> 0 THEN
    GVL.aAxes[stAxisStruct.stConfig.aMultiMasterAxisLatched[3].nIndex].stConfig.aMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio3;
    stAxisStruct.stStatus.bCoupledGear3 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear3 := FALSE;
END_IF

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio4 <> 0 AND stAxisStruct.stConfig.aMultiMasterAxisLatched[4].nIndex <> 0 THEN
    GVL.aAxes[stAxisStruct.stConfig.aMultiMasterAxisLatched[4].nIndex].stConfig.aMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio4;
    stAxisStruct.stStatus.bCoupledGear4 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear4 := FALSE;
END_IF

// Gearing Status
stAxisStruct.status.bGeared:= stAxisStruct.Axis.Status.Coupled;

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio1 <> 0 AND stAxisStruct.config.aMultiMasterAxisLatched[1].nIndex <> 0 THEN
    GVL.axes[stAxisStruct.config.aMultiMasterAxisLatched[1].nIndex].config.aMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio1;
    stAxisStruct.status.bCoupledGear1:=TRUE;
ELSE
    stAxisStruct.status.bCoupledGear1:=FALSE;
END_IF

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio2 <> 0 AND stAxisStruct.config.aMultiMasterAxisLatched[2].nIndex <> 0 THEN
    GVL.axes[stAxisStruct.config.aMultiMasterAxisLatched[2].nIndex].config.aMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio2;
    stAxisStruct.status.bCoupledGear2:=TRUE;
ELSE
    stAxisStruct.status.bCoupledGear2:=FALSE;
END_IF

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio3 <> 0 AND stAxisStruct.config.aMultiMasterAxisLatched[3].nIndex <> 0 THEN
    GVL.axes[stAxisStruct.config.aMultiMasterAxisLatched[3].nIndex].config.aMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio3;
    stAxisStruct.status.bCoupledGear3:=TRUE;
ELSE
    stAxisStruct.status.bCoupledGear3:=FALSE;
END_IF

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio4 <> 0 AND stAxisStruct.config.aMultiMasterAxisLatched[4].nIndex <> 0 THEN
    GVL.axes[stAxisStruct.config.aMultiMasterAxisLatched[4].nIndex].config.aMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio4;
    stAxisStruct.status.bCoupledGear4:=TRUE;
ELSE
    stAxisStruct.status.bCoupledGear4:=FALSE;
END_IF

// Reset bExecute
stAxisStruct.stControl.bExecute := FALSE;]]></ST>
    </Implementation>
    <LineIds Name="FB_Axis">
      <LineId Id="3042" Count="2" />
      <LineId Id="3046" Count="1" />
      <LineId Id="3258" Count="0" />
      <LineId Id="3048" Count="1" />
      <LineId Id="3259" Count="0" />
      <LineId Id="3050" Count="1" />
      <LineId Id="3260" Count="0" />
      <LineId Id="3052" Count="1" />
      <LineId Id="3261" Count="0" />
      <LineId Id="3054" Count="0" />
      <LineId Id="3262" Count="0" />
      <LineId Id="3055" Count="1" />
      <LineId Id="3263" Count="0" />
      <LineId Id="3057" Count="1" />
      <LineId Id="3264" Count="0" />
      <LineId Id="3059" Count="1" />
      <LineId Id="3265" Count="0" />
      <LineId Id="3061" Count="1" />
      <LineId Id="3266" Count="0" />
      <LineId Id="3063" Count="1" />
      <LineId Id="3317" Count="0" />
      <LineId Id="3065" Count="1" />
      <LineId Id="3596" Count="0" />
      <LineId Id="3523" Count="0" />
      <LineId Id="3578" Count="1" />
      <LineId Id="3582" Count="0" />
      <LineId Id="3580" Count="0" />
      <LineId Id="3268" Count="0" />
      <LineId Id="3067" Count="2" />
      <LineId Id="3982" Count="0" />
      <LineId Id="3070" Count="1" />
      <LineId Id="3073" Count="28" />
      <LineId Id="3983" Count="0" />
      <LineId Id="3102" Count="35" />
      <LineId Id="3139" Count="9" />
      <LineId Id="3276" Count="0" />
      <LineId Id="3149" Count="1" />
      <LineId Id="3979" Count="1" />
      <LineId Id="3532" Count="0" />
      <LineId Id="3534" Count="0" />
      <LineId Id="3788" Count="0" />
      <LineId Id="3876" Count="0" />
      <LineId Id="3882" Count="0" />
      <LineId Id="3790" Count="2" />
      <LineId Id="3868" Count="0" />
      <LineId Id="3877" Count="0" />
      <LineId Id="3873" Count="0" />
      <LineId Id="3805" Count="0" />
      <LineId Id="3874" Count="1" />
      <LineId Id="3808" Count="3" />
      <LineId Id="3880" Count="0" />
      <LineId Id="3879" Count="0" />
      <LineId Id="3806" Count="0" />
      <LineId Id="3935" Count="2" />
      <LineId Id="3533" Count="0" />
      <LineId Id="3154" Count="1" />
      <LineId Id="3881" Count="0" />
      <LineId Id="3156" Count="1" />
      <LineId Id="3278" Count="0" />
      <LineId Id="3158" Count="1" />
      <LineId Id="3162" Count="1" />
      <LineId Id="3165" Count="0" />
      <LineId Id="3167" Count="3" />
      <LineId Id="3172" Count="7" />
      <LineId Id="3181" Count="0" />
      <LineId Id="3183" Count="8" />
      <LineId Id="3693" Count="0" />
      <LineId Id="3699" Count="0" />
      <LineId Id="3694" Count="0" />
      <LineId Id="3691" Count="1" />
      <LineId Id="3698" Count="0" />
      <LineId Id="3938" Count="0" />
      <LineId Id="3395" Count="0" />
      <LineId Id="3939" Count="7" />
      <LineId Id="3171" Count="0" />
      <LineId Id="3947" Count="9" />
      <LineId Id="3993" Count="0" />
      <LineId Id="3958" Count="2" />
      <LineId Id="3994" Count="0" />
      <LineId Id="3962" Count="2" />
      <LineId Id="3995" Count="0" />
      <LineId Id="3966" Count="0" />
      <LineId Id="3304" Count="0" />
      <LineId Id="3192" Count="0" />
      <LineId Id="3996" Count="0" />
      <LineId Id="3194" Count="0" />
      <LineId Id="3305" Count="0" />
      <LineId Id="3195" Count="0" />
      <LineId Id="3997" Count="0" />
      <LineId Id="3197" Count="0" />
      <LineId Id="3306" Count="0" />
      <LineId Id="3198" Count="0" />
      <LineId Id="3998" Count="0" />
      <LineId Id="3200" Count="0" />
      <LineId Id="3307" Count="0" />
      <LineId Id="3285" Count="0" />
      <LineId Id="3999" Count="0" />
      <LineId Id="3203" Count="0" />
      <LineId Id="3308" Count="0" />
      <LineId Id="3204" Count="0" />
      <LineId Id="4000" Count="0" />
      <LineId Id="3206" Count="0" />
      <LineId Id="3309" Count="0" />
      <LineId Id="3207" Count="0" />
      <LineId Id="4002" Count="0" />
      <LineId Id="3209" Count="0" />
      <LineId Id="3310" Count="0" />
      <LineId Id="3210" Count="0" />
      <LineId Id="3212" Count="0" />
      <LineId Id="3311" Count="0" />
      <LineId Id="3213" Count="2" />
      <LineId Id="3312" Count="0" />
      <LineId Id="3216" Count="2" />
      <LineId Id="3313" Count="0" />
      <LineId Id="3219" Count="2" />
      <LineId Id="3812" Count="0" />
      <LineId Id="3814" Count="1" />
      <LineId Id="3314" Count="0" />
      <LineId Id="3813" Count="0" />
      <LineId Id="3222" Count="2" />
      <LineId Id="3315" Count="0" />
      <LineId Id="3225" Count="2" />
      <LineId Id="3318" Count="0" />
      <LineId Id="3228" Count="2" />
      <LineId Id="3298" Count="0" />
      <LineId Id="3231" Count="4" />
      <LineId Id="3237" Count="1" />
      <LineId Id="3240" Count="1" />
      <LineId Id="3243" Count="0" />
      <LineId Id="3246" Count="9" />
      <LineId Id="3624" Count="1" />
      <LineId Id="3650" Count="0" />
      <LineId Id="3685" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>