<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_Axis" Id="{45901cd0-c6d2-4114-b7cf-de832171219f}" SpecialFunc="None">
    <Declaration><![CDATA[
//Function block to run a virtual drive with Nc
FUNCTION_BLOCK FB_Axis
VAR
    sVersion: STRING := '1.0.4';
END_VAR

VAR CONSTANT
    nMULTI_MASTER_MAX_AXES: UINT := 4;
    //Kept static as numerator is LREAL and consistent with multigearing
    nRATIO_DENOMINATOR_DEFAULT: UINT := 1;
    //By default 0 as represents no existing gearing
    nNO_GEARING: UINT := 0;
END_VAR

VAR_IN_OUT
    stAxisStruct: ST_AxisStruct;
END_VAR

VAR
    nAxisIndex: UINT;
    nMultiMastersAxesIndex: UINT;
    nSlaveAxesIndex: UINT;
    bWaitForStoppingAfterLimitHit : BOOL := FALSE;
    fbRemovePowerTimer: TOF;
    stMasterAxis: ST_GearAxis := (nIndex := 1, fRatio := 0);
    fbReset: MC_Reset;
    fbPower: MC_Power;
    fbStop: MC_Stop;
    fbHalt: MC_Halt;
    fbJog: MC_Jog;
    fbMoveAbsolute: MC_MoveAbsolute;
    fbMoveVelocity: MC_MoveVelocity;
    fbMoveRelative: MC_MoveRelative;
    fbMoveModulo: MC_MoveModulo;
    fbGearIn: MC_GearIn;
    fbGearOut: MC_GearOut;
    fbGearInMultiMaster: MC_GearInMultiMaster;
    fbHome: FB_Homing;
    fbExecuteRiseEdge: R_TRIG;
    fbJogRiseEdge: R_TRIG;
    fbStopRiseEdge: R_TRIG;
    fbHaltRiseEdge: R_TRIG;
    fbResetRiseEdge: R_TRIG;
    fbStopFinishedRiseEdge: R_TRIG;
    fbHaltFinishedRiseEdge: R_TRIG;
    fbResetFinishedRiseEdge: R_TRIG;
    fbCommandAbortedRiseEdge: R_TRIG;
    fbDoneRiseEdge: R_TRIG;
    fbWriteParameter: MC_WriteParameter;
    fbReadParameter: MC_ReadParameter;

    // Used in/for actReadMcParameters
    bReadValid: BOOL := FALSE;
    fbReadAxisVeloManSlow: MC_ReadParameter;
    fbReadAxisVeloManFast: MC_ReadParameter;
    fbReadHomingVelToCam: MC_ReadParameter;
    fbReadHomingVelFromCam: MC_ReadParameter;
    fbReadAxisVeloMax: MC_ReadParameter;
    fbReadAxisMaxAcc: MC_ReadParameter;
    fbReadAxisMaxDec: MC_ReadParameter;
    fbReadAxisAcc: MC_ReadParameter;
    fbReadAxisDec: MC_ReadParameter;
    fbReadEnMinSoftPosLimit: MC_ReadParameter;
    fbReadEnMaxSoftPosLimit: MC_ReadParameter;
    fbReadMinSoftPosLimit: MC_ReadParameter;
    fbReadMaxSoftPosLimit: MC_ReadParameter;
    fbReadEnPositionLagMonitoring: MC_ReadParameter;
    fbReadAxisMaxPosLagValue: MC_ReadParameter;
    fbReadEnTargetPositionMonitoring: MC_ReadParameter;
    fbReadTargetPositionWindow: MC_ReadParameter;

    bDoneEdge: BOOL; // helper variable for the detection of a rising edge of the done output of any motion FBs
    bCommandAbortedEdge: BOOL; // helper variable for the detection of a rising edge of the commandAborted output of any motion FBs
    bBusy: BOOL; // helper variable for a logical OR of the busy output of all motion FBs

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
bBusy := FALSE;

stAxisStruct.Axis.ReadStatus();
stAxisStruct.stStatus.bMovingForward:= stAxisStruct.Axis.Status.PositiveDirection;
stAxisStruct.stStatus.bMovingBackward:= stAxisStruct.Axis.Status.NegativeDirection;

actReadMcParameters();

IF stAxisStruct.stConfig.bReadMcParametersValid AND NOT stAxisStruct.stStatus.bAxisInitialized THEN
    actInit();
END_IF

//Call of all MC Instances and set all Executes to FALSE
fbPower(Axis := stAxisStruct.Axis);
fbPower.Enable := FALSE;

fbReset(Axis := stAxisStruct.Axis);
fbReset.Execute := FALSE;
bBusy:= bBusy OR fbReset.Busy;

fbStop(Axis := stAxisStruct.Axis);
fbStop.Execute := FALSE;
bBusy:= bBusy OR fbStop.Busy;

fbHalt(Axis := stAxisStruct.Axis);
fbHalt.Execute := FALSE;
bBusy:= bBusy OR fbHalt.Busy;

fbJog(Axis := stAxisStruct.Axis);
bBusy:= bBusy OR fbJog.Busy;

fbHome(Axis := stAxisStruct.Axis,
bLimitBwd := stAxisStruct.stInputs.bLimitBwd,
bLimitFwd := stAxisStruct.stInputs.bLimitFwd,
bHomeSensor := stAxisStruct.stInputs.bHomeSensor);
fbHome.bExecute := FALSE;
bBusy:= bBusy OR fbHome.bBusy;

fbMoveAbsolute(Axis := stAxisStruct.Axis);
fbMoveAbsolute.Execute := FALSE;
bBusy:= bBusy OR fbMoveAbsolute.Busy;

fbMoveRelative(Axis := stAxisStruct.Axis);
fbMoveRelative.Execute := FALSE;
bBusy:= bBusy OR fbMoveRelative.Busy;

fbMoveVelocity(Axis := stAxisStruct.Axis);
fbMoveVelocity.Execute := FALSE;
bBusy:= bBusy OR fbMoveVelocity.Busy;

fbMoveModulo(Axis := stAxisStruct.Axis);
fbMoveModulo.Execute := FALSE;
bBusy:= bBusy OR fbMoveModulo.Busy;

fbGearin(Slave := stAxisStruct.Axis, Master := GVL.astAxes[stMasterAxis.nIndex].Axis);
fbGearIn.Execute := FALSE;
bBusy:= bBusy OR fbGearin.Busy;

fbGearInMultiMaster(Slave := stAxisStruct.Axis,
    Master1 := GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[1].nIndex].Axis,
    Master2 := GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[2].nIndex].Axis,
    Master3 := GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[3].nIndex].Axis,
    Master4 := GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[4].nIndex].Axis);
fbGearInMultiMaster.Enable:= FALSE;
bBusy:= bBusy OR fbGearInMultiMaster.Busy;

fbGearOut(Slave := stAxisStruct.Axis);
fbGearOut.Execute := FALSE;
bBusy:= bBusy OR fbGearOut.Busy;

fbWriteParameter(Axis := stAxisStruct.Axis);
fbWriteParameter.Execute := FALSE;
bBusy:= bBusy OR fbWriteParameter.Busy;

fbReadParameter(Axis := stAxisStruct.Axis);
fbReadParameter.Enable := FALSE;
bBusy:= bBusy OR fbReadParameter.Busy;

//Linking the limit swtiches and interlock signals
stAxisStruct.stStatus.bFwEnabled := stAxisStruct.stInputs.bLimitFwd;
stAxisStruct.stStatus.bBwEnabled := stAxisStruct.stInputs.bLimitBwd;
stAxisStruct.stStatus.bInterlockedFwd := stAxisStruct.stControl.bInterlockFwd;
stAxisStruct.stStatus.bInterlockedBwd := stAxisStruct.stControl.bInterlockBwd;

FOR nAxisIndex := 1 TO GVL_APP.nAXIS_NUM DO
    IF (stAxisStruct.stConfig.afMultiSlaveAxisRatio[nAxisIndex] <> 0) THEN
        stAxisStruct.stStatus.bFwEnabled := stAxisStruct.stStatus.bFwEnabled AND SEL(stAxisStruct.stConfig.afMultiSlaveAxisRatio[nAxisIndex] > 0, GVL.astAxes[nAxisIndex].stStatus.bBwEnabled, GVL.astAxes[nAxisIndex].stStatus.bFwEnabled);
        stAxisStruct.stStatus.bBwEnabled := stAxisStruct.stStatus.bBwEnabled AND SEL(stAxisStruct.stConfig.afMultiSlaveAxisRatio[nAxisIndex] > 0, GVL.astAxes[nAxisIndex].stStatus.bFwEnabled, GVL.astAxes[nAxisIndex].stStatus.bBwEnabled);
    END_IF
END_FOR

//Timer for keeping power on after limit switch hit, needed for homing routines - if power is lost routines are aborted
fbRemovePowerTimer(IN := stAxisStruct.stInputs.bLimitFwd AND stAxisStruct.stInputs.bLimitBwd, PT := T#100MS);
IF fbHome.bBusy AND (fbRemovePowerTimer.Q OR stAxisStruct.Axis.NcToPlc.AxisState=5) THEN //5=PHASE_ACCNEG
    bWaitForStoppingAfterLimitHit := TRUE;
ELSE
    bWaitForStoppingAfterLimitHit := FALSE;
END_IF

//Power
fbPower.Enable := stAxisStruct.stControl.bEnable;
fbPower.Enable_Positive := (stAxisStruct.stStatus.bFwEnabled OR bWaitForStoppingAfterLimitHit) AND NOT stAxisStruct.stStatus.bInterlockedFwd;
fbPower.Enable_Negative := (stAxisStruct.stStatus.bBwEnabled OR bWaitForStoppingAfterLimitHit) AND NOT stAxisStruct.stStatus.bInterlockedBwd;
fbPower.Override := stAxisStruct.stConfig.fOverride;
stAxisStruct.stStatus.bEnabled := NOT stAxisStruct.Axis.Status.Disabled;

//Stop
fbStop.Execute := stAxisStruct.stControl.bStop;
fbHalt.Deceleration := stAxisStruct.stControl.fDeceleration;

//Halt
fbHalt.Execute := stAxisStruct.stControl.bHalt;
fbHalt.Deceleration := stAxisStruct.stControl.fDeceleration;

//Reset only if axis is in error state
IF stAxisStruct.stStatus.bError THEN
    fbReset.Execute := stAxisStruct.stControl.bReset;
ELSE
    stAxisStruct.stControl.bReset := FALSE;
END_IF

//Motion Functions
CASE stAxisStruct.stControl.eCommand OF
    E_MotionFunctions.eMoveAbsolute:
        fbMoveAbsolute.Execute := stAxisStruct.stControl.bExecute;
        fbMoveAbsolute.Position := stAxisStruct.stControl.fPosition;
        fbMoveAbsolute.Velocity := ABS(stAxisStruct.stControl.fVelocity);
        fbMoveAbsolute.Acceleration := stAxisStruct.stControl.fAcceleration;
        fbMoveAbsolute.Deceleration := stAxisStruct.stControl.fDeceleration;
        bDoneEdge := fbMoveAbsolute.Done;
        bCommandAbortedEdge := fbMoveAbsolute.CommandAborted;

    E_MotionFunctions.eMoveRelative:
        fbMoveRelative.Execute := stAxisStruct.stControl.bExecute;
        fbMoveRelative.Distance := stAxisStruct.stControl.fPosition;
        fbMoveRelative.Velocity := ABS(stAxisStruct.stControl.fVelocity);
        fbMoveRelative.Acceleration := stAxisStruct.stControl.fAcceleration;
        fbMoveRelative.Deceleration := stAxisStruct.stControl.fDeceleration;
        bDoneEdge := fbMoveRelative.Done;
        bCommandAbortedEdge := fbMoveRelative.CommandAborted;

    E_MotionFunctions.eJog:
        fbJog.JogForward := stAxisStruct.stControl.bJogFwd AND NOT (stAxisStruct.stControl.bExecute OR stAxisStruct.stStatus.bError);
        fbJog.JogBackwards := stAxisStruct.stControl.bJogBwd AND NOT (stAxisStruct.stControl.bExecute OR stAxisStruct.stStatus.bError);
        fbJog.Mode := 2;
        fbJog.Velocity := stAxisStruct.stControl.fJogVelocity;
        fbJog.Acceleration := stAxisStruct.stControl.fAcceleration;
        fbJog.Deceleration := stAxisStruct.stControl.fDeceleration;
        bDoneEdge := fbJog.Done;
        bCommandAbortedEdge := fbJog.CommandAborted;

    E_MotionFunctions.eMoveVelocity:
        fbMoveVelocity.Execute := stAxisStruct.stControl.bExecute;
        fbMoveVelocity.Velocity := ABS(stAxisStruct.stControl.fVelocity);
        fbMoveVelocity.Acceleration := stAxisStruct.stControl.fAcceleration;
        fbMoveVelocity.Deceleration := stAxisStruct.stControl.fDeceleration;
        fbMoveVelocity.Direction := SEL(stAxisStruct.stControl.fVelocity < 0, MC_Positive_Direction, MC_Negative_Direction);
        bDoneEdge := fbMoveVelocity.InVelocity;
        bCommandAbortedEdge := fbMoveVelocity.CommandAborted;

    E_MotionFunctions.eMoveModulo:
        fbMoveModulo.Execute := stAxisStruct.stControl.bExecute;
        fbMoveModulo.Position := stAxisStruct.stControl.fPosition;
        fbMoveModulo.Velocity := ABS(stAxisStruct.stControl.fVelocity);
        fbMoveModulo.Acceleration := stAxisStruct.stControl.fAcceleration;
        fbMoveModulo.Deceleration := stAxisStruct.stControl.fDeceleration;
        bDoneEdge := fbMoveModulo.Done;
        bCommandAbortedEdge := fbMoveModulo.CommandAborted;

    E_MotionFunctions.eGearIn:
        fbGearIn.Execute := stAxisStruct.stControl.bExecute;
        fbGearIn.RatioNumerator := stMasterAxis.fRatio;
        fbGearIn.RatioDenominator := nRATIO_DENOMINATOR_DEFAULT;
        bCommandAbortedEdge := fbGearIn.CommandAborted;

        IF NOT fbGearIn.InGear THEN
            stMasterAxis.nIndex := stAxisStruct.stConfig.stMasterAxis.nIndex;
            stMasterAxis.fRatio := stAxisStruct.stConfig.stMasterAxis.fRatio;
        END_IF

        //Confirm slaves have no gearing before attempting to gear in
         IF fbGearIn.InGear AND (GVL.astAxes[stMasterAxis.nIndex].stConfig.afSlaveAxisRatio[GVL.iAxis] = nNO_GEARING) THEN
            GVL.astAxes[stMasterAxis.nIndex].stConfig.afSlaveAxisRatio[GVL.iAxis] := stMasterAxis.fRatio;
        END_IF

    E_MotionFunctions.eGearInMultiMaster:
        bCommandAbortedEdge := fbGearInMultiMaster.CommandAborted;
        fbGearInMultiMaster.Options.AdvancedSlaveDynamics:=TRUE;
        fbGearInMultiMaster.Options.SyncMode:=E_GEARINMULTIMASTERSYNCMODE.POSSYNC2;

        IF stAxisStruct.stControl.bExecute AND NOT stAxisStruct.Axis.Status.Coupled THEN
            //Latch master references
            FOR nMultiMastersAxesIndex := 1 TO nMULTI_MASTER_MAX_AXES DO
                IF stAxisStruct.stConfig.astMultiMasterAxis[nMultiMastersAxesIndex].nIndex > 0 AND stAxisStruct.stConfig.astMultiMasterAxis[nMultiMastersAxesIndex].nIndex <= GVL_APP.nAXIS_NUM THEN
                    stAxisStruct.stConfig.astMultiMasterAxisLatched[nMultiMastersAxesIndex].nIndex := stAxisStruct.stConfig.astMultiMasterAxis[nMultiMastersAxesIndex].nIndex;
                END_IF
            END_FOR
            //Latch gear ratios
            FOR nMultiMastersAxesIndex := 1 TO nMULTI_MASTER_MAX_AXES DO
                stAxisStruct.stConfig.astMultiMasterAxisLatched[nMultiMastersAxesIndex].fRatio := stAxisStruct.stConfig.astMultiMasterAxis[nMultiMastersAxesIndex].fRatio;
            END_FOR
            //Transfer gear ratios to FB
            fbGearInMultiMaster.GearRatio1 := stAxisStruct.stConfig.astMultiMasterAxisLatched[1].fRatio;
            fbGearInMultiMaster.GearRatio2 := stAxisStruct.stConfig.astMultiMasterAxisLatched[2].fRatio;
            fbGearInMultiMaster.GearRatio3 := stAxisStruct.stConfig.astMultiMasterAxisLatched[3].fRatio;
            fbGearInMultiMaster.GearRatio4 := stAxisStruct.stConfig.astMultiMasterAxisLatched[4].fRatio;
            fbGearInMultiMaster.Enable := stAxisStruct.stControl.bExecute;
        END_IF

        IF fbGearInMultiMaster.Error THEN
            fbGearInMultiMaster.Enable := FALSE;
        END_IF

    E_MotionFunctions.eGearOut:
        fbGearOut.Execute := stAxisStruct.stControl.bExecute;
        fbGearInMultiMaster.Enable := FALSE;
        bDoneEdge := fbGearOut.Done;

        IF fbGearOut.Done THEN
            //Clear slave ratio from master axis slave array
            GVL.astAxes[stMasterAxis.nIndex].stConfig.afSlaveAxisRatio[GVL.iAxis] := nNO_GEARING;
            FOR nSlaveAxesIndex := 1 TO GVL_APP.nAXIS_NUM DO
                GVL.astAxes[nSlaveAxesIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := nNO_GEARING;
            END_FOR
        END_IF

    E_MotionFunctions.eHome:
        fbHome.bExecute := stAxisStruct.stControl.bExecute AND NOT stAxisStruct.stStatus.bError;
        fbHome.eHomeSeq := stAxisStruct.stConfig.eHomeSeq;
        fbHome.fHomePosition := stAxisStruct.stConfig.fHomePosition;
        fbHome.fHomeFinishDistance := stAxisStruct.stConfig.fHomeFinishDistance;
        bDoneEdge := fbHome.bDone;
        bCommandAbortedEdge := fbHome.bCommandAborted;

    E_MotionFunctions.eWriteParameter:
        fbWriteParameter.Execute := stAxisStruct.stcontrol.bExecute;
        fbWriteParameter.ParameterNumber := stAxisStruct.stConfig.eAxisParameters;
        fbWriteParameter.Value := stAxisStruct.stConfig.fWriteAxisParameter;
        bDoneEdge := fbWriteParameter.Done;

    E_MotionFunctions.eReadParameter:
        fbReadParameter.Enable := stAxisStruct.stcontrol.bExecute;
        fbReadParameter.ReadMode := E_READMODE.READMODE_ONCE;
        fbReadParameter.ParameterNumber := stAxisStruct.stConfig.eAxisParameters;
        stAxisStruct.stconfig.fReadAxisParameter := fbReadParameter.Value;
        bDoneEdge := fbReadParameter.Valid;


END_CASE

//Busy from the motion function blocks
stAxisStruct.stStatus.bBusy := bBusy;

//CommandAborted from the eCommand function blocks
fbCommandAbortedRiseEdge(CLK:= bCommandAbortedEdge);
IF fbCommandAbortedRiseEdge.Q THEN
    stAxisStruct.stStatus.bCommandAborted := TRUE;
END_IF

//Done from the eCommand function blocks
fbDoneRiseEdge(CLK:= bDoneEdge);
IF fbDoneRiseEdge.Q THEN
    stAxisStruct.stStatus.bDone := TRUE;
    stAxisStruct.stStatus.bCommandAborted:=FALSE;
END_IF

//Reset Done and CommandAborted with any new eCommand (Execute or Jog)
fbExecuteRiseEdge(CLK:=stAxisStruct.stControl.bExecute);
IF fbExecuteRiseEdge.Q THEN
    stAxisStruct.stStatus.bDone := FALSE;
    stAxisStruct.stStatus.bCommandAborted := FALSE;
END_IF
fbJogRiseEdge(CLK:=stAxisStruct.stControl.bJogBwd OR stAxisStruct.stControl.bJogFwd);
IF fbJogRiseEdge.Q AND (stAxisStruct.stControl.eCommand = E_MotionFunctions.eJog) THEN
    stAxisStruct.stStatus.bDone := FALSE;
    stAxisStruct.stStatus.bCommandAborted := FALSE;
END_IF

//Execution of fbReset ended
fbResetFinishedRiseEdge(CLK:=fbReset.Done OR fbReset.Error);
IF fbResetFinishedRiseEdge.Q THEN
    stAxisStruct.stControl.bReset := FALSE;
    IF NOT fbReset.Error THEN
        stAxisStruct.stStatus.bError := FALSE;
        stAxisStruct.stStatus.nErrorID := 0;
        stAxisStruct.stError.nResetErrorID := 0;
    END_IF
    stAxisStruct.stError.nNCErrorID := 0;
    stAxisStruct.stError.nGearInErrorID := 0;
    stAxisStruct.stError.nGearInMultiMasterErrorID := 0;
    stAxisStruct.stError.nGearOutErrorID := 0;
    stAxisStruct.stError.fbReadParameterErrorId := 0;
    stAxisStruct.stError.fbWriteParameterErrorId := 0;
    stAxisStruct.stError.nPowerErrorID := 0;
    stAxisStruct.stError.nStopErrorID := 0;
    stAxisStruct.stError.nHaltErrorID := 0;
    stAxisStruct.stError.nHomeErrorID := 0;
    stAxisStruct.stError.nJogErrorID := 0;
    stAxisStruct.stError.nMoveAbsoluteErrorID := 0;
    stAxisStruct.stError.nMoveRelativeErrorID := 0;
    stAxisStruct.stError.nMoveModuloErrorID := 0;
    stAxisStruct.stError.nMoveVelocityErrorID := 0;
    stAxisStruct.stControl.bExecute := FALSE;
    stAxisStruct.stControl.bStop := FALSE;
    stAxisStruct.stControl.bHalt := FALSE;
    stAxisStruct.stControl.bJogBwd := FALSE;
    stAxisStruct.stControl.bJogFwd := FALSE;
END_IF

//Execution of fbStop ended
fbStopFinishedRiseEdge(CLK:=fbStop.Done OR fbStop.Error OR fbStop.CommandAborted);
IF fbStopFinishedRiseEdge.Q THEN
    stAxisStruct.stControl.bStop := FALSE;
END_IF

//Execution of fbHalt ended
fbHaltFinishedRiseEdge(CLK:=fbHalt.Done OR fbHalt.Error OR fbHalt.CommandAborted);
IF fbHaltFinishedRiseEdge.Q THEN
    stAxisStruct.stControl.bHalt := FALSE;
END_IF

//Save the errors from the PLCopen motion functions blocks and from the NC
IF fbPower.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbPower.ErrorID;
    stAxisStruct.stError.nPowerErrorID := fbPower.ErrorID;

ELSIF fbHalt.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbHalt.ErrorID;
    stAxisStruct.stError.nHaltErrorID := fbHalt.ErrorID;

ELSIF fbStop.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbStop.ErrorID;
    stAxisStruct.stError.nStopErrorID := fbStop.ErrorID;

ELSIF fbHalt.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbHalt.ErrorID;
    stAxisStruct.stError.nHaltErrorID := fbHalt.ErrorID;

ELSIF fbReset.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbReset.ErrorID;
    stAxisStruct.stError.nResetErrorID := fbReset.ErrorID;

ELSIF fbJog.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbJog.ErrorID;
    stAxisStruct.stError.nJogErrorID := fbJog.ErrorID;

ELSIF fbMoveVelocity.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbMoveVelocity.ErrorID;
    stAxisStruct.stError.nMoveVelocityErrorID := fbMoveVelocity.ErrorID;

ELSIF fbMoveRelative.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbMoveRelative.ErrorID;
    stAxisStruct.stError.nMoveRelativeErrorID := fbMoveRelative.ErrorID;

ELSIF fbMoveAbsolute.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbMoveAbsolute.ErrorID;
    stAxisStruct.stError.nMoveAbsoluteErrorID := fbMoveAbsolute.ErrorID;

ELSIF fbMoveModulo.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbMoveModulo.ErrorID;
    stAxisStruct.stError.nMoveModuloErrorID := fbMoveModulo.ErrorID;

ELSIF fbHome.bError THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbHome.nErrorID;
    stAxisStruct.stError.nHomeErrorID := fbHome.nErrorID;

ELSIF fbGearIn.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbGearIn.ErrorID;
    stAxisStruct.stError.nGearInErrorId:=fbGearIn.ErrorID;

ELSIF fbGearInMultiMaster.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId:=fbGearInMultiMaster.ErrorID;
    stAxisStruct.stError.nGearInMultiMasterErrorId:=fbGearInMultiMaster.ErrorID;

ELSIF fbGearOut.Error and stAxisStruct.Axis.Status.Coupled THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbGearOut.ErrorID;
    stAxisStruct.stError.nGearOutErrorId := fbGearOut.ErrorID;

ELSIF fbReadParameter.Error THEN
    stAxisStruct.stStatus.bError := TRUE;
    stAxisStruct.stStatus.nErrorId := fbReadParameter.ErrorID;
    stAxisStruct.stError.fbReadParameterErrorId:=fbReadParameter.ErrorID;

ELSIF stAxisStruct.Axis.Status.Error THEN
    stAxisStruct.stStatus.bError := stAxisStruct.Axis.Status.Error;
    stAxisStruct.stStatus.nErrorId := stAxisStruct.Axis.Status.ErrorID;
    stAxisStruct.stError.nNCErrorId := stAxisStruct.Axis.Status.ErrorID;

END_IF;

//Actual Velocity
stAxisStruct.stStatus.fActVelocity := stAxisStruct.Axis.NcToPlc.ActVelo;

//Actual Position
IF stAxisStruct.Axis.Status.OpMode.Modulo THEN
    stAxisStruct.stStatus.fActPosition := stAxisStruct.Axis.NcToPlc.ModuloActPos;
ELSE
    stAxisStruct.stStatus.fActPosition := stAxisStruct.Axis.NcToPlc.ActPos;
END_IF

//Homing status
stAxisStruct.stStatus.bHomed := stAxisStruct.Axis.Status.Homed;

//Moving Status from the NC
stAxisStruct.stStatus.bMoving := stAxisStruct.Axis.Status.Moving;

//Gearing Status from the NC
stAxisStruct.stStatus.bGeared := stAxisStruct.Axis.Status.Coupled;

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio1 <> 0 AND stAxisStruct.stConfig.astMultiMasterAxisLatched[1].nIndex <> 0 THEN
    GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[1].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio1;
    stAxisStruct.stStatus.bCoupledGear1 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear1 := FALSE;
END_IF

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio2 <> 0 AND stAxisStruct.stConfig.astMultiMasterAxisLatched[2].nIndex <> 0 THEN
    GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[2].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio2;
    stAxisStruct.stStatus.bCoupledGear2 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear2 := FALSE;
END_IF

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio3 <> 0 AND stAxisStruct.stConfig.astMultiMasterAxisLatched[3].nIndex <> 0 THEN
    GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[3].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio3;
    stAxisStruct.stStatus.bCoupledGear3 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear3 := FALSE;
END_IF

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio4 <> 0 AND stAxisStruct.stConfig.astMultiMasterAxisLatched[4].nIndex <> 0 THEN
    GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[4].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio4;
    stAxisStruct.stStatus.bCoupledGear4 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear4 := FALSE;
END_IF

//Reset bExecute
stAxisStruct.stControl.bExecute := FALSE;
]]></ST>
    </Implementation>
    <Action Name="actInit" Id="{fbff7981-0a80-47f4-875f-ec24f3c93b13}">
      <Implementation>
        <ST><![CDATA[
//Initialize default values from NC
stAxisStruct.stControl.fAcceleration := stAxisStruct.stConfig.fDefaultAcc;
stAxisStruct.stControl.fDeceleration := stAxisStruct.stConfig.fDefaultDec;
stAxisStruct.stControl.fVelocity := stAxisStruct.stConfig.fVelocityDefaultFast;
stAxisStruct.stControl.fJogVelocity := stAxisStruct.stConfig.fVelocityDefaultSlow;


stAxisStruct.stStatus.bAxisInitialized := TRUE;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="actReadMcParameters" Id="{d4e03f47-8f47-4e3a-8328-dc15b235a081}">
      <Implementation>
        <ST><![CDATA[
(*This act reads the MC parameters using an MC_ReadParameter FB FOR each variable
Intended TO be executed once every PLC cycle
Another FB is used TO trasnfer default axis parameters TO the stAxisStruct so
bReadValid is used TO halt that trasnfer UNTIL the parameters have been
read successfully. It may take a couple OF cycles once the PLC starts up.*)

//Slow jogging Velocity
fbReadAxisVeloManSlow(Axis := stAxisStruct.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisManualVelocitySlow,
                        Value=> stAxisStruct.stConfig.fVelocityDefaultSlow);
//Fast jogging velocity
fbReadAxisVeloManFast(Axis := stAxisStruct.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisManualVelocityFast,
                        Value=> stAxisStruct.stConfig.fVelocityDefaultFast);
//Homing velocity to Cam
fbReadHomingVelToCam(Axis := stAxisStruct.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisVelocityToCam,
                        Value=> stAxisStruct.stConfig.fHomingVelToCam);
//Homing velocity from Cam
fbReadHomingVelFromCam(Axis := stAxisStruct.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisVelocityFromCam,
                        Value=> stAxisStruct.stConfig.fHomingVelFromCam);
//Max velocity
fbReadAxisVeloMax(Axis := stAxisStruct.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisMaxVelocity,
                        Value=> stAxisStruct.stConfig.fVeloMax);
//Max acceleration
fbReadAxisMaxAcc(Axis := stAxisStruct.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisMaximumAcceleration,
                        Value=> stAxisStruct.stConfig.fMaxAcc);
//Max deceleration
fbReadAxisMaxDec(Axis := stAxisStruct.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisMaximumDeceleration,
                        Value=> stAxisStruct.stConfig.fMaxDec);
//Default acceleration
fbReadAxisAcc(Axis := stAxisStruct.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisDefaultAcceleration,
                        Value=> stAxisStruct.stConfig.fDefaultAcc);
//Default deceleration
fbReadAxisDec(Axis := stAxisStruct.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisDefaultDeceleration,
                        Value=> stAxisStruct.stConfig.fDefaultDec);

//Soft limits enabled
fbReadEnMinSoftPosLimit(Axis := stAxisStruct.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.EnableLimitBackward);
stAxisStruct.stConfig.bEnMinSoftPosLimit:= LREAL_TO_BOOL(fbReadEnMinSoftPosLimit.Value);

fbReadEnMaxSoftPosLimit(Axis := stAxisStruct.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.EnableLimitForward);
stAxisStruct.stConfig.bEnMaxSoftPosLimit:= LREAL_TO_BOOL(fbReadEnMaxSoftPosLimit.Value);

//Soft limit values
fbReadMinSoftPosLimit(Axis := stAxisStruct.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.SWLimitBackward,
                        Value=>stAxisStruct.stConfig.fMinSoftPosLimit);
fbReadMaxSoftPosLimit(Axis := stAxisStruct.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.SWLimitForward,
                        Value=>stAxisStruct.stConfig.fMaxSoftPosLimit);

//Position Lag Monitoring
fbReadEnPositionLagMonitoring(Axis := stAxisStruct.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.EnablePositionLagMonitoring);
stAxisStruct.stConfig.bEnPositionLagMonitoring:= LREAL_TO_BOOL(fbReadEnPositionLagMonitoring.Value);

fbReadAxisMaxPosLagValue(Axis := stAxisStruct.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.MaxPositionLag,
                        Value=>stAxisStruct.stConfig.fMaxPosLagValue);

// Target Position Monitoring
fbReadEnTargetPositionMonitoring(Axis := stAxisStruct.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.SWLimitBackward);
stAxisStruct.stConfig.bEnTargetPositionMonitoring:= LREAL_TO_BOOL(fbReadEnTargetPositionMonitoring.Value);

fbReadTargetPositionWindow(Axis := stAxisStruct.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisTargetPositionWindow,
                        Value=> stAxisStruct.stConfig.fTargetPositionWindow);

//All variables are valid
stAxisStruct.stConfig.bReadMcParametersValid:= FALSE;
stAxisStruct.stConfig.bReadMcParametersValid:= fbReadAxisVeloManSlow.Valid AND
    fbReadAxisVeloManFast.Valid AND
    fbReadHomingVelToCam.Valid AND
    fbReadHomingVelFromCam.Valid AND
    fbReadAxisVeloMax.Valid AND
    fbReadAxisAcc.Valid AND
    fbReadAxisDec.Valid AND
    fbReadEnMinSoftPosLimit.Valid AND
    fbReadEnMaxSoftPosLimit.Valid AND
    fbReadMinSoftPosLimit.Valid AND
    fbReadMaxSoftPosLimit.Valid AND
    fbReadEnPositionLagMonitoring.Valid AND
    fbReadAxisMaxPosLagValue.Valid AND
    fbReadEnTargetPositionMonitoring.Valid AND
    fbReadTargetPositionWindow.Valid;

//One of the variables has a read error
stAxisStruct.stConfig.bReadMcParametersError:= fbReadAxisVeloManSlow.Error OR
    fbReadAxisVeloManFast.Error OR
    fbReadHomingVelToCam.Error OR
    fbReadHomingVelFromCam.Error OR
    fbReadAxisVeloMax.Error OR
    fbReadAxisAcc.Error OR
    fbReadAxisDec.Error OR
    fbReadEnMinSoftPosLimit.Error OR
    fbReadEnMaxSoftPosLimit.Error OR
    fbReadMinSoftPosLimit.Error OR
    fbReadMaxSoftPosLimit.Error OR
    fbReadEnPositionLagMonitoring.Error OR
    fbReadAxisMaxPosLagValue.Error OR
    fbReadEnTargetPositionMonitoring.Error OR
    fbReadTargetPositionWindow.Error;
]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>

