<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_Axis_V2" Id="{ade71f2f-2325-4792-8103-f7cd9c07d44a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Axis_V2 IMPLEMENTS I_Axis
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    _stAxis : REFERENCE TO ST_AxisStruct; // Local property pointer for axis structure
    
    mcStatus : ARRAY[1..mcSTATUS_ARRAY_SIZE] OF POINTER TO ST_McStatus;
    
    
    fbPower : MC_Power;
    mcStatusPower : ST_McStatus;
    
    fbStop : MC_Stop;
    mcStatusStop : ST_McStatus;
    
    fbHalt : MC_Halt;
    mcStatusHalt : ST_McStatus;
    
    fbReset : MC_Reset;
    mcStatusReset : ST_McStatus;
    
    fbMoveAbsolute: MC_MoveAbsolute;
    mcStatusMoveAbsolute : ST_McStatus;
    
    fbMoveRelative : MC_MoveRelative;   
    mcStatusMoveRelative : ST_McStatus;
    
    fbMoveVelocity : MC_MoveVelocity;
    mcStatusMoveVelocity : ST_McStatus;
    
    fbMoveModulo : MC_MoveModulo;
    mcStatusMoveModulo : ST_McStatus;    
    
    fbHome : FB_Homing;
    mcStatusHome : ST_McStatus;
    
    fbGearIn : MC_GearIn;
    mcStatusGearIn : ST_McStatus;
    stMasterAxis: ST_GearAxis := (nIndex := 1, fRatio := 0);
    nRATIO_DENOMINATOR_DEFAULT: UINT := 1;
    nNO_GEARING: UINT := 0;
    
    fbGearOut : MC_GearOut;
    mcStatusGearOut : ST_McStatus;
    nSlaveAxesIndex: UINT;
    nAxisIndex : UINT;
    
    fbGearInMultiMaster : MC_GearInMultiMaster;
    mcStatusGearInMultiMaster : ST_McStatus;
    nMultiMastersAxesIndex: UINT;
    nMULTI_MASTER_MAX_AXES: UINT := 4;
    
    bWaitForStopAfterLimitHit : BOOL := FALSE;
    fbRemovePowerTimer: TOF;
    
    //Parameter read FBs
    fbReadAxisVeloManSlow: MC_ReadParameter;
    fbReadAxisVeloManFast: MC_ReadParameter;
    fbReadHomingVelToCam: MC_ReadParameter;
    fbReadHomingVelFromCam: MC_ReadParameter;
    fbReadAxisVeloMax: MC_ReadParameter;
    fbReadAxisMaxAcc: MC_ReadParameter;
    fbReadAxisMaxDec: MC_ReadParameter;
    fbReadAxisAcc: MC_ReadParameter;
    fbReadAxisDec: MC_ReadParameter;
    fbReadEnMinSoftPosLimit: MC_ReadParameter;
    fbReadEnMaxSoftPosLimit: MC_ReadParameter;
    fbReadMinSoftPosLimit: MC_ReadParameter;
    fbReadMaxSoftPosLimit: MC_ReadParameter;
    fbReadEnPositionLagMonitoring: MC_ReadParameter;
    fbReadAxisMaxPosLagValue: MC_ReadParameter;
    fbReadEnTargetPositionMonitoring: MC_ReadParameter;
    fbReadTargetPositionWindow: MC_ReadParameter;
    
    //Edge detection triggers for statuses
    fbDoneRTrig : R_TRIG;
    fbErrorRTrig : R_TRIG;
    fbCommandAbortedRTrig : R_TRIG;
    fbExecuteRTrig : R_TRIG;
    
END_VAR
VAR CONSTANT 
    mcSTATUS_ARRAY_SIZE : UINT := 12;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Control Methods" Id="{3b682814-2204-47bf-b34b-22f553c02eb5}" />
    <Folder Name="Move Methods" Id="{8d11b711-3bcb-4652-94a2-500d372b162a}" />
    <Folder Name="Parameter Methods" Id="{f4f4664c-7df7-46e3-971d-7b879f0f84c5}" />
    <Folder Name="Status Methods" Id="{707fd0b2-cc74-45e4-8048-859a2a8b8922}" />
    <Method Name="FB_init" Id="{808671fa-47ac-4f24-b6aa-db77de23bff7}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Copy address locations for statuses to an array to allow for easier checking of statuses
mcStatus[1] := ADR(mcStatusPower);
mcStatus[2] := ADR(mcStatusStop);
mcStatus[3] := ADR(mcStatusHalt);
mcStatus[4] := ADR(mcStatusReset);
mcStatus[5] := ADR(mcStatusMoveAbsolute);
mcStatus[6] := ADR(mcStatusMoveRelative);
mcStatus[7] := ADR(mcStatusMoveVelocity);
mcStatus[8] := ADR(mcStatusMoveModulo);
mcStatus[9] := ADR(mcStatusHome);
mcStatus[10] := ADR(mcStatusGearIn);
mcStatus[11] := ADR(mcStatusGearInMultiMaster);
mcStatus[12] := ADR(mcStatusGearOut);]]></ST>
      </Implementation>
    </Method>
    <Method Name="mControl_GearIn" Id="{2e912967-ff49-4a61-986a-feb90802d147}" FolderPath="Control Methods\">
      <Declaration><![CDATA[METHOD mControl_GearIn : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _stAxis.stControl.eCommand = E_MotionFunctions.eGearIn THEN
    fbGearIn.Execute := _stAxis.stControl.bExecute;
END_IF

fbGearIn.RatioNumerator := stMasterAxis.fRatio;
fbGearIn.RatioDenominator := nRATIO_DENOMINATOR_DEFAULT;
    
IF NOT fbGearIn.InGear THEN
    stMasterAxis.nIndex := _stAxis.stConfig.stMasterAxis.nIndex;
    stMasterAxis.fRatio := _stAxis.stConfig.stMasterAxis.fRatio;
END_IF
        
//Confirm slaves have no gearing before attempting to gear in
 IF fbGearIn.InGear AND (GVL.astAxes[stMasterAxis.nIndex].stConfig.afSlaveAxisRatio[GVL.iAxis] = nNO_GEARING) AND _stAxis.stControl.eCommand = E_MotionFunctions.eGearIn THEN
    GVL.astAxes[stMasterAxis.nIndex].stConfig.afSlaveAxisRatio[GVL.iAxis] := stMasterAxis.fRatio;
END_IF

fbGearIn(Slave:= _stAxis.Axis, Master:= GVL.astAxes[stMasterAxis.nIndex].Axis);
    
mControl_GearIn.Active:= fbGearIn.Active;
mControl_GearIn.Done:= fbGearIn.InGear;
mControl_GearIn.Busy:= fbGearIn.Busy;
mControl_GearIn.Error:= fbGearIn.Error;
mControl_GearIn.ErrorID:= fbGearIn.ErrorID;
mControl_GearIn.CommandAborted:= fbGearIn.CommandAborted;
    
IF fbGearIn.Error THEN
    _stAxis.stError.nGearInErrorID := fbGearIn.ErrorID; //Set the error
END_IF    ]]></ST>
      </Implementation>
    </Method>
    <Method Name="mControl_GearInMultiMaster" Id="{84e0c1c6-290e-43dc-a4d7-42efdf8dec13}" FolderPath="Control Methods\">
      <Declaration><![CDATA[METHOD mControl_GearInMultiMaster : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbGearInMultiMaster.Options.AdvancedSlaveDynamics:= TRUE;
fbGearInMultiMaster.Options.SyncMode:= E_GearInMultiMasterSyncMode.POSSYNC2;
IF _stAxis.stControl.eCommand = E_MotionFunctions.eGearInMultiMaster THEN
    fbGearInMultiMaster.Enable := _stAxis.stControl.bExecute;
END_IF

IF _stAxis.stControl.eCommand= E_MotionFunctions.eGearInMultiMaster AND _stAxis.stControl.bExecute AND NOT _stAxis.Axis.Status.Coupled THEN
    //Latch master references
    FOR nMultiMastersAxesIndex := 1 TO nMULTI_MASTER_MAX_AXES DO
        IF _stAxis.stConfig.astMultiMasterAxis[nMultiMastersAxesIndex].nIndex > 0 AND _stAxis.stConfig.astMultiMasterAxis[nMultiMastersAxesIndex].nIndex <= GVL_APP.nAXIS_NUM THEN
            _stAxis.stConfig.astMultiMasterAxisLatched[nMultiMastersAxesIndex].nIndex := _stAxis.stConfig.astMultiMasterAxis[nMultiMastersAxesIndex].nIndex;
        END_IF
    END_FOR
    //Latch gear ratios
    FOR nMultiMastersAxesIndex := 1 TO nMULTI_MASTER_MAX_AXES DO
        _stAxis.stConfig.astMultiMasterAxisLatched[nMultiMastersAxesIndex].fRatio := _stAxis.stConfig.astMultiMasterAxis[nMultiMastersAxesIndex].fRatio;
    END_FOR        
    //Transfer gear ratios to FB
    fbGearInMultiMaster.GearRatio1 := _stAxis.stConfig.astMultiMasterAxisLatched[1].fRatio;
    fbGearInMultiMaster.GearRatio2 := _stAxis.stConfig.astMultiMasterAxisLatched[2].fRatio;
    fbGearInMultiMaster.GearRatio3 := _stAxis.stConfig.astMultiMasterAxisLatched[3].fRatio;
    fbGearInMultiMaster.GearRatio4 := _stAxis.stConfig.astMultiMasterAxisLatched[4].fRatio;
    fbGearInMultiMaster.Enable := TRUE;
END_IF

fbGearInMultiMaster(Slave := _stAxis.Axis,
    Master1 := GVL.astAxes[_stAxis.stConfig.astMultiMasterAxisLatched[1].nIndex].Axis,
    Master2 := GVL.astAxes[_stAxis.stConfig.astMultiMasterAxisLatched[2].nIndex].Axis,
    Master3 := GVL.astAxes[_stAxis.stConfig.astMultiMasterAxisLatched[3].nIndex].Axis,
    Master4 := GVL.astAxes[_stAxis.stConfig.astMultiMasterAxisLatched[4].nIndex].Axis);

IF fbGearInMultiMaster.InGear THEN
    mStatus_MultiGearing();
END_IF
    
IF fbGearInMultiMaster.Error THEN
    fbGearInMultiMaster.Enable := FALSE;
END_IF

mControl_GearInMultiMaster.Active:= fbGearInMultiMaster.Active;
mControl_GearInMultiMaster.Done:= fbGearInMultiMaster.InGear;
mControl_GearInMultiMaster.Busy:= fbGearInMultiMaster.Busy;
mControl_GearInMultiMaster.Error:= fbGearInMultiMaster.Error;
mControl_GearInMultiMaster.ErrorID:= fbGearInMultiMaster.ErrorID;
mControl_GearInMultiMaster.CommandAborted:= fbGearInMultiMaster.CommandAborted;

IF fbGearInMultiMaster.Error THEN
    _stAxis.stError.nGearInMultiMasterErrorID := fbGearInMultiMaster.ErrorID; //Set the error
END_IF    ]]></ST>
      </Implementation>
    </Method>
    <Method Name="mControl_GearOut" Id="{e17b3c6b-453e-4e45-8575-7c153f6ee550}" FolderPath="Control Methods\">
      <Declaration><![CDATA[METHOD mControl_GearOut : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _stAxis.stControl.eCommand = E_MotionFunctions.eGearOut THEN
    fbGearOut.Execute := _stAxis.stControl.bExecute;
END_IF

fbGearOut(Slave:= _stAxis.Axis);
    
    //Clear ratios from single and multi master gearing
IF fbGearOut.Done THEN
    //Clear slave ratio from master axis slave array
    mStatus_MultiGearing();
    GVL.astAxes[stMasterAxis.nIndex].stConfig.afSlaveAxisRatio[GVL.iAxis] := nNO_GEARING;
    FOR nSlaveAxesIndex := 1 TO GVL_APP.nAXIS_NUM DO
        GVL.astAxes[nSlaveAxesIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := nNO_GEARING;
    END_FOR
END_IF
    
mControl_GearOut.Done:= fbGearOut.Done;
mControl_GearOut.Busy:= fbGearOut.Busy;
mControl_GearOut.Error:= fbGearOut.Error;
mControl_GearOut.ErrorID:= fbGearOut.ErrorID;
    
IF fbGearOut.Error THEN
    _stAxis.stError.nGearOutErrorID := fbGearOut.ErrorID; //Set the error
END_IF       ]]></ST>
      </Implementation>
    </Method>
    <Method Name="mControl_Home" Id="{1c89166c-d22b-4ec1-832b-29e319ac35a4}" FolderPath="Control Methods\">
      <Declaration><![CDATA[METHOD mControl_Home : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _stAxis.stControl.eCommand = E_MotionFunctions.eHome THEN
    fbHome.bExecute := _stAxis.stControl.bExecute;
END_IF


fbHome.eHomeSeq := _stAxis.stConfig.eHomeSeq;
fbHome.fHomePosition := _stAxis.stConfig.fHomePosition;
fbHome.fHomeFinishDistance := _stAxis.stConfig.fHomeFinishDistance;
fbHome(Axis:= _stAxis.Axis, bLimitBwd:= _stAxis.stInputs.bLimitBwd, bLimitFwd:= _stAxis.stInputs.bLimitFwd, bHomeSensor:= _stAxis.stInputs.bHomeSensor);

mControl_Home.Busy := fbHome.bBusy;
mControl_Home.CommandAborted := fbHome.bCommandAborted;
mControl_Home.Done := fbHome.bDone;
mControl_Home.Error := fbHome.bError;

IF fbHome.bError THEN
    _stAxis.stError.nHomeErrorID := fbHome.nErrorID; //Set the error
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mControl_LimitHitTimer" Id="{51e73611-510a-4261-9221-982b675bdd5e}" FolderPath="Control Methods\">
      <Declaration><![CDATA[METHOD mControl_LimitHitTimer : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Timer for keeping power on after limit switch hit, needed for homing routines - if power is lost routines are aborted
fbRemovePowerTimer(IN := _stAxis.stInputs.bLimitFwd AND _stAxis.stInputs.bLimitBwd, PT := T#100MS);

//WIP need to add and change this to home method

IF mcStatusHome.Busy AND (fbRemovePowerTimer.Q OR _stAxis.Axis.NcToPlc.AxisState=5) THEN //5=PHASE_ACCNEG
    bWaitForStopAfterLimitHit := TRUE;
ELSE
    bWaitForStopAfterLimitHit := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mControl_LimitLinking" Id="{d3fbcc91-ae49-44cf-abe1-cb74f523eb68}" FolderPath="Control Methods\">
      <Declaration><![CDATA[METHOD mControl_LimitLinking : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//WIP this linking seems odd
_stAxis.stStatus.bFwEnabled := _stAxis.stInputs.bLimitFwd;    //Moved to linking code. Should not say enabled if not enabled
_stAxis.stStatus.bBwEnabled := _stAxis.stInputs.bLimitBwd;
_stAxis.stStatus.bInterlockedFwd := _stAxis.stControl.bInterlockFwd;
_stAxis.stStatus.bInterlockedBwd := _stAxis.stControl.bInterlockBwd;

//Multimaster limit linking
FOR nAxisIndex := 1 TO GVL_APP.nAXIS_NUM DO
    IF (_stAxis.stConfig.afMultiSlaveAxisRatio[nAxisIndex] <> 0) THEN
        _stAxis.stStatus.bFwEnabled := _stAxis.stStatus.bFwEnabled AND SEL(_stAxis.stConfig.afMultiSlaveAxisRatio[nAxisIndex] > 0, GVL.astAxes[nAxisIndex].stStatus.bBwEnabled, GVL.astAxes[nAxisIndex].stStatus.bFwEnabled);
        _stAxis.stStatus.bBwEnabled := _stAxis.stStatus.bBwEnabled AND SEL(_stAxis.stConfig.afMultiSlaveAxisRatio[nAxisIndex] > 0, GVL.astAxes[nAxisIndex].stStatus.bFwEnabled, GVL.astAxes[nAxisIndex].stStatus.bBwEnabled);        
    END_IF
END_FOR

//Single axis limit linking
FOR nAxisIndex :=1 TO GVL_APP.nAXIS_NUM DO
    IF (_stAxis.stConfig.afSlaveAxisRatio[nAxisIndex] <> 0) THEN
        _stAxis.stStatus.bFwEnabled := _stAxis.stStatus.bFwEnabled AND SEL(_stAxis.stConfig.afSlaveAxisRatio[nAxisIndex] > 0, GVL.astAxes[nAxisIndex].stStatus.bBwEnabled, GVL.astAxes[nAxisIndex].stStatus.bFwEnabled);
        _stAxis.stStatus.bBwEnabled := _stAxis.stStatus.bBwEnabled AND SEL(_stAxis.stConfig.afSlaveAxisRatio[nAxisIndex] > 0, GVL.astAxes[nAxisIndex].stStatus.bFwEnabled, GVL.astAxes[nAxisIndex].stStatus.bBwEnabled); 
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="mControl_Power" Id="{ec195198-7712-4dec-b0e8-f4b4550a3876}" FolderPath="Control Methods\">
      <Declaration><![CDATA[METHOD mControl_Power : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbPower.Enable:= _stAxis.stControl.bEnable;
fbPower.Enable_Negative:= (_stAxis.stStatus.bBwEnabled OR bWaitForStopAfterLimitHit) AND NOT _stAxis.stStatus.bInterlockedBwd;
fbPower.Enable_Positive:= (_stAxis.stStatus.bFwEnabled OR bWaitForStopAfterLimitHit) AND NOT _stAxis.stStatus.bInterlockedFwd;
fbPower.Override:= _stAxis.stConfig.fOverride;

fbPower(Axis:= _stAxis.Axis);

//Don't want other status bits
mControl_Power.Error := fbPower.Error;

IF fbPower.Error THEN
    _stAxis.stError.nPowerErrorID := fbPower.ErrorID; //Set the error
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mControl_Reset" Id="{bcd741a0-b2e8-4adb-8b7b-ce0d7f34f81a}" FolderPath="Control Methods\">
      <Declaration><![CDATA[METHOD mControl_Reset : ST_McStatus
VAR_INPUT
END_VAR
VAR
    i : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbReset.Execute:= _stAxis.stControl.bReset;

fbReset(Axis:= _stAxis.Axis);
IF fbReset.Done THEN
    _stAxis.stStatus.bError:= FALSE;
    FOR i:= 1 TO mcSTATUS_ARRAY_SIZE DO
        //If there's an error present propagate
        _stAxis.stStatus.nErrorID := 0;
    END_FOR
END_IF

mControl_Reset.Busy:= fbReset.Busy;
mControl_Reset.Done:= fbReset.Done;
mControl_Reset.Error:= fbReset.Error;
mControl_Reset.ErrorID:= fbReset.ErrorID;
mControl_Reset.Active:= FALSE;
mControl_Reset.CommandAborted:= FALSE;

IF fbReset.Error THEN
    _stAxis.stError.nResetErrorID := fbReset.ErrorID; //Set the error
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mMove_Halt" Id="{957bd44f-6ec5-4ad2-9776-ed5c1512fc84}" FolderPath="Move Methods\">
      <Declaration><![CDATA[METHOD mMove_Halt : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbHalt.Deceleration:= _stAxis.stControl.fDeceleration;
fbHalt.Execute:= _stAxis.stControl.bHalt;

fbHalt(Axis:= _stAxis.Axis);

mMove_Halt.Busy:= fbHalt.Busy;
mMove_Halt.Done:= fbHalt.Done;
mMove_Halt.Error:= fbHalt.Error;
mMove_Halt.ErrorID:= fbHalt.ErrorID;
mMove_Halt.Active:= fbHalt.Active;
mMove_Halt.CommandAborted:= fbHalt.CommandAborted;

IF fbHalt.Error THEN
    _stAxis.stError.nHaltErrorID := fbHalt.ErrorID; //Set the error
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mMove_MoveAbsolute" Id="{94fbfcee-90b0-443e-b823-ddd0452362cf}" FolderPath="Move Methods\">
      <Declaration><![CDATA[METHOD mMove_MoveAbsolute : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _stAxis.stControl.eCommand = E_MotionFunctions.eMoveAbsolute THEN
    fbMoveAbsolute.Execute := _stAxis.stControl.bExecute;
END_IF

fbMoveAbsolute.Position := _stAxis.stControl.fPosition;
fbMoveAbsolute.Velocity := ABS(_stAxis.stControl.fVelocity);
fbMoveAbsolute.Acceleration := _stAxis.stControl.fAcceleration;
fbMoveAbsolute.Deceleration := _stAxis.stControl.fDeceleration;

fbMoveAbsolute(Axis:= _stAxis.Axis);
    
mMove_MoveAbsolute.Active:= fbMoveAbsolute.Active;
mMove_MoveAbsolute.Done:= fbMoveAbsolute.Done;
mMove_MoveAbsolute.Busy:= fbMoveAbsolute.Busy;
mMove_MoveAbsolute.Error:= fbMoveAbsolute.Error;
mMove_MoveAbsolute.ErrorID:= fbMoveAbsolute.ErrorID;
mMove_MoveAbsolute.CommandAborted:= fbMoveAbsolute.CommandAborted;

IF fbMoveAbsolute.Error THEN
    _stAxis.stError.nMoveAbsoluteErrorID := fbMoveAbsolute.ErrorID; //Set the error
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mMove_MoveModulo" Id="{099b9ffd-2365-466c-9eb4-2775dca12695}" FolderPath="Move Methods\">
      <Declaration><![CDATA[METHOD mMove_MoveModulo : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _stAxis.stControl.eCommand = E_MotionFunctions.eMoveModulo THEN
    fbMoveModulo.Execute := _stAxis.stControl.bExecute;
END_IF

fbMoveModulo.Position := _stAxis.stControl.fPosition;
fbMoveModulo.Velocity := ABS(_stAxis.stControl.fVelocity);
fbMoveModulo.Acceleration := _stAxis.stControl.fAcceleration;
fbMoveModulo.Deceleration := _stAxis.stControl.fDeceleration;

fbMoveModulo(Axis:= _stAxis.Axis);
    
mMove_MoveModulo.Active:= fbMoveModulo.Active;
mMove_MoveModulo.Done:= fbMoveModulo.Done;
mMove_MoveModulo.Busy:= fbMoveModulo.Busy;
mMove_MoveModulo.Error:= fbMoveModulo.Error;
mMove_MoveModulo.ErrorID:= fbMoveModulo.ErrorID;
mMove_MoveModulo.CommandAborted:= fbMoveModulo.CommandAborted;
    
IF fbMoveModulo.Error THEN
    _stAxis.stError.nMoveModuloErrorID := fbMoveModulo.ErrorID; //Set the error
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mMove_MoveRelative" Id="{692be8b9-a119-45e2-bc1d-c48204cf288c}" FolderPath="Move Methods\">
      <Declaration><![CDATA[METHOD mMove_MoveRelative : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _stAxis.stControl.eCommand = E_MotionFunctions.eMoveRelative THEN
    fbMoveRelative.Execute := _stAxis.stControl.bExecute;
END_IF

fbMoveRelative.Distance := _stAxis.stControl.fPosition;
fbMoveRelative.Velocity := ABS(_stAxis.stControl.fVelocity);
fbMoveRelative.Acceleration := _stAxis.stControl.fAcceleration;
fbMoveRelative.Deceleration := _stAxis.stControl.fDeceleration;

fbMoveRelative(Axis:= _stAxis.Axis);
    
mMove_MoveRelative.Active:= fbMoveRelative.Active;
mMove_MoveRelative.Done:= fbMoveRelative.Done;
mMove_MoveRelative.Busy:= fbMoveRelative.Busy;
mMove_MoveRelative.Error:= fbMoveRelative.Error;
mMove_MoveRelative.ErrorID:= fbMoveRelative.ErrorID;
mMove_MoveRelative.CommandAborted:= fbMoveRelative.CommandAborted;

IF fbMoveRelative.Error THEN
    _stAxis.stError.nMoveRelativeErrorID := fbMoveRelative.ErrorID; //Set the error
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mMove_MoveVelocity" Id="{db34b1dc-c06f-4355-a454-8e49d2e0a70d}" FolderPath="Move Methods\">
      <Declaration><![CDATA[METHOD mMove_MoveVelocity : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _stAxis.stControl.eCommand = E_MotionFunctions.eMoveVelocity THEN
    fbMoveVelocity.Execute := _stAxis.stControl.bExecute;
END_IF
fbMoveVelocity.Direction := SEL(_stAxis.stControl.fVelocity < 0, MC_Positive_Direction, MC_Negative_Direction);
fbMoveVelocity.Velocity := ABS(_stAxis.stControl.fVelocity);
fbMoveVelocity.Acceleration := _stAxis.stControl.fAcceleration;
fbMoveVelocity.Deceleration := _stAxis.stControl.fDeceleration;

fbMoveVelocity(Axis:= _stAxis.Axis);
    
mMove_MoveVelocity.Active:= fbMoveVelocity.Active;
mMove_MoveVelocity.Done:= fbMoveVelocity.InVelocity;
mMove_MoveVelocity.Busy:= fbMoveVelocity.Busy;
mMove_MoveVelocity.Error:= fbMoveVelocity.Error;
mMove_MoveVelocity.ErrorID:= fbMoveVelocity.ErrorID;
mMove_MoveVelocity.CommandAborted:= fbMoveVelocity.CommandAborted;
    
IF fbMoveVelocity.Error THEN
    _stAxis.stError.nMoveVelocityErrorID := fbMoveVelocity.ErrorID; //Set the error
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mMove_Stop" Id="{a3229fc2-dc64-4fe5-81ae-939492dc7b8a}" FolderPath="Move Methods\">
      <Declaration><![CDATA[METHOD mMove_Stop : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbStop.Deceleration:= _stAxis.stControl.fDeceleration;
fbStop.Execute:= _stAxis.stControl.bStop;

fbStop(Axis:= _stAxis.Axis);

mMove_Stop.Busy:= fbStop.Busy;
mMove_Stop.Done:= fbStop.Done;
mMove_Stop.Error:= fbStop.Error;
mMove_Stop.ErrorID:= fbStop.ErrorID;
mMove_Stop.Active:= fbStop.Active;
mMove_Stop.CommandAborted:= fbStop.CommandAborted;

IF fbStop.Error THEN
    _stAxis.stError.nStopErrorID := fbStop.ErrorID; //Set the error
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mParameters_Init" Id="{42695961-ffd5-4b10-8cbf-a9954b08d703}" FolderPath="Parameter Methods\">
      <Declaration><![CDATA[METHOD mParameters_Init : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _stAxis.stConfig.bReadMcParametersValid AND NOT _stAxis.stStatus.bAxisInitialized THEN
    _stAxis.stControl.fAcceleration := _stAxis.stConfig.fDefaultAcc;
    _stAxis.stControl.fDeceleration := _stAxis.stConfig.fDefaultDec;
    _stAxis.stControl.fVelocity := _stAxis.stConfig.fVelocityDefaultFast;
    _stAxis.stControl.fJogVelocity := _stAxis.stConfig.fVelocityDefaultSlow;

    _stAxis.stStatus.bAxisInitialized := TRUE;
END_IF


]]></ST>
      </Implementation>
    </Method>
    <Method Name="mParameters_ReadNc" Id="{9109a49b-b1d7-4831-96dd-467dfdbafc8b}" FolderPath="Parameter Methods\">
      <Declaration><![CDATA[METHOD mParameters_ReadNc : BOOL
VAR_INPUT
END_VAR
VAR
    // Used in/for actReadMcParameters
    //bReadValid: BOOL := FALSE;
    
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*This act reads the MC parameters using an MC_ReadParameter FB FOR each variable
Intended TO be executed once every PLC cycle
Another FB is used TO trasnfer default axis parameters TO the stAxisStruct so
bReadValid is used TO halt that trasnfer UNTIL the parameters have been
read successfully. It may take a couple OF cycles once the PLC starts up.*)

//Slow jogging Velocity
fbReadAxisVeloManSlow(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisManualVelocitySlow,
                        Value=> _stAxis.stConfig.fVelocityDefaultSlow);
//Fast jogging velocity
fbReadAxisVeloManFast(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisManualVelocityFast,
                        Value=> _stAxis.stConfig.fVelocityDefaultFast);
//Homing velocity to Cam
fbReadHomingVelToCam(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisVelocityToCam,
                        Value=> _stAxis.stConfig.fHomingVelToCam);
//Homing velocity from Cam
fbReadHomingVelFromCam(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisVelocityFromCam,
                        Value=> _stAxis.stConfig.fHomingVelFromCam);
//Max velocity
fbReadAxisVeloMax(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisMaxVelocity,
                        Value=> _stAxis.stConfig.fVeloMax);
//Max acceleration
fbReadAxisMaxAcc(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisMaximumAcceleration,
                        Value=> _stAxis.stConfig.fMaxAcc);
//Max deceleration
fbReadAxisMaxDec(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisMaximumDeceleration,
                        Value=> _stAxis.stConfig.fMaxDec);
//Default acceleration
fbReadAxisAcc(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisDefaultAcceleration,
                        Value=> _stAxis.stConfig.fDefaultAcc);
//Default deceleration
fbReadAxisDec(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisDefaultDeceleration,
                        Value=> _stAxis.stConfig.fDefaultDec);

//Soft limits enabled
fbReadEnMinSoftPosLimit(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.EnableLimitBackward);
_stAxis.stConfig.bEnMinSoftPosLimit:= LREAL_TO_BOOL(fbReadEnMinSoftPosLimit.Value);

fbReadEnMaxSoftPosLimit(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.EnableLimitForward);
_stAxis.stConfig.bEnMaxSoftPosLimit:= LREAL_TO_BOOL(fbReadEnMaxSoftPosLimit.Value);

//Soft limit values
fbReadMinSoftPosLimit(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.SWLimitBackward,
                        Value=>_stAxis.stConfig.fMinSoftPosLimit);
fbReadMaxSoftPosLimit(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.SWLimitForward,
                        Value=>_stAxis.stConfig.fMaxSoftPosLimit);

//Position Lag Monitoring
fbReadEnPositionLagMonitoring(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.EnablePositionLagMonitoring);
_stAxis.stConfig.bEnPositionLagMonitoring:= LREAL_TO_BOOL(fbReadEnPositionLagMonitoring.Value);

fbReadAxisMaxPosLagValue(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.MaxPositionLag,
                        Value=>_stAxis.stConfig.fMaxPosLagValue);

// Target Position Monitoring
fbReadEnTargetPositionMonitoring(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.SWLimitBackward);
_stAxis.stConfig.bEnTargetPositionMonitoring:= LREAL_TO_BOOL(fbReadEnTargetPositionMonitoring.Value);

fbReadTargetPositionWindow(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisTargetPositionWindow,
                        Value=> _stAxis.stConfig.fTargetPositionWindow);

//All variables are valid
_stAxis.stConfig.bReadMcParametersValid:= FALSE;
_stAxis.stConfig.bReadMcParametersValid:= fbReadAxisVeloManSlow.Valid AND
    fbReadAxisVeloManFast.Valid AND
    fbReadHomingVelToCam.Valid AND
    fbReadHomingVelFromCam.Valid AND
    fbReadAxisVeloMax.Valid AND
    fbReadAxisAcc.Valid AND
    fbReadAxisDec.Valid AND
    fbReadEnMinSoftPosLimit.Valid AND
    fbReadEnMaxSoftPosLimit.Valid AND
    fbReadMinSoftPosLimit.Valid AND
    fbReadMaxSoftPosLimit.Valid AND
    fbReadEnPositionLagMonitoring.Valid AND
    fbReadAxisMaxPosLagValue.Valid AND
    fbReadEnTargetPositionMonitoring.Valid AND
    fbReadTargetPositionWindow.Valid;

//One of the variables has a read error
_stAxis.stConfig.bReadMcParametersError:= fbReadAxisVeloManSlow.Error OR
    fbReadAxisVeloManFast.Error OR
    fbReadHomingVelToCam.Error OR
    fbReadHomingVelFromCam.Error OR
    fbReadAxisVeloMax.Error OR
    fbReadAxisAcc.Error OR
    fbReadAxisDec.Error OR
    fbReadEnMinSoftPosLimit.Error OR
    fbReadEnMaxSoftPosLimit.Error OR
    fbReadMinSoftPosLimit.Error OR
    fbReadMaxSoftPosLimit.Error OR
    fbReadEnPositionLagMonitoring.Error OR
    fbReadAxisMaxPosLagValue.Error OR
    fbReadEnTargetPositionMonitoring.Error OR
    fbReadTargetPositionWindow.Error;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_AxisStatus" Id="{9429fa18-dacb-4b5a-8f14-87d9e5dbf769}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_AxisStatus : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_stAxis.Axis.ReadStatus();
IF _stAxis.Axis.Status.OpMode.Modulo THEN
    _stAxis.stStatus.fActPosition := _stAxis.Axis.NcToPlc.ModuloActPos;
ELSE
    _stAxis.stStatus.fActPosition := _stAxis.Axis.NcToPlc.ActPos;
END_IF

_stAxis.stStatus.bGeared := _stAxis.Axis.Status.Coupled;
_stAxis.stStatus.bHomed := _stAxis.Axis.Status.Homed;
_stAxis.stStatus.bMoving := _stAxis.Axis.Status.Moving; //WIP we want to change this
_stAxis.stStatus.fActVelocity := _stAxis.Axis.NcToPlc.ActVelo;
_stAxis.stStatus.bMovingForward := _stAxis.Axis.Status.PositiveDirection;
_stAxis.stStatus.bMovingBackward := _stAxis.Axis.Status.NegativeDirection;
_stAxis.stStatus.bEnabled:= NOT(_stAxis.Axis.Status.Disabled OR _stAxis.Axis.Status.ErrorStop); //WIP Might not be good to use, needs to be investigated]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_Busy" Id="{bae99503-f19d-4494-896c-e198acb33cca}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_Busy : BOOL
VAR_INPUT
END_VAR
VAR
    i : UINT;
    tmpBusy : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO mcSTATUS_ARRAY_SIZE DO
    tmpBusy:= mcStatus[i]^.Busy OR tmpBusy;
END_FOR
mStatus_Busy:= tmpBusy;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_CommandAborted" Id="{e2ed38b3-0e3f-47b0-a6af-93fb78d0742a}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_CommandAborted : BOOL
VAR_INPUT
END_VAR
VAR
    i : UINT;
    tmpCmdAborted : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO mcSTATUS_ARRAY_SIZE DO
    tmpCmdAborted:= mcStatus[i]^.CommandAborted OR tmpCmdAborted;
END_FOR
mStatus_CommandAborted:= tmpCmdAborted;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_CommandAbortedRisingEdge" Id="{47ef1edf-fdf1-4dec-ad20-cd0ec8a69b8e}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_CommandAbortedRisingEdge : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//fbDoneRTrig(CLK:= mStatus_Done());
fbCommandAbortedRTrig(CLK:= mStatus_CommandAborted());
IF fbCommandAbortedRTrig.Q THEN
    _stAxis.stStatus.bCommandAborted := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_Done" Id="{3060c82c-a96b-4ab1-b92b-f665040420fc}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_Done : BOOL
VAR_INPUT
END_VAR
VAR
    i : UINT;
    tmpDone : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO mcSTATUS_ARRAY_SIZE DO
    tmpDone:= mcStatus[i]^.Done OR tmpDone;
END_FOR
mStatus_Done:= tmpDone;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_DoneRisingEdge" Id="{cb97c724-0ad0-44f2-b46a-ccf7e150b1f3}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_DoneRisingEdge : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//fbDoneRTrig(CLK:= mStatus_Done());
fbDoneRTrig(CLK:= mStatus_Done());
IF fbDoneRTrig.Q THEN
    _stAxis.stStatus.bDone := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_Error" Id="{06ec1500-a5f4-48da-bec8-3b5342d73e7d}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_Error : BOOL
VAR_INPUT
END_VAR
VAR
    i : UINT;
    tmpError : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO mcSTATUS_ARRAY_SIZE DO
    tmpError:= mcStatus[i]^.Error OR tmpError;
END_FOR
mStatus_Error:= tmpError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_ErrorRisingEdge" Id="{fc0bde21-2989-4be1-b9e6-d0804b3b0fd9}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_ErrorRisingEdge : BOOL
VAR_INPUT
END_VAR
VAR
    i : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbErrorRTrig(CLK:= mStatus_Error());

IF _stAxis.Axis.Status.ErrorStop THEN
    _stAxis.stStatus.bError := _stAxis.Axis.Status.ErrorStop;
    _stAxis.stStatus.nErrorID := _stAxis.Axis.Status.ErrorID;//NC Error ID
ELSIF fbErrorRTrig.Q THEN
     IF NOT _stAxis.Axis.Status.ErrorStop THEN
        //For each mcStatus
        FOR i:= 1 TO mcSTATUS_ARRAY_SIZE DO
            //If there's an error present propagate
            IF mcStatus[i]^.ErrorID <> 0 THEN
                _stAxis.stStatus.nErrorID := mcStatus[i]^.ErrorID;
			END_IF
		END_FOR
	END_IF   
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_MultiGearing" Id="{fa93e914-182a-42d5-a8d7-635a159cd60b}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_MultiGearing : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _stAxis.Axis.Status.Coupled AND _stAxis.Axis.PlcToNc.GearRatio1 <> 0 AND _stAxis.stConfig.astMultiMasterAxisLatched[1].nIndex <> 0 THEN
    GVL.astAxes[_stAxis.stConfig.astMultiMasterAxisLatched[1].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := _stAxis.Axis.PlcToNc.GearRatio1;
    _stAxis.stStatus.bCoupledGear1 := TRUE;
ELSE
    _stAxis.stStatus.bCoupledGear1 := FALSE;
END_IF

IF _stAxis.Axis.Status.Coupled AND _stAxis.Axis.PlcToNc.GearRatio2 <> 0 AND _stAxis.stConfig.astMultiMasterAxisLatched[2].nIndex <> 0 THEN
    GVL.astAxes[_stAxis.stConfig.astMultiMasterAxisLatched[2].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := _stAxis.Axis.PlcToNc.GearRatio2;
    _stAxis.stStatus.bCoupledGear2 := TRUE;
ELSE
    _stAxis.stStatus.bCoupledGear2 := FALSE;
END_IF

IF _stAxis.Axis.Status.Coupled AND _stAxis.Axis.PlcToNc.GearRatio3 <> 0 AND _stAxis.stConfig.astMultiMasterAxisLatched[3].nIndex <> 0 THEN
    GVL.astAxes[_stAxis.stConfig.astMultiMasterAxisLatched[3].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := _stAxis.Axis.PlcToNc.GearRatio3;
    _stAxis.stStatus.bCoupledGear3 := TRUE;
ELSE
    _stAxis.stStatus.bCoupledGear3 := FALSE;
END_IF

IF _stAxis.Axis.Status.Coupled AND _stAxis.Axis.PlcToNc.GearRatio4 <> 0 AND _stAxis.stConfig.astMultiMasterAxisLatched[4].nIndex <> 0 THEN
    GVL.astAxes[_stAxis.stConfig.astMultiMasterAxisLatched[4].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := _stAxis.Axis.PlcToNc.GearRatio4;
    _stAxis.stStatus.bCoupledGear4 := TRUE;
ELSE
    _stAxis.stStatus.bCoupledGear4 := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_NewCommand" Id="{6ed1ba41-9399-4e86-b361-f208438f212a}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_NewCommand : BOOL
VAR_INPUT
END_VAR
VAR
    i : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbExecuteRTrig(CLK:= _stAxis.stControl.bExecute OR _stAxis.stControl.bStop OR _stAxis.stControl.bHalt);
IF fbExecuteRTrig.Q THEN
    _stAxis.stStatus.bDone:= FALSE;
    _stAxis.stStatus.bError:= FALSE;
    _stAxis.stStatus.bCommandAborted:= FALSE;
    
    //On a new command, clear the errorIDs
    FOR i:= 1 TO mcSTATUS_ARRAY_SIZE DO
        //If there's an error present propagate
        _stAxis.stStatus.nErrorID := 0;
    END_FOR
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Run" Id="{0f9d0da9-4c05-41a7-9d5e-d5541fa7ecc6}">
      <Declaration><![CDATA[METHOD Run : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[mStatus_AxisStatus();
mParameters_ReadNc();
mParameters_Init();

mControl_LimitHitTimer();
mControl_LimitLinking();
mcStatusPower := mControl_Power();

mcStatusHalt := mMove_Halt();
mcStatusStop := mMove_Stop();
mcStatusReset := mControl_Reset();

mcStatusMoveAbsolute := mMove_MoveAbsolute();
mcStatusMoveRelative := mMove_MoveRelative();
mcStatusMoveModulo := mMove_MoveModulo();
mcStatusMoveVelocity := mMove_MoveVelocity();

mcStatusGearIn := mControl_GearIn();
mcStatusGearInMultiMaster := mControl_GearInMultiMaster();
mcStatusGearOut := mControl_GearOut();

mcStatusHome := mControl_Home();

//writeParam
//readParam

mStatus_NewCommand();
mStatus_DoneRisingEdge();
mStatus_ErrorRisingEdge();
mStatus_CommandAbortedRisingEdge();
_stAxis.stStatus.bBusy := mStatus_Busy();
_stAxis.stControl.bExecute := FALSE;

]]></ST>
      </Implementation>
    </Method>
    <Property Name="stAxis" Id="{967c7c62-771d-4aab-90d5-0b2eb60c3a9a}">
      <Declaration><![CDATA[PROPERTY stAxis : REFERENCE TO ST_AxisStruct
]]></Declaration>
      <Get Name="Get" Id="{b74d1b4a-a6d4-4cc3-a467-e54c502bb2be}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[stAxis REF= _stAxis;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{1b904411-b50d-45e5-b5eb-d71a4cd732f6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_stAxis REF= stAxis;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="FB_Axis_V2">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.FB_init">
      <LineId Id="20" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="11" Count="8" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mControl_GearIn">
      <LineId Id="6" Count="3" />
      <LineId Id="22" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="24" Count="2" />
      <LineId Id="23" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="30" Count="2" />
      <LineId Id="29" Count="0" />
      <LineId Id="14" Count="7" />
      <LineId Id="5" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="38" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mControl_GearInMultiMaster">
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="52" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="17" Count="4" />
      <LineId Id="15" Count="0" />
      <LineId Id="23" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="67" Count="3" />
      <LineId Id="26" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="39" Count="4" />
      <LineId Id="38" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="58" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="44" Count="5" />
      <LineId Id="11" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="63" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mControl_GearOut">
      <LineId Id="6" Count="2" />
      <LineId Id="22" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="34" Count="3" />
      <LineId Id="31" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="3" />
      <LineId Id="47" Count="0" />
      <LineId Id="49" Count="1" />
      <LineId Id="48" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mControl_Home">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="9" Count="3" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="2" />
      <LineId Id="25" Count="2" />
      <LineId Id="24" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mControl_LimitHitTimer">
      <LineId Id="6" Count="1" />
      <LineId Id="13" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="8" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mControl_LimitLinking">
      <LineId Id="6" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="11" Count="5" />
      <LineId Id="10" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mControl_Power">
      <LineId Id="5" Count="3" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="29" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mControl_Reset">
      <LineId Id="8" Count="2" />
      <LineId Id="20" Count="1" />
      <LineId Id="36" Count="2" />
      <LineId Id="35" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="11" Count="3" />
      <LineId Id="26" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="32" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mMove_Halt">
      <LineId Id="6" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="4" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mMove_MoveAbsolute">
      <LineId Id="17" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="20" Count="4" />
      <LineId Id="16" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="25" Count="6" />
      <LineId Id="43" Count="2" />
      <LineId Id="35" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mMove_MoveModulo">
      <LineId Id="6" Count="15" />
      <LineId Id="5" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mMove_MoveRelative">
      <LineId Id="17" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="20" Count="4" />
      <LineId Id="16" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="25" Count="6" />
      <LineId Id="39" Count="0" />
      <LineId Id="44" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="38" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mMove_MoveVelocity">
      <LineId Id="17" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="21" Count="3" />
      <LineId Id="16" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="25" Count="6" />
      <LineId Id="35" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mMove_Stop">
      <LineId Id="6" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="4" />
      <LineId Id="20" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mParameters_Init">
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="4" />
      <LineId Id="16" Count="0" />
      <LineId Id="12" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mParameters_ReadNc">
      <LineId Id="6" Count="144" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_AxisStatus">
      <LineId Id="6" Count="0" />
      <LineId Id="14" Count="3" />
      <LineId Id="13" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="24" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_Busy">
      <LineId Id="11" Count="2" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_CommandAborted">
      <LineId Id="12" Count="2" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_CommandAbortedRisingEdge">
      <LineId Id="6" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_Done">
      <LineId Id="9" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_DoneRisingEdge">
      <LineId Id="6" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_Error">
      <LineId Id="15" Count="2" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_ErrorRisingEdge">
      <LineId Id="34" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="42" Count="7" />
      <LineId Id="41" Count="0" />
      <LineId Id="38" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_MultiGearing">
      <LineId Id="6" Count="25" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_NewCommand">
      <LineId Id="6" Count="4" />
      <LineId Id="14" Count="1" />
      <LineId Id="19" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.Run">
      <LineId Id="5" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="21" Count="3" />
      <LineId Id="42" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.stAxis.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.stAxis.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>