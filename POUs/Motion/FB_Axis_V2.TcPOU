<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_Axis_V2" Id="{ade71f2f-2325-4792-8103-f7cd9c07d44a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Axis_V2 IMPLEMENTS I_Axis
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    _stAxis : REFERENCE TO ST_AxisStruct; // Local property pointer for axis structure
    
    fbPower : MC_Power;
    mcStatusPower : ST_McStatus;
    
    fbStop : MC_Stop;
    mcStatusStop : ST_McStatus;
    
    fbHalt : MC_Halt;
    mcStatusHalt : ST_McStatus;
    
    fbReset : MC_Reset;
    mcStatusReset : ST_McStatus;
    
    fbMoveAbsolute: MC_MoveAbsolute;
    mcStatusMoveAbsolute : ST_McStatus;
    
    fbMoveRelative : MC_MoveRelative;   
    mcStatusMoveRelative : ST_McStatus;
    
    fbMoveVelocty : MC_MoveVelocity;
    mcStatusMoveVelocity : ST_McStatus;
    
    fbMoveModulo : MC_MoveModulo;
    mcStatusMoveModulo : ST_McStatus;    
    
    fbGearIn : MC_GearIn;
    mcStatusGearIn : ST_McStatus;
    stMasterAxis: ST_GearAxis := (nIndex := 1, fRatio := 0);
    nRATIO_DENOMINATOR_DEFAULT: UINT := 1;
    nNO_GEARING: UINT := 0;
    
    fbGearOut : MC_GearOut;
    mcStatusGearOut : ST_McStatus;
    nSlaveAxesIndex: UINT;
    
    bWaitForStopAfterLimitHit : BOOL := FALSE;
    fbRemovePowerTimer: TOF;
    
    //Parameter read FBs
    fbReadAxisVeloManSlow: MC_ReadParameter;
    fbReadAxisVeloManFast: MC_ReadParameter;
    fbReadHomingVelToCam: MC_ReadParameter;
    fbReadHomingVelFromCam: MC_ReadParameter;
    fbReadAxisVeloMax: MC_ReadParameter;
    fbReadAxisMaxAcc: MC_ReadParameter;
    fbReadAxisMaxDec: MC_ReadParameter;
    fbReadAxisAcc: MC_ReadParameter;
    fbReadAxisDec: MC_ReadParameter;
    fbReadEnMinSoftPosLimit: MC_ReadParameter;
    fbReadEnMaxSoftPosLimit: MC_ReadParameter;
    fbReadMinSoftPosLimit: MC_ReadParameter;
    fbReadMaxSoftPosLimit: MC_ReadParameter;
    fbReadEnPositionLagMonitoring: MC_ReadParameter;
    fbReadAxisMaxPosLagValue: MC_ReadParameter;
    fbReadEnTargetPositionMonitoring: MC_ReadParameter;
    fbReadTargetPositionWindow: MC_ReadParameter;
    
    //Edge detection triggers for statuses
    fbDoneRTrig : R_TRIG;
    fbErrorRTrig : R_TRIG;
    fbCommandAbortedRTrig : R_TRIG;
    fbExecuteRTrig : R_TRIG;
    
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Control Methods" Id="{3b682814-2204-47bf-b34b-22f553c02eb5}" />
    <Folder Name="Move Methods" Id="{8d11b711-3bcb-4652-94a2-500d372b162a}" />
    <Folder Name="Parameter Methods" Id="{f4f4664c-7df7-46e3-971d-7b879f0f84c5}" />
    <Folder Name="Status Methods" Id="{707fd0b2-cc74-45e4-8048-859a2a8b8922}" />
    <Method Name="mControl_GearIn" Id="{2e912967-ff49-4a61-986a-feb90802d147}" FolderPath="Control Methods\">
      <Declaration><![CDATA[METHOD mControl_GearIn : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _stAxis.stControl.eCommand = E_MotionFunctions.eGearIn THEN
    fbGearIn.Execute := _stAxis.stControl.bExecute;
END_IF

    fbGearIn.RatioNumerator := stMasterAxis.fRatio;
    fbGearIn.RatioDenominator := nRATIO_DENOMINATOR_DEFAULT;
    
    IF NOT fbGearIn.InGear THEN
        stMasterAxis.nIndex := _stAxis.stConfig.stMasterAxis.nIndex;
        stMasterAxis.fRatio := _stAxis.stConfig.stMasterAxis.fRatio;
    END_IF
        
    //Confirm slaves have no gearing before attempting to gear in
     IF fbGearIn.InGear AND (GVL.astAxes[stMasterAxis.nIndex].stConfig.afSlaveAxisRatio[GVL.iAxis] = nNO_GEARING) THEN
        GVL.astAxes[stMasterAxis.nIndex].stConfig.afSlaveAxisRatio[GVL.iAxis] := stMasterAxis.fRatio;
    END_IF

    fbGearIn(Slave:= _stAxis.Axis, Master:= GVL.astAxes[stMasterAxis.nIndex].Axis);
    
    mControl_GearIn.Active:= fbMoveAbsolute.Active;
    mControl_GearIn.Done:= fbMoveAbsolute.Done;
    mControl_GearIn.Busy:= fbMoveAbsolute.Busy;
    mControl_GearIn.Error:= fbMoveAbsolute.Error;
    mControl_GearIn.ErrorID:= fbMoveAbsolute.ErrorID;
    mControl_GearIn.CommandAborted:= fbMoveAbsolute.CommandAborted;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mControl_GearOut" Id="{e17b3c6b-453e-4e45-8575-7c153f6ee550}" FolderPath="Control Methods\">
      <Declaration><![CDATA[METHOD mControl_GearOut : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _stAxis.stControl.eCommand = E_MotionFunctions.eGearOut THEN
    fbGearOut.Execute := _stAxis.stControl.bExecute;
END_IF

    fbGearOut(Slave:= _stAxis.Axis);
    
    IF fbGearOut.Done THEN
        //Clear slave ratio from master axis slave array
        GVL.astAxes[stMasterAxis.nIndex].stConfig.afSlaveAxisRatio[GVL.iAxis] := nNO_GEARING;
        FOR nSlaveAxesIndex := 1 TO GVL_APP.nAXIS_NUM DO
            GVL.astAxes[nSlaveAxesIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := nNO_GEARING;
        END_FOR
    END_IF
    
    mControl_GearOut.Active:= fbMoveAbsolute.Active;
    mControl_GearOut.Done:= fbMoveAbsolute.Done;
    mControl_GearOut.Busy:= fbMoveAbsolute.Busy;
    mControl_GearOut.Error:= fbMoveAbsolute.Error;
    mControl_GearOut.ErrorID:= fbMoveAbsolute.ErrorID;
    mControl_GearOut.CommandAborted:= fbMoveAbsolute.CommandAborted;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mControl_LimitHitTimer" Id="{51e73611-510a-4261-9221-982b675bdd5e}" FolderPath="Control Methods\">
      <Declaration><![CDATA[METHOD mControl_LimitHitTimer : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Timer for keeping power on after limit switch hit, needed for homing routines - if power is lost routines are aborted
fbRemovePowerTimer(IN := _stAxis.stInputs.bLimitFwd AND _stAxis.stInputs.bLimitBwd, PT := T#100MS);

//WIP need to add and change this to home method
(*
IF fbHome.bBusy AND (fbRemovePowerTimer.Q OR _stAxis.Axis.NcToPlc.AxisState=5) THEN //5=PHASE_ACCNEG
    bWaitForStopAfterLimitHit := TRUE;
ELSE
    bWaitForStopAfterLimitHit := FALSE;
END_IF
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="mControl_Power" Id="{ec195198-7712-4dec-b0e8-f4b4550a3876}" FolderPath="Control Methods\">
      <Declaration><![CDATA[METHOD mControl_Power : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//WIP this linking seems odd
_stAxis.stStatus.bFwEnabled := _stAxis.stInputs.bLimitFwd;
_stAxis.stStatus.bBwEnabled := _stAxis.stInputs.bLimitBwd;
_stAxis.stStatus.bInterlockedFwd := _stAxis.stControl.bInterlockFwd;
_stAxis.stStatus.bInterlockedBwd := _stAxis.stControl.bInterlockBwd;

fbPower.Enable:= _stAxis.stControl.bEnable;
fbPower.Enable_Negative:= (_stAxis.stStatus.bBwEnabled OR bWaitForStopAfterLimitHit) AND NOT _stAxis.stStatus.bInterlockedBwd;
fbPower.Enable_Positive:= (_stAxis.stStatus.bFwEnabled OR bWaitForStopAfterLimitHit) AND NOT _stAxis.stStatus.bInterlockedFwd;
fbPower.Override:= _stAxis.stConfig.fOverride;

fbPower(Axis:= _stAxis.Axis);

_stAxis.stStatus.bEnabled:= _stAxis.Axis.Status.Operational; //WIP Might not be good to use, needs to be investigated]]></ST>
      </Implementation>
    </Method>
    <Method Name="mControl_Reset" Id="{bcd741a0-b2e8-4adb-8b7b-ce0d7f34f81a}" FolderPath="Control Methods\">
      <Declaration><![CDATA[METHOD mControl_Reset : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbReset.Execute:= _stAxis.stControl.bReset;

fbReset(Axis:= _stAxis.Axis);
IF fbReset.Done THEN
    _stAxis.stStatus.bError:= FALSE;
END_IF

mControl_Reset.Busy:= fbReset.Busy;
mControl_Reset.Done:= fbReset.Done;
mControl_Reset.Error:= fbReset.Error;
mControl_Reset.ErrorID:= fbReset.ErrorID;
mControl_Reset.Active:= FALSE;
mControl_Reset.CommandAborted:= FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mMove_Halt" Id="{957bd44f-6ec5-4ad2-9776-ed5c1512fc84}" FolderPath="Move Methods\">
      <Declaration><![CDATA[METHOD mMove_Halt : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbHalt.Deceleration:= _stAxis.stControl.fDeceleration;
fbHalt.Execute:= _stAxis.stControl.bHalt;

fbHalt(Axis:= _stAxis.Axis);

mMove_Halt.Busy:= fbHalt.Busy;
mMove_Halt.Done:= fbHalt.Done;
mMove_Halt.Error:= fbHalt.Error;
mMove_Halt.ErrorID:= fbHalt.ErrorID;
mMove_Halt.Active:= fbHalt.Active;
mMove_Halt.CommandAborted:= fbHalt.CommandAborted;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mMove_MoveAbsolute" Id="{94fbfcee-90b0-443e-b823-ddd0452362cf}" FolderPath="Move Methods\">
      <Declaration><![CDATA[METHOD mMove_MoveAbsolute : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _stAxis.stControl.eCommand = E_MotionFunctions.eMoveAbsolute THEN
    fbMoveAbsolute.Execute := _stAxis.stControl.bExecute;
END_IF

    fbMoveAbsolute.Position := _stAxis.stControl.fPosition;
    fbMoveAbsolute.Velocity := ABS(_stAxis.stControl.fVelocity);
    fbMoveAbsolute.Acceleration := _stAxis.stControl.fAcceleration;
    fbMoveAbsolute.Deceleration := _stAxis.stControl.fDeceleration;

    fbMoveAbsolute(Axis:= _stAxis.Axis);
    
    mMove_MoveAbsolute.Active:= fbMoveAbsolute.Active;
    mMove_MoveAbsolute.Done:= fbMoveAbsolute.Done;
    mMove_MoveAbsolute.Busy:= fbMoveAbsolute.Busy;
    mMove_MoveAbsolute.Error:= fbMoveAbsolute.Error;
    mMove_MoveAbsolute.ErrorID:= fbMoveAbsolute.ErrorID;
    mMove_MoveAbsolute.CommandAborted:= fbMoveAbsolute.CommandAborted;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mMove_MoveModulo" Id="{099b9ffd-2365-466c-9eb4-2775dca12695}" FolderPath="Move Methods\">
      <Declaration><![CDATA[METHOD mMove_MoveModulo : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _stAxis.stControl.eCommand = E_MotionFunctions.eMoveModulo THEN
    fbMoveModulo.Execute := _stAxis.stControl.bExecute;
END_IF

    fbMoveModulo.Position := _stAxis.stControl.fPosition;
    fbMoveModulo.Velocity := ABS(_stAxis.stControl.fVelocity);
    fbMoveModulo.Acceleration := _stAxis.stControl.fAcceleration;
    fbMoveModulo.Deceleration := _stAxis.stControl.fDeceleration;

    fbMoveModulo(Axis:= _stAxis.Axis);
    
    mMove_MoveModulo.Active:= fbMoveModulo.Active;
    mMove_MoveModulo.Done:= fbMoveModulo.Done;
    mMove_MoveModulo.Busy:= fbMoveModulo.Busy;
    mMove_MoveModulo.Error:= fbMoveModulo.Error;
    mMove_MoveModulo.ErrorID:= fbMoveModulo.ErrorID;
    mMove_MoveModulo.CommandAborted:= fbMoveModulo.CommandAborted;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mMove_MoveRelative" Id="{692be8b9-a119-45e2-bc1d-c48204cf288c}" FolderPath="Move Methods\">
      <Declaration><![CDATA[METHOD mMove_MoveRelative : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _stAxis.stControl.eCommand = E_MotionFunctions.eMoveRelative THEN
    fbMoveRelative.Execute := _stAxis.stControl.bExecute;
END_IF

    fbMoveRelative.Distance := _stAxis.stControl.fPosition;
    fbMoveRelative.Velocity := ABS(_stAxis.stControl.fVelocity);
    fbMoveRelative.Acceleration := _stAxis.stControl.fAcceleration;
    fbMoveRelative.Deceleration := _stAxis.stControl.fDeceleration;

    fbMoveRelative(Axis:= _stAxis.Axis);
    
    mMove_MoveRelative.Active:= fbMoveRelative.Active;
    mMove_MoveRelative.Done:= fbMoveRelative.Done;
    mMove_MoveRelative.Busy:= fbMoveRelative.Busy;
    mMove_MoveRelative.Error:= fbMoveRelative.Error;
    mMove_MoveRelative.ErrorID:= fbMoveRelative.ErrorID;
    mMove_MoveRelative.CommandAborted:= fbMoveRelative.CommandAborted;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mMove_MoveVelocity" Id="{db34b1dc-c06f-4355-a454-8e49d2e0a70d}" FolderPath="Move Methods\">
      <Declaration><![CDATA[METHOD mMove_MoveVelocity : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _stAxis.stControl.eCommand = E_MotionFunctions.eMoveVelocity THEN
    fbMoveVelocty.Execute := _stAxis.stControl.bExecute;
END_IF

    fbMoveVelocty.Velocity := ABS(_stAxis.stControl.fVelocity);
    fbMoveVelocty.Acceleration := _stAxis.stControl.fAcceleration;
    fbMoveVelocty.Deceleration := _stAxis.stControl.fDeceleration;

    fbMoveVelocty(Axis:= _stAxis.Axis);
    
    mMove_MoveVelocity.Active:= fbMoveVelocty.Active;
    mMove_MoveVelocity.Done:= fbMoveVelocty.InVelocity;
    mMove_MoveVelocity.Busy:= fbMoveVelocty.Busy;
    mMove_MoveVelocity.Error:= fbMoveVelocty.Error;
    mMove_MoveVelocity.ErrorID:= fbMoveVelocty.ErrorID;
    mMove_MoveVelocity.CommandAborted:= fbMoveVelocty.CommandAborted;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mMove_Stop" Id="{a3229fc2-dc64-4fe5-81ae-939492dc7b8a}" FolderPath="Move Methods\">
      <Declaration><![CDATA[METHOD mMove_Stop : ST_McStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbStop.Deceleration:= _stAxis.stControl.fDeceleration;
fbStop.Execute:= _stAxis.stControl.bStop;

fbStop(Axis:= _stAxis.Axis);

mMove_Stop.Busy:= fbStop.Busy;
mMove_Stop.Done:= fbStop.Done;
mMove_Stop.Error:= fbStop.Error;
mMove_Stop.ErrorID:= fbStop.ErrorID;
mMove_Stop.Active:= fbStop.Active;
mMove_Stop.CommandAborted:= fbStop.CommandAborted;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mParameters_Init" Id="{42695961-ffd5-4b10-8cbf-a9954b08d703}" FolderPath="Parameter Methods\">
      <Declaration><![CDATA[METHOD mParameters_Init : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _stAxis.stConfig.bReadMcParametersValid AND NOT _stAxis.stStatus.bAxisInitialized THEN
    _stAxis.stControl.fAcceleration := _stAxis.stConfig.fDefaultAcc;
    _stAxis.stControl.fDeceleration := _stAxis.stConfig.fDefaultDec;
    _stAxis.stControl.fVelocity := _stAxis.stConfig.fVelocityDefaultFast;
    _stAxis.stControl.fJogVelocity := _stAxis.stConfig.fVelocityDefaultSlow;

    _stAxis.stStatus.bAxisInitialized := TRUE;
END_IF


]]></ST>
      </Implementation>
    </Method>
    <Method Name="mParameters_ReadNc" Id="{9109a49b-b1d7-4831-96dd-467dfdbafc8b}" FolderPath="Parameter Methods\">
      <Declaration><![CDATA[METHOD mParameters_ReadNc : BOOL
VAR_INPUT
END_VAR
VAR
    // Used in/for actReadMcParameters
    //bReadValid: BOOL := FALSE;
    
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*This act reads the MC parameters using an MC_ReadParameter FB FOR each variable
Intended TO be executed once every PLC cycle
Another FB is used TO trasnfer default axis parameters TO the stAxisStruct so
bReadValid is used TO halt that trasnfer UNTIL the parameters have been
read successfully. It may take a couple OF cycles once the PLC starts up.*)

//Slow jogging Velocity
fbReadAxisVeloManSlow(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisManualVelocitySlow,
                        Value=> _stAxis.stConfig.fVelocityDefaultSlow);
//Fast jogging velocity
fbReadAxisVeloManFast(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisManualVelocityFast,
                        Value=> _stAxis.stConfig.fVelocityDefaultFast);
//Homing velocity to Cam
fbReadHomingVelToCam(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisVelocityToCam,
                        Value=> _stAxis.stConfig.fHomingVelToCam);
//Homing velocity from Cam
fbReadHomingVelFromCam(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisVelocityFromCam,
                        Value=> _stAxis.stConfig.fHomingVelFromCam);
//Max velocity
fbReadAxisVeloMax(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisMaxVelocity,
                        Value=> _stAxis.stConfig.fVeloMax);
//Max acceleration
fbReadAxisMaxAcc(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisMaximumAcceleration,
                        Value=> _stAxis.stConfig.fMaxAcc);
//Max deceleration
fbReadAxisMaxDec(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisMaximumDeceleration,
                        Value=> _stAxis.stConfig.fMaxDec);
//Default acceleration
fbReadAxisAcc(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisDefaultAcceleration,
                        Value=> _stAxis.stConfig.fDefaultAcc);
//Default deceleration
fbReadAxisDec(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisDefaultDeceleration,
                        Value=> _stAxis.stConfig.fDefaultDec);

//Soft limits enabled
fbReadEnMinSoftPosLimit(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.EnableLimitBackward);
_stAxis.stConfig.bEnMinSoftPosLimit:= LREAL_TO_BOOL(fbReadEnMinSoftPosLimit.Value);

fbReadEnMaxSoftPosLimit(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.EnableLimitForward);
_stAxis.stConfig.bEnMaxSoftPosLimit:= LREAL_TO_BOOL(fbReadEnMaxSoftPosLimit.Value);

//Soft limit values
fbReadMinSoftPosLimit(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.SWLimitBackward,
                        Value=>_stAxis.stConfig.fMinSoftPosLimit);
fbReadMaxSoftPosLimit(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.SWLimitForward,
                        Value=>_stAxis.stConfig.fMaxSoftPosLimit);

//Position Lag Monitoring
fbReadEnPositionLagMonitoring(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.EnablePositionLagMonitoring);
_stAxis.stConfig.bEnPositionLagMonitoring:= LREAL_TO_BOOL(fbReadEnPositionLagMonitoring.Value);

fbReadAxisMaxPosLagValue(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.MaxPositionLag,
                        Value=>_stAxis.stConfig.fMaxPosLagValue);

// Target Position Monitoring
fbReadEnTargetPositionMonitoring(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.SWLimitBackward);
_stAxis.stConfig.bEnTargetPositionMonitoring:= LREAL_TO_BOOL(fbReadEnTargetPositionMonitoring.Value);

fbReadTargetPositionWindow(Axis := _stAxis.Axis,
                        Enable:= TRUE,
                        ReadMode:= READMODE_CYCLIC,
                        ParameterNumber := E_AxisParameters.AxisTargetPositionWindow,
                        Value=> _stAxis.stConfig.fTargetPositionWindow);

//All variables are valid
_stAxis.stConfig.bReadMcParametersValid:= FALSE;
_stAxis.stConfig.bReadMcParametersValid:= fbReadAxisVeloManSlow.Valid AND
    fbReadAxisVeloManFast.Valid AND
    fbReadHomingVelToCam.Valid AND
    fbReadHomingVelFromCam.Valid AND
    fbReadAxisVeloMax.Valid AND
    fbReadAxisAcc.Valid AND
    fbReadAxisDec.Valid AND
    fbReadEnMinSoftPosLimit.Valid AND
    fbReadEnMaxSoftPosLimit.Valid AND
    fbReadMinSoftPosLimit.Valid AND
    fbReadMaxSoftPosLimit.Valid AND
    fbReadEnPositionLagMonitoring.Valid AND
    fbReadAxisMaxPosLagValue.Valid AND
    fbReadEnTargetPositionMonitoring.Valid AND
    fbReadTargetPositionWindow.Valid;

//One of the variables has a read error
_stAxis.stConfig.bReadMcParametersError:= fbReadAxisVeloManSlow.Error OR
    fbReadAxisVeloManFast.Error OR
    fbReadHomingVelToCam.Error OR
    fbReadHomingVelFromCam.Error OR
    fbReadAxisVeloMax.Error OR
    fbReadAxisAcc.Error OR
    fbReadAxisDec.Error OR
    fbReadEnMinSoftPosLimit.Error OR
    fbReadEnMaxSoftPosLimit.Error OR
    fbReadMinSoftPosLimit.Error OR
    fbReadMaxSoftPosLimit.Error OR
    fbReadEnPositionLagMonitoring.Error OR
    fbReadAxisMaxPosLagValue.Error OR
    fbReadEnTargetPositionMonitoring.Error OR
    fbReadTargetPositionWindow.Error;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_AxisStatus" Id="{9429fa18-dacb-4b5a-8f14-87d9e5dbf769}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_AxisStatus : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_stAxis.Axis.ReadStatus();
IF _stAxis.Axis.Status.OpMode.Modulo THEN
    _stAxis.stStatus.fActPosition := _stAxis.Axis.NcToPlc.ModuloActPos;
ELSE
    _stAxis.stStatus.fActPosition := _stAxis.Axis.NcToPlc.ActPos;
END_IF

_stAxis.stStatus.bGeared := _stAxis.Axis.Status.Coupled;
_stAxis.stStatus.bHomed := _stAxis.Axis.Status.Homed;
_stAxis.stStatus.bMoving := _stAxis.Axis.Status.Moving; //WIP we want to change this
_stAxis.stStatus.fActVelocity := _stAxis.Axis.NcToPlc.ActVelo;
_stAxis.stStatus.bMovingForward := _stAxis.Axis.Status.PositiveDirection;
_stAxis.stStatus.bMovingBackward := _stAxis.Axis.Status.NegativeDirection;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_Busy" Id="{bae99503-f19d-4494-896c-e198acb33cca}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_Busy : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mStatus_Busy:= mcStatusHalt.Busy OR mcStatusStop.Busy OR mcStatusReset.Busy OR mcStatusPower.Busy OR mcStatusMoveAbsolute.Busy OR mcStatusMoveRelative.Busy OR mcStatusMoveVelocity.Busy OR mcStatusMoveModulo.Busy OR mcStatusGearIn.Busy OR mcStatusGearOut.Busy;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_CommandAborted" Id="{e2ed38b3-0e3f-47b0-a6af-93fb78d0742a}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_CommandAborted : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mStatus_CommandAborted:= mcStatusHalt.CommandAborted OR mcStatusStop.CommandAborted OR mcStatusReset.CommandAborted OR mcStatusPower.CommandAborted OR mcStatusMoveAbsolute.CommandAborted OR mcStatusMoveRelative.CommandAborted OR mcStatusMoveVelocity.CommandAborted OR mcStatusMoveModulo.CommandAborted OR mcStatusGearIn.CommandAborted OR mcStatusGearOut.CommandAborted;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_CommandAbortedRisingEdge" Id="{47ef1edf-fdf1-4dec-ad20-cd0ec8a69b8e}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_CommandAbortedRisingEdge : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//fbDoneRTrig(CLK:= mStatus_Done());
fbCommandAbortedRTrig(CLK:= mStatus_CommandAborted());
IF fbCommandAbortedRTrig.Q THEN
    _stAxis.stStatus.bCommandAborted := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_Done" Id="{3060c82c-a96b-4ab1-b92b-f665040420fc}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_Done : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mStatus_Done:= mcStatusHalt.Done OR mcStatusStop.Done OR mcStatusReset.Done OR mcStatusPower.Done OR mcStatusMoveAbsolute.Done OR mcStatusMoveRelative.Done OR mcStatusMoveVelocity.Done OR mcStatusMoveModulo.Done OR mcStatusGearIn.Done OR mcStatusGearOut.Done;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_DoneRisingEdge" Id="{cb97c724-0ad0-44f2-b46a-ccf7e150b1f3}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_DoneRisingEdge : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//fbDoneRTrig(CLK:= mStatus_Done());
fbDoneRTrig(CLK:= mStatus_Done());
IF fbDoneRTrig.Q THEN
    _stAxis.stStatus.bDone := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_Error" Id="{06ec1500-a5f4-48da-bec8-3b5342d73e7d}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_Error : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//WIP not handling error IDs at the moment. Will need to modify this to pass data to the error struct too
mStatus_Error:= mcStatusHalt.Error OR mcStatusStop.Error OR mcStatusReset.Error OR mcStatusPower.Error OR mcStatusMoveAbsolute.Error OR mcStatusMoveRelative.Error OR mcStatusMoveVelocity.Error OR mcStatusMoveModulo.Error OR mcStatusGearIn.Error OR mcStatusGearOut.Error;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_ErrorRisingEdge" Id="{fc0bde21-2989-4be1-b9e6-d0804b3b0fd9}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_ErrorRisingEdge : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbErrorRTrig(CLK:= mStatus_Error());
IF fbErrorRTrig.Q THEN
    _stAxis.stStatus.bError := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStatus_NewCommand" Id="{6ed1ba41-9399-4e86-b361-f208438f212a}" FolderPath="Status Methods\">
      <Declaration><![CDATA[METHOD mStatus_NewCommand : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbExecuteRTrig(CLK:= _stAxis.stControl.bExecute OR _stAxis.stControl.bStop OR _stAxis.stControl.bHalt);
IF fbExecuteRTrig.Q THEN
    _stAxis.stStatus.bDone:= FALSE;
    _stAxis.stStatus.bError:= FALSE;
    _stAxis.stStatus.bCommandAborted:= FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Run" Id="{0f9d0da9-4c05-41a7-9d5e-d5541fa7ecc6}">
      <Declaration><![CDATA[METHOD Run : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[mStatus_AxisStatus();
mParameters_ReadNc();
mParameters_Init();

mControl_LimitHitTimer();
mControl_Power();

mcStatusHalt := mMove_Halt();
mcStatusStop := mMove_Stop();
mcStatusReset := mControl_Reset();

mcStatusMoveAbsolute := mMove_MoveAbsolute();
mcStatusMoveRelative := mMove_MoveRelative();
mcStatusMoveModulo := mMove_MoveModulo();
mcStatusMoveVelocity := mMove_MoveVelocity();

mcStatusGearIn := mControl_GearIn();
mcStatusGearOut := mControl_GearOut();

//Limit linking
(*
FOR nAxisIndex := 1 TO GVL_APP.nAXIS_NUM DO
    IF (stAxisStruct.stConfig.afMultiSlaveAxisRatio[nAxisIndex] <> 0) THEN
        stAxisStruct.stStatus.bFwEnabled := stAxisStruct.stStatus.bFwEnabled AND SEL(stAxisStruct.stConfig.afMultiSlaveAxisRatio[nAxisIndex] > 0, GVL.astAxes[nAxisIndex].stStatus.bBwEnabled, GVL.astAxes[nAxisIndex].stStatus.bFwEnabled);
        stAxisStruct.stStatus.bBwEnabled := stAxisStruct.stStatus.bBwEnabled AND SEL(stAxisStruct.stConfig.afMultiSlaveAxisRatio[nAxisIndex] > 0, GVL.astAxes[nAxisIndex].stStatus.bFwEnabled, GVL.astAxes[nAxisIndex].stStatus.bBwEnabled);
    END_IF
END_FOR
*)

(*Additional multimaster logic

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio1 <> 0 AND stAxisStruct.stConfig.astMultiMasterAxisLatched[1].nIndex <> 0 THEN
    GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[1].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio1;
    stAxisStruct.stStatus.bCoupledGear1 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear1 := FALSE;
END_IF

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio2 <> 0 AND stAxisStruct.stConfig.astMultiMasterAxisLatched[2].nIndex <> 0 THEN
    GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[2].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio2;
    stAxisStruct.stStatus.bCoupledGear2 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear2 := FALSE;
END_IF

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio3 <> 0 AND stAxisStruct.stConfig.astMultiMasterAxisLatched[3].nIndex <> 0 THEN
    GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[3].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio3;
    stAxisStruct.stStatus.bCoupledGear3 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear3 := FALSE;
END_IF

IF stAxisStruct.Axis.Status.Coupled AND stAxisStruct.Axis.PlcToNc.GearRatio4 <> 0 AND stAxisStruct.stConfig.astMultiMasterAxisLatched[4].nIndex <> 0 THEN
    GVL.astAxes[stAxisStruct.stConfig.astMultiMasterAxisLatched[4].nIndex].stConfig.afMultiSlaveAxisRatio[GVL.iAxis] := stAxisStruct.Axis.PlcToNc.GearRatio4;
    stAxisStruct.stStatus.bCoupledGear4 := TRUE;
ELSE
    stAxisStruct.stStatus.bCoupledGear4 := FALSE;
END_IF
*)
//gearInMultiMaster
//home
//writeParam
//readParam

mStatus_NewCommand();
mStatus_DoneRisingEdge();
mStatus_ErrorRisingEdge();
mStatus_CommandAbortedRisingEdge();

_stAxis.stStatus.bBusy := mStatus_Busy();

//AxisStatuses = position/homed/velocity/etc

_stAxis.stControl.bExecute := FALSE;

]]></ST>
      </Implementation>
    </Method>
    <Property Name="stAxis" Id="{967c7c62-771d-4aab-90d5-0b2eb60c3a9a}">
      <Declaration><![CDATA[PROPERTY stAxis : REFERENCE TO ST_AxisStruct
]]></Declaration>
      <Get Name="Get" Id="{b74d1b4a-a6d4-4cc3-a467-e54c502bb2be}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[stAxis REF= _stAxis;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{1b904411-b50d-45e5-b5eb-d71a4cd732f6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_stAxis REF= stAxis;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="FB_Axis_V2">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mControl_GearIn">
      <LineId Id="6" Count="3" />
      <LineId Id="22" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="24" Count="2" />
      <LineId Id="23" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="30" Count="2" />
      <LineId Id="29" Count="0" />
      <LineId Id="14" Count="7" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mControl_GearOut">
      <LineId Id="6" Count="2" />
      <LineId Id="22" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="5" />
      <LineId Id="31" Count="0" />
      <LineId Id="24" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mControl_LimitHitTimer">
      <LineId Id="6" Count="1" />
      <LineId Id="13" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="8" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mControl_Power">
      <LineId Id="18" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="13" Count="1" />
      <LineId Id="5" Count="3" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mControl_Reset">
      <LineId Id="8" Count="2" />
      <LineId Id="20" Count="2" />
      <LineId Id="11" Count="3" />
      <LineId Id="26" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mMove_Halt">
      <LineId Id="6" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="4" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mMove_MoveAbsolute">
      <LineId Id="17" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="20" Count="4" />
      <LineId Id="16" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="25" Count="6" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mMove_MoveModulo">
      <LineId Id="6" Count="15" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mMove_MoveRelative">
      <LineId Id="17" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="20" Count="4" />
      <LineId Id="16" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="25" Count="6" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mMove_MoveVelocity">
      <LineId Id="17" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="21" Count="3" />
      <LineId Id="16" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="25" Count="6" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mMove_Stop">
      <LineId Id="6" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="4" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mParameters_Init">
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="4" />
      <LineId Id="16" Count="0" />
      <LineId Id="12" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mParameters_ReadNc">
      <LineId Id="6" Count="144" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_AxisStatus">
      <LineId Id="6" Count="0" />
      <LineId Id="14" Count="3" />
      <LineId Id="13" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="7" Count="1" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_Busy">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_CommandAborted">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_CommandAbortedRisingEdge">
      <LineId Id="6" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_Done">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_DoneRisingEdge">
      <LineId Id="6" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_Error">
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_ErrorRisingEdge">
      <LineId Id="6" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.mStatus_NewCommand">
      <LineId Id="6" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.Run">
      <LineId Id="5" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="73" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="76" Count="4" />
      <LineId Id="75" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="86" Count="26" />
      <LineId Id="85" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="21" Count="3" />
      <LineId Id="42" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.stAxis.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Axis_V2.stAxis.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>