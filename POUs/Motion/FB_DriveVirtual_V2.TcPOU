<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.17">
  <POU Name="FB_DriveVirtual_V2" Id="{48aa4337-87de-4625-92cb-9b0e0f05c227}" SpecialFunc="None">
    <Declaration><![CDATA[///#########################################################
///Function block to run a virtual drive with Nc
///	Library:		
///	Tc2_MC2.lib
///
///	Global Variables:
///	
///	Data types:
///	
///	External functions:
///
///###########################################################
FUNCTION_BLOCK FB_DriveVirtual_V2
VAR
	sVersion: STRING:='1.0.3';	
	
END_VAR

VAR_INPUT
	En: BOOL;
END_VAR

VAR_OUTPUT
	EnO: BOOL;
END_VAR
VAR_IN_OUT
	stAxisStruct: ST_AxisStruct;	
	//Axis: AXIS_REF;
END_VAR
VAR	
	InfoData_State AT %I*: UINT;
	//nCommandLocal: UINT;
	//nCmdDataLocal: UINT;
	bFirstScan: BOOL := TRUE;
	bResetDone: BOOL;
	bEnable: BOOL;
	bReset: BOOL;
	bExecute: BOOL;
	bStop: BOOL;
	fVelocity: LREAL;
	fPosition: LREAL;
	fAcceleration: LREAL;
	//fDeceleration: LREAL;
	//bHome: BOOL;
	//bMoveAbs: BOOL;
	bJogFwd: BOOL;
	bJogBwd: BOOL;
	bLimitFwd: BOOL;
	bLimitBwd: BOOL;	
	fOverride: LREAL := 100;
	bHomeSensor: BOOL;
	fbReset: MC_Reset;
	fbPower: MC_Power;
	fbHalt: MC_Halt;
	fbStop: MC_Stop;
	fbJog: MC_Jog;
	//	fbMoveVelocity: MC_MoveVelocity;
//	fbMoveRelative: MC_MoveRelative;
	fbMoveAbsolute: MC_MoveAbsolute;
//	fbMoveModulo: MC_MoveModulo;	
//	fbHomeVirtual:FB_HomeVirtual;
//	fbGearInDyn: MC_GearInDyn;
//	fbGearOut: MC_GearOut;
	fbExecuteRiseEdge: R_TRIG;
	fbFTrig_Reset  			: F_TRIG;
	eCommState				: CommStates;
	
	bEnabled: BOOL;
	bIdle:	BOOL;	
	bBusy: BOOL;
	bDone: BOOL;
	bError: BOOL;
	bHomed: BOOL;
	nErrorId: UDINT;
	//nMotionAxisID:UDINT:=0;  //Axis id in Motion (NC)
	
	//Status: ST_AxisStatus;
	fActVelocity: LREAL;
	fActPosition: LREAL;
	//fActDiff: LREAL;
    //sErrorMessage:STRING;
	
///////HOMING vars and FB's////////
	//fbDirectHome: MC_Home; //direct homing only
	fbHome: FB_HomingSeq;
	
	
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[EnO:=En;

//NC_LinkAxis
IF En AND InfoData_State<>16#8 THEN
	bError:=TRUE;
ELSE
	bError:=FALSE;
END_IF

IF En THEN
	stAxisStruct.Axis.ReadStatus();
	//Status:=stAxisStruct.Axis.Status;
END_IF


// Transfer nCommand and nCmdData to local copies at rising edge of bExecute (avoid issues if nCommand or nCmdData are changed during a command) 
fbExecuteRiseEdge(CLK:=stAxisStruct.bStart);
(*IF fbExecuteRiseEdge.Q THEN
  nCmdDataLocal:=nCmdData;
  nCommandLocal:=nCommand;
END_IF*)

//bHomed:=fbHomeVirtual.bHomed; //Add in DUT_AxisStatus later
bDone:=FALSE;

(*Reset*)
fbReset(
	Execute:=stAxisStruct.bReset AND stAxisStruct.Axis.Status.Error,
	Axis:=stAxisStruct.Axis,
	Done=> stAxisStruct.bResetDone,
	Busy=> ,
	Error=> ,
	ErrorID=> );

(*Power*)
fbPower(
	Axis:=stAxisStruct.Axis,
	Enable:=stAxisStruct.bEnable,	
	Enable_Positive:=stAxisStruct.bEnable AND stAxisStruct.bLimitFwd,	
	Enable_Negative:=stAxisStruct.bEnable AND stAxisStruct.bLimitBwd,	
	Override:=stAxisStruct.fOverride,
	BufferMode:= ,
	Status=> stAxisStruct.bEnabled,
	Busy=> ,
	Active=> ,
	Error=> ,
	ErrorID=> );

(*Stop*)
fbStop(
				Axis:= stAxisStruct.Axis, 
				Execute:= stAxisStruct.bStop, 
				Deceleration:= stAxisStruct.fAcceleration , 
				Jerk:= 0, 
				Options:= , 
				Done=> , 
				Busy=> , 
				Active=> , 
				CommandAborted=> , 
				Error=> , 
				ErrorID=> );

			
(*Jog (Command = 0)*)
fbJog(
	JogForward:=stAxisStruct.bJogFwd AND NOT stAxisStruct.bStart ,
	JogBackwards:=stAxisStruct.bJogBwd AND NOT stAxisStruct.bStart ,
	Mode:=0,
	Position:= ,
	Velocity:=stAxisStruct.fVelocity,
	Acceleration:=stAxisStruct.fAcceleration,
	Deceleration:=stAxisStruct.fAcceleration,
	Jerk:=0,
	Axis:=stAxisStruct.Axis,
	Done=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );

(*MoveAbsolute (Command = 3)*)
fbMoveAbsolute(
	Execute:=stAxisStruct.bStart,
	Position:=stAxisStruct.fPosition,
	Velocity:=ABS(stAxisStruct.fVelocity),
	Acceleration:=stAxisStruct.fAcceleration,
	Deceleration:=stAxisStruct.fAcceleration,
	Jerk:=0,
	BufferMode:= ,
	Options:= ,
	Axis:=stAxisStruct.Axis,
	Done=> stAxisStruct.bDone,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );
	
	
///////HOMING//////
fbHome(
	En:= TRUE, 
	bHome:= stAxisStruct.bHome, 
	bReset:= stAxisStruct.bReset, 
	nHomeProc:= stAxisStruct.nHomeSeq, 
	bLimitBwd:= stAxisStruct.bLimitBwd, 
	bLimitFwd:= stAxisStruct.bLimitFwd, 
	bHomeSensor:= stAxisStruct.bHomeSensor, 
	fHomePosition:= 0, 
	Axis:= stAxisStruct.Axis, 
	EnO=> , 
	bHomed=> , 
	bError=> stAxisStruct.bError, 
	nErrorId=> stAxisStruct.nErrorID);

(*fbDirectHome(
	Axis:= stAxisStruct.Axis, 
	Execute:= stAxisStruct.bHome, 
	Position:= 0, 
	HomingMode:= MC_Direct, 
	BufferMode:= , 
	Options:= , 
	bCalibrationCam:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );*)
stAxisStruct.bHomed:=stAxisStruct.Axis.Status.Homed;


(*Busy*)
stAxisStruct.bBusy:=stAxisStruct.Axis.Status.HasJob;

(*Enabled*) //Done directly in the FB
//stAxisStruct.bEnabled:=fbPower.Status;

(*Error from functions and Nc*)
IF fbPower.Error AND fbPower.Active THEN
	bError:=fbPower.Enable;
	nErrorId:=fbPower.ErrorID;
//ELSIF fbHalt.Error AND fbHalt.Active THEN
//	bError:=fbHalt.Execute;
//	nErrorId:=fbHalt.ErrorID;
ELSIF fbJog.Error (*AND nCommandLocal=0 (*fbJog.Active*)*) THEN
	bError:=fbJog.JogForward OR fbJog.JogBackwards;
	nErrorId:=fbJog.ErrorID;
(*ELSIF fbMoveVelocity.Error AND nCommandLocal=1(*fbMoveVelocity.Active*) THEN
	bError:=fbMoveVelocity.Execute;
	nErrorId:=fbMoveVelocity.ErrorID;
ELSIF fbMoveRelative.Error AND nCommandLocal=2 (*fbMoveRelative.Active*) THEN
	bError:=fbMoveRelative.Execute;
	nErrorId:=fbMoveRelative.ErrorID;*)
ELSIF fbMoveAbsolute.Error (*AND nCommandLocal=3 (*fbMoveAbsolute.Active*)*) THEN
	bError:=fbMoveAbsolute.Execute;
	nErrorId:=fbMoveAbsolute.ErrorID;
(*ELSIF fbMoveModulo.Error AND nCommandLocal=4 (*fbMoveModulo.Active*) THEN
	bError:=fbMoveModulo.Execute;
	nErrorId:=fbMoveModulo.ErrorID;
ELSIF fbHomeVirtual.bError AND nCommandLocal=10 (*fbHome.Active*) THEN
	bError:=fbHomeVirtual.bError;
	nErrorId:=fbHomeVirtual.nErrorID;
ELSIF fbGearInDyn.Error AND nCommandLocal=30 (*fbGearInDyn.Active*) THEN
	bError:=fbGearInDyn.Enable;
	nErrorId:=fbGearInDyn.ErrorID;
ELSIF fbGearOut.Error AND nCommandLocal=30 AND Axis.Status.Coupled THEN
	bError:=fbGearOut.Execute;
	nErrorId:=fbGearOut.ErrorID;*)
ELSIF stAxisStruct.Axis.Status.Error  THEN
	stAxisStruct.bError:=TRUE;
	stAxisStruct.nErrorId:=stAxisStruct.Axis.Status.ErrorID;
//ELSIF fbHomeVirtual.bError THEN
//	bError:=TRUE;
//	nErrorId:=fbHomeVirtual.nErrorId;
ELSE
	stAxisStruct.bError:=FALSE;
	stAxisStruct.nErrorId:=0;
END_IF;

(*Converese nErrorID to string*)
//sErrorMessage:=WORD_TO_HEXSTR(in:=TO_WORD(nErrorID) , iPrecision:= 4, bLoCase:=0 );

(*Status from Nc*)
//Status:=stAxisStruct.Axis.Status;

(*Axis id in motion "motor"*)
//nMotionAxisID:=axis.NcToPlc.AxisId;

(*Actual Velocity*)
stAxisStruct.fActVelocity:=stAxisStruct.Axis.NcToPlc.ActVelo;

(*Actual Position*)
IF stAxisStruct.Axis.Status.OpMode.Modulo THEN
	stAxisStruct.fActPosition:=stAxisStruct.Axis.NcToPlc.ModuloActPos;
ELSE
	stAxisStruct.fActPosition:=stAxisStruct.Axis.NcToPlc.ActPos;
END_IF

IF bFirstScan THEN
	bFirstScan:=FALSE;
END_IF
(*Actual Position*)
//fActDiff:=Axis.NcToPlc.PosDiff;


(*//Status struct for EPICS communication
bEnable:=stAxisStruct.bEnable;
stAxisStruct.bEnabled:=bEnabled;
stAxisStruct.bError:=bError;
bExecute:=stAxisStruct.bStart;
//stAxisStatus.bHomeSensor:=bHomeSensor;
bJogBwd:=stAxisStruct.bJogBwd;
bJogFwd:=stAxisStruct.bJogFwd;
bLimitBwd:=stAxisStruct.bLimitBwd;
bLimitFwd:=stAxisStruct.bLimitFwd;
stAxisStruct.bReset:=bReset;
stAxisStruct.fAcceleration:=fAcceleration;
//stAxisStatus.fActDiff:=fActDiff;
stAxisStruct.fActPosition:=fActPosition;
stAxisStruct.fActVelocity:=fActVelocity;
//stAxisStatus.fDeceleration:=fDeceleration;
//stAxisStatus.fOverride:=fOverride;
stAxisStruct.fPosition:=fPosition;
stAxisStruct.fVelocity:=fVelocity;
//stAxisStatus.nCmdData:=nCmdData;  //Or nCmdDataLocal
//stAxisStatus.nCommand:=nCommand;  //Or nCommandLocal
stAxisStruct.nErrorId:=nErrorId;
stAxisStruct.bBusy:=bBusy;
stAxisStruct.bHomed:=bHomed;
stAxisStruct.fOverride:=fOverride;*)



(*(*Halt*)
fbHalt(
	Execute:=NOT bExecute  AND (((fbMoveVelocity.Busy OR fbPower.Busy) AND (nCommandLocal=1)) OR (fbMoveRelative.Busy AND (nCommandLocal=2)) OR (fbMoveAbsolute.Busy AND (nCommandLocal=3)) OR (fbMoveModulo.Busy AND (nCommandLocal=4)) OR (fbHomeVirtual.bBusy AND (nCommandLocal=10))),
	Deceleration:=fDeceleration,
	Jerk:=0,
	BufferMode:= ,
	Options:= ,
	Axis:=Axis ,
	Done=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );
	*)

(*(*MoveVelocity (Command = 1)*)
fbMoveVelocity(
	Execute:=bExecute AND (nCommandLocal=1),
	Velocity:=ABS(fVelocity),
	Acceleration:=fAcceleration,
	Deceleration:=fDeceleration,
	Jerk:=0,
	Direction:=SEL(fVelocity<0, MC_Positive_Direction, MC_Negative_Direction),
	BufferMode:= ,
	Options:= ,
	Axis:=Axis,
	InVelocity=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );

(*MoveRelative (Command = 2)*)
fbMoveRelative(
	Execute:=bExecute AND (nCommandLocal=2), 
	Distance:=fPosition, 
	Velocity:=ABS(fVelocity), 
	Acceleration:=fAcceleration,
	Deceleration:=fDeceleration,
	Jerk:=0,
	BufferMode:= , 
	Options:= , 
	Axis:=Axis, 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
IF nCommandLocal=2 THEN
	bDone:=fbMoveRelative.Done;
END_IF*)

(*(*MoveModulo (Command = 4)*)
fbMoveModulo(
	Execute:=bExecute AND (nCommandLocal=4), 
	Position:=fPosition, 
	Velocity:=ABS(fVelocity), 
	Acceleration:=fAcceleration, 
	Deceleration:=fDeceleration, 
	Jerk:=0, 
	Direction:=nCmdDataLocal, 
	BufferMode:= , 
	Options:= , 
	Axis:=Axis, 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );

IF nCommandLocal=4 THEN
	bDone:=fbMoveModulo.Done;
END_IF
	
(*Home (Command = 10)*)
fbHomeVirtual(	
	bExecute:= nCommandLocal=10 AND bExecute,
	fHomePosition:=fHomePosition,
	bHomeSensor:=bHomeSensor,
	bLimitBwd:=bLimitBwd,
	bLimitFwd:=bLimitFwd,
	nCmdData:=nCmdDataLocal,
	bReset:=bReset,
	nHomeRevOffset:=nHomeRevOffset,
	Axis:=Axis
	);
	
IF nCommandLocal=10 THEN
	bDone:=fbHomeVirtual.bDone;
END_IF
	
(*Gear (Command = 30)*)
fbGearInDyn(
	Enable:=bExecute  AND (nCommandLocal=30),
	GearRatio:=SEL(nCmdDataLocal>0, 1,fVelocity),
	Acceleration:=fAcceleration,
	Deceleration:=fDeceleration,
	Jerk:=0.0,
	BufferMode:= , 
	Options:= , 
	Master:=MasterAxis,
	Slave:=Axis,
	InGear=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
fbGearOut(
	Execute:=NOT bExecute AND Axis.Status.NotMoving AND (nCommandLocal=30),
	Slave:=Axis,
	Error=>,
	Done=>,
	ErrorID=>);


IF nCommandLocal=30 THEN
	bDone:=Axis.Status.Coupled;
END_IF
*)
]]></ST>
    </Implementation>
    <LineIds Name="FB_DriveVirtual_V2">
      <LineId Id="1608" Count="0" />
      <LineId Id="1907" Count="11" />
      <LineId Id="1906" Count="0" />
      <LineId Id="1609" Count="33" />
      <LineId Id="1921" Count="0" />
      <LineId Id="1923" Count="10" />
      <LineId Id="1922" Count="0" />
      <LineId Id="2092" Count="0" />
      <LineId Id="1657" Count="18" />
      <LineId Id="1716" Count="16" />
      <LineId Id="2245" Count="1" />
      <LineId Id="1733" Count="0" />
      <LineId Id="2279" Count="12" />
      <LineId Id="2265" Count="0" />
      <LineId Id="2260" Count="0" />
      <LineId Id="2136" Count="12" />
      <LineId Id="1736" Count="0" />
      <LineId Id="2230" Count="1" />
      <LineId Id="1935" Count="66" />
      <LineId Id="2132" Count="2" />
      <LineId Id="2002" Count="28" />
      <LineId Id="2131" Count="0" />
      <LineId Id="2031" Count="0" />
      <LineId Id="1934" Count="0" />
      <LineId Id="2074" Count="0" />
      <LineId Id="2076" Count="13" />
      <LineId Id="2075" Count="0" />
      <LineId Id="2034" Count="0" />
      <LineId Id="2036" Count="37" />
      <LineId Id="2035" Count="0" />
      <LineId Id="1737" Count="70" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>