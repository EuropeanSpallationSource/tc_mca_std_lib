<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_Homing2" Id="{e8b732be-06ce-4dd5-944d-e7ad6eae8e67}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Homing2
VAR_INPUT
	bExecute: BOOL;
	bReset: BOOL;
	bStop: BOOL;
	nHomeProc: UINT;
	bLimitBwd: BOOL;
	bLimitFwd: BOOL;
	bEncLatch: BOOL;
	bHomeSensor: BOOL;
	fHomePosition: LREAL;
END_VAR
VAR_IN_OUT
	Axis: AXIS_REF;
END_VAR
VAR_OUTPUT
	bHomed:BOOL;
	bError: BOOL;
	nErrorId: UDINT;
END_VAR
VAR
	bHomingInProgress: BOOL;
	bReadNCVelocities: BOOL;
	nHomeProcLocal: UINT := 0;
    nHomingState: INT := 0;
	fbExecuteRiseEdge: R_TRIG;
	fbHomingParameter: MC_HomingParameter;
	fbRef_Signal_Ref1: MC_Ref_Signal_Ref;
	fbRef_Signal_Ref2: MC_Ref_Signal_Ref;
	
	fbStepLimitSwitch: MC_StepLimitSwitch;
	fbStepLimitSwitchDetection: MC_StepLimitSwitchDetection;
	fbStepAbsoluteSwitch: MC_StepAbsoluteSwitch;
	fbStepReferencePulse: MC_StepReferencePulse;
	fbHomeDirect: MC_HomeDirect;
	fbAbortHoming: MC_AbortHoming;
	fbFinishHoming: MC_FinishHoming;
	StOptions2: ST_Home_Options2;
	StOptions4: ST_Home_Options4;
	
	fbHomeReadNCVelocities: FB_HomeReadNCVelocities;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bReset THEN	
	bError:=FALSE;
	nErrorId:=0;
	nHomingState:=0;
END_IF

IF bStop THEN
	fbAbortHoming.Execute:=TRUE;
	bHomingInProgress:=FALSE;
	nHomingState:=0;
END_IF


//Reset at rising edge of bExecute
fbExecuteRiseEdge(CLK:=bExecute);
IF fbExecuteRiseEdge.Q THEN
	bHomingInProgress:=TRUE;
	bReadNCVelocities:=TRUE;
	fbAbortHoming.Execute:=FALSE;
	nHomeProcLocal:=nHomeProc; //Ensure that nHomeProc is not changed during sequence (nCmdData will only be read at a rising edge of bExecute)
	CASE nHomeProcLocal OF  	
	  1:
      2:
      3:
      4:
	  5:
	  6:
	  7:
	  8:
	  13:
	  14:
	  15: 
    ELSE //nCmdData not valid	
      bError:=TRUE;
	  bHomingInProgress := FALSE;
      nErrorId:=16#4FFF; 
  END_CASE
END_IF

IF bHomingInProgress AND fbHomeReadNCVelocities.bDone THEN
CASE nHomeProcLocal OF  	
   1,2: // Home to Negative(1) or Positive(2) limit switch
	   CASE nHomingState OF
		  0: 
		  	fbStepLimitSwitch.Execute:=FALSE;
			fbStepLimitSwitch.Direction:=mcNegativeDirection;
			fbStepLimitSwitch.LimitSwitchMode:=mcFallingEdge;
			fbStepLimitSwitch.Setposition:=fHomePosition;
			fbStepLimitSwitch.Velocity:=fbHomeReadNCVelocities.fVelocityToCam;
			nHomingState:=nHomingState+1;
	 	  1:
			fbStepLimitSwitch.Execute:=TRUE;
			nHomingState:=nHomingState+1;
		  2:
			IF fbStepLimitSwitch.Busy THEN
				nHomingState:=nHomingState+1;
			END_IF
		  3:
		  	IF fbStepLimitSwitch.Done THEN
				nHomingState:=nHomingState+1;
				fbFinishHoming.Execute:=TRUE;
			END_IF
		END_CASE
	3: // Home on bHomeSensor via bLimitBwd
		CASE nHomingState OF
		  0: 
			fbStepLimitSwitchDetection.Execute:=FALSE;
			fbStepLimitSwitchDetection.Direction:=mcNegativeDirection;
			fbStepLimitSwitchDetection.LimitSwitchMode:=mcFallingEdge;
			fbStepLimitSwitchDetection.Velocity:=fbHomeReadNCVelocities.fVelocityToCam;
			nHomingState:=nHomingState+1;
	 	  1:
			fbStepLimitSwitchDetection.Execute:=TRUE;
			nHomingState:=nHomingState+1;
		  2:
			IF fbStepLimitSwitch.Busy THEN
				nHomingState:=nHomingState+1;
			END_IF
		  3:
		  	IF fbStepLimitSwitch.Done THEN
				nHomingState:=nHomingState+1;
				//fbFinishHoming.Execute:=TRUE;
			END_IF
		END_CASE
	4: // Home on bHomeSensor via bLimitFwd	   
	5: // Home on Enc Latch via LimtBwd   
	6: // Home on Enc Latch via bLimitFwd
	7,8: // Home to bHomeSensor moving in the negative(7) or positive(8) direction
		CASE nHomingState OF
		  0: 
			fbStepAbsoluteSwitch.Execute:=FALSE;
			fbStepAbsoluteSwitch.SwitchMode:=mcFallingEdge;
			fbStepAbsoluteSwitch.SetPosition:=fHomePosition;
			fbStepAbsoluteSwitch.Velocity:=fbHomeReadNCVelocities.fVelocityToCam;
			CASE nHomeProcLocal OF
				7: fbStepAbsoluteSwitch.Direction:=mcNegativeDirection;
				8: fbStepAbsoluteSwitch.Direction:=mcPositiveDirection;
			END_CASE
			nHomingState:=nHomingState+1;
	 	  1:
			fbStepAbsoluteSwitch.Execute:=TRUE;
			nHomingState:=nHomingState+1;
		  2:
			IF fbStepAbsoluteSwitch.Busy THEN
				nHomingState:=nHomingState+1;
			END_IF
		  3:
		  	IF fbStepAbsoluteSwitch.Done THEN
				fbFinishHoming.Execute:=TRUE;
				nHomingState:=nHomingState+1;
			END_IF
		  4:
		  	IF fbFinishHoming.Done THEN
				bHomingInProgress:=FALSE;
				fbFinishHoming.Execute:=FALSE;
				nHomingState:=0;
			END_IF
		END_CASE
	13,14: // Home to zero pulse on encoder in the negative(13) or positive(14) direction
		CASE nHomingState OF
		  0: // Prepare params
		  	fbStepReferencePulse.Execute:=FALSE;
			fbStepReferencePulse.SetPosition:=fHomePosition;
			fbStepReferencePulse.Velocity:=fbHomeReadNCVelocities.fVelocityToCam;
			fbRef_Signal_Ref2.SignalSource:=SignalSource_ZeroPulse;
			fbRef_Signal_Ref2.TouchProbe:=TouchProbe1;
			CASE nHomeProcLocal OF
				13: fbStepReferencePulse.Direction:=mcNegativeDirection;
				14: fbStepReferencePulse.Direction:=mcPositiveDirection;
			END_CASE
			nHomingState:=nHomingState+1;
	 	  1: // Execute
			fbStepReferencePulse.Execute:=TRUE;
			nHomingState:=nHomingState+1;
		  2: // Check that started
			IF fbStepReferencePulse.Busy THEN
				nHomingState:=nHomingState+1;
			END_IF
		  3: // Check that finished
		  	IF fbStepReferencePulse.Done THEN
				fbStepReferencePulse.Execute:=FALSE;
				fbFinishHoming.Execute:=TRUE;
				nHomingState:=nHomingState+1;
			END_IF
		  4:
		  	IF fbFinishHoming.Done THEN
				bHomingInProgress:=FALSE;
				fbFinishHoming.Execute:=FALSE;				
				nHomingState:=0;
			END_IF
		END_CASE
	15: // Set current position without moving
	   CASE nHomingState OF
		  0: // Prepare params
		  	fbHomeDirect.Execute:=FALSE;
			fbHomeDirect.SetPosition:=0;
			nHomingState:=nHomingState+1;
	 	  1: // Execute
			fbHomeDirect.Execute:=TRUE;
			nHomingState:=nHomingState+1;
		  2: // Check that started
			IF fbHomeDirect.Busy THEN
				nHomingState:=nHomingState+1;
			END_IF
		  3: // Check that finished
		  	IF fbHomeDirect.Done THEN
				fbHomeDirect.Execute:=FALSE;
				bHomingInProgress:=FALSE;
			END_IF
		END_CASE	
END_CASE
ELSE
	fbStepLimitSwitch.Execute:=FALSE;
	fbStepLimitSwitchDetection.Execute:=FALSE;
	fbStepAbsoluteSwitch.Execute:=FALSE;
	fbStepReferencePulse.Execute:=FALSE;
	fbHomeDirect.Execute:=FALSE;
	fbAbortHoming.Execute:=FALSE;
	fbFinishHoming.Execute:=FALSE;
END_IF

fbHomeReadNCVelocities(
	En:=TRUE,
	bExecute:=bReadNCVelocities, // Actualy not needed for sequence 15 (set position only, no movement))
	bReset:=bReset,
	Axis:=Axis );

StOptions4.DisableDriveAccess:=TRUE;
stOptions4.EnableLagErrorDetection:=TRUE;
fbStepLimitSwitch(
	Axis:= Axis, 
	Parameter:= fbHomingParameter, 
	Execute:= , 
	Direction:= , 
	LimitSwitchMode:= , 
	LimitSwitchSignal:= , 
	Velocity:= 10, // *********** NEED TO CHANGE **************
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	SetPosition:= , 
	TimeLimit:= , 
	DistanceLimit:= , 
	TorqueLimit:= , 
	BufferMode:= , 
	Options:= StOptions4, 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );

fbStepLimitSwitchDetection(
	Axis:= AXIS, 
	Parameter:= fbHomingParameter, 
	Execute:= , 
	Direction:= , 
	LimitSwitchMode:= , 
	LimitSwitchSignal:= , 
	Velocity:= ,
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	TimeLimit:= , 
	DistanceLimit:= , 
	TorqueLimit:= , 
	BufferMode:= , 
	Options:= StOptions4, 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> , 
	RecordedPosition=> );

fbRef_Signal_Ref2.Level:=bHomeSensor;	
fbStepAbsoluteSwitch(
	Axis:= Axis, 
	Parameter:= fbHomingParameter, 
	Execute:= , 
	Direction:= , 
	SwitchMode:= , 
	ReferenceSignal:= fbRef_Signal_Ref2, 
	Velocity:= ,
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	SetPosition:= , 
	TimeLimit:= , 
	DistanceLimit:= , 
	TorqueLimit:= , 
	PositiveLimitSwitch:= , 
	NegativeLimitSwitch:= , 
	BufferMode:= , 
	Options:= StOptions4, 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );


fbStepReferencePulse(
	Axis:= Axis, 
	Parameter:= fbHomingParameter, 
	Execute:= , 
	Direction:= , 
	ReferenceSignal:= fbRef_Signal_Ref2, 
	Velocity:= ,
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	SetPosition:= , 
	TimeLimit:= , 
	DistanceLimit:= , 
	TorqueLimit:= , 
	BufferMode:= , 
	Options:= StOptions4, 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
fbHomeDirect(
	Axis:= Axis, 
	Parameter:= fbHomingParameter, 
	Execute:= , 
	SetPosition:= , 
	BufferMode:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );

StOptions2.DisableDriveAccess:=TRUE;
fbFinishHoming(
	Axis:= Axis, 
	Parameter:= fbHomingParameter, 
	Execute:= , 
	Distance:= , 
	Velocity:= , 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	BufferMode:= , 
	Options:= StOptions2, 
	Done=> , 
	Busy=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
fbAbortHoming(
	Axis:= Axis, 
	Parameter:= fbHomingParameter, 
	Execute:= , 
	Options:= StOptions2, 
	Done=> , 
	Busy=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
bHomed:=Axis.Status.Homed;]]></ST>
    </Implementation>
    <LineIds Name="FB_Homing2">
      <LineId Id="34" Count="2" />
      <LineId Id="691" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="760" Count="0" />
      <LineId Id="759" Count="0" />
      <LineId Id="761" Count="0" />
      <LineId Id="764" Count="0" />
      <LineId Id="913" Count="0" />
      <LineId Id="762" Count="0" />
      <LineId Id="972" Count="0" />
      <LineId Id="49" Count="3" />
      <LineId Id="945" Count="0" />
      <LineId Id="993" Count="0" />
      <LineId Id="940" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="58" Count="6" />
      <LineId Id="900" Count="0" />
      <LineId Id="899" Count="0" />
      <LineId Id="902" Count="0" />
      <LineId Id="901" Count="0" />
      <LineId Id="65" Count="2" />
      <LineId Id="753" Count="0" />
      <LineId Id="68" Count="2" />
      <LineId Id="754" Count="0" />
      <LineId Id="974" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="88" Count="2" />
      <LineId Id="832" Count="0" />
      <LineId Id="394" Count="0" />
      <LineId Id="513" Count="0" />
      <LineId Id="731" Count="0" />
      <LineId Id="963" Count="0" />
      <LineId Id="530" Count="0" />
      <LineId Id="395" Count="0" />
      <LineId Id="514" Count="0" />
      <LineId Id="728" Count="0" />
      <LineId Id="692" Count="0" />
      <LineId Id="729" Count="0" />
      <LineId Id="677" Count="0" />
      <LineId Id="693" Count="0" />
      <LineId Id="678" Count="2" />
      <LineId Id="682" Count="0" />
      <LineId Id="681" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="584" Count="0" />
      <LineId Id="766" Count="1" />
      <LineId Id="833" Count="0" />
      <LineId Id="768" Count="1" />
      <LineId Id="964" Count="0" />
      <LineId Id="771" Count="12" />
      <LineId Id="765" Count="0" />
      <LineId Id="585" Count="2" />
      <LineId Id="871" Count="3" />
      <LineId Id="876" Count="1" />
      <LineId Id="962" Count="0" />
      <LineId Id="932" Count="2" />
      <LineId Id="910" Count="0" />
      <LineId Id="903" Count="0" />
      <LineId Id="878" Count="8" />
      <LineId Id="890" Count="0" />
      <LineId Id="887" Count="0" />
      <LineId Id="889" Count="0" />
      <LineId Id="892" Count="0" />
      <LineId Id="894" Count="0" />
      <LineId Id="897" Count="0" />
      <LineId Id="937" Count="0" />
      <LineId Id="895" Count="1" />
      <LineId Id="870" Count="0" />
      <LineId Id="590" Count="0" />
      <LineId Id="813" Count="1" />
      <LineId Id="831" Count="0" />
      <LineId Id="919" Count="0" />
      <LineId Id="961" Count="0" />
      <LineId Id="815" Count="0" />
      <LineId Id="841" Count="0" />
      <LineId Id="921" Count="3" />
      <LineId Id="816" Count="10" />
      <LineId Id="936" Count="0" />
      <LineId Id="827" Count="1" />
      <LineId Id="928" Count="2" />
      <LineId Id="938" Count="0" />
      <LineId Id="931" Count="0" />
      <LineId Id="927" Count="0" />
      <LineId Id="812" Count="0" />
      <LineId Id="588" Count="0" />
      <LineId Id="733" Count="1" />
      <LineId Id="830" Count="0" />
      <LineId Id="735" Count="0" />
      <LineId Id="738" Count="9" />
      <LineId Id="751" Count="0" />
      <LineId Id="756" Count="0" />
      <LineId Id="750" Count="0" />
      <LineId Id="732" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="757" Count="1" />
      <LineId Id="834" Count="5" />
      <LineId Id="755" Count="0" />
      <LineId Id="984" Count="4" />
      <LineId Id="983" Count="0" />
      <LineId Id="688" Count="1" />
      <LineId Id="935" Count="0" />
      <LineId Id="461" Count="21" />
      <LineId Id="9" Count="0" />
      <LineId Id="785" Count="0" />
      <LineId Id="787" Count="21" />
      <LineId Id="786" Count="0" />
      <LineId Id="915" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="535" Count="23" />
      <LineId Id="533" Count="0" />
      <LineId Id="916" Count="0" />
      <LineId Id="559" Count="0" />
      <LineId Id="562" Count="20" />
      <LineId Id="560" Count="0" />
      <LineId Id="670" Count="0" />
      <LineId Id="646" Count="11" />
      <LineId Id="599" Count="0" />
      <LineId Id="683" Count="1" />
      <LineId Id="614" Count="14" />
      <LineId Id="612" Count="0" />
      <LineId Id="659" Count="0" />
      <LineId Id="661" Count="8" />
      <LineId Id="660" Count="0" />
      <LineId Id="904" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>