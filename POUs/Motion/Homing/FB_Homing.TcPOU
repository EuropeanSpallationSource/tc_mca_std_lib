<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_Homing" Id="{e8b732be-06ce-4dd5-944d-e7ad6eae8e67}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Homing
VAR_INPUT
	bExecute: BOOL;
	bReset: BOOL;
	bStop: BOOL;
	nHomeProc: UINT;
	bLimitBwd: BOOL;
	bLimitFwd: BOOL;
	bEncLatch: BOOL;
	bHomeSensor: BOOL;
	fHomePosition: LREAL;
END_VAR
VAR_IN_OUT
	Axis: AXIS_REF;
END_VAR
VAR_OUTPUT
	bHomed:BOOL;
	bError: BOOL;
	nErrorId: UDINT;
END_VAR
VAR
	bHomingInProgress: BOOL;
	bReadNCVelocities: BOOL;
	nHomeProcLocal: UINT := 0;
    nHomingState: INT := 0;
	fbExecuteRiseEdge: R_TRIG;
	fbHomingParameter: MC_HomingParameter;
	fbRef_Signal_Ref1: MC_Ref_Signal_Ref;
	fbRef_Signal_Ref2: MC_Ref_Signal_Ref;
	fbRef_Signal_Ref3: MC_Ref_Signal_Ref;
	fbRef_Signal_Ref4: MC_Ref_Signal_Ref;
	StOptions2: ST_Home_Options2;
	StOptions4: ST_Home_Options4;
	fbStepLimitSwitch: MC_StepLimitSwitch;
	fbStepLimitSwitchDetection: MC_StepLimitSwitchDetection;
	fbStepAbsoluteSwitch: MC_StepAbsoluteSwitch;
	fbStepReferencePulse: MC_StepReferencePulse;
	fbHomeDirect: MC_HomeDirect;
	fbAbortHoming: MC_AbortHoming;
	fbFinishHoming: MC_FinishHoming;
	fbHomeReadNCVelocities: FB_HomeReadNCVelocities;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bReset THEN	
	bError:=FALSE;
	bReadNCVelocities:=FALSE;
	bHomingInProgress:=FALSE;
	fbAbortHoming.Execute:=FALSE;
	nErrorId:=0;
	nHomingState:=0;
END_IF

IF bStop THEN
	fbAbortHoming.Execute:=TRUE;
	bReadNCVelocities:=FALSE;
	bHomingInProgress:=FALSE;
	nHomingState:=0;
END_IF

//Reset at rising edge of bExecute
fbExecuteRiseEdge(CLK:=bExecute);
IF fbExecuteRiseEdge.Q THEN
	bHomingInProgress:=TRUE;
	bReadNCVelocities:=TRUE;
	fbAbortHoming.Execute:=FALSE;
	nHomeProcLocal:=nHomeProc;
	CASE nHomeProcLocal OF  	
	  1:
      2:
      3:
      4:
	  5:
	  6:
	  7:
	  8:
	  9:
	  10:
	  15: 
    ELSE
      bError:=TRUE;
	  bHomingInProgress := FALSE;
      nErrorId:=16#4FFF; 
  END_CASE
END_IF

IF bHomingInProgress AND fbHomeReadNCVelocities.bDone AND NOT bError THEN
CASE nHomeProcLocal OF  	
   1,2: // Home to bLimit bLimitBwd(1) or bLimitFwd(2)
		CASE nHomingState OF
		  0: 
			fbStepLimitSwitchDetection.Execute:=FALSE;
			fbStepLimitSwitchDetection.LimitSwitchMode:=mcRisingEdge;
			fbStepLimitSwitchDetection.Velocity:=fbHomeReadNCVelocities.fVelocityToCam;
			CASE nHomeProcLocal OF
				1: fbStepLimitSwitchDetection.Direction:=mcNegativeDirection;
				2: fbStepLimitSwitchDetection.Direction:=mcPositiveDirection;
			END_CASE
			nHomingState:=nHomingState+1;
	 	  1:
			fbStepLimitSwitchDetection.Execute:=TRUE;
			nHomingState:=nHomingState+1;
		  2:
			IF fbStepLimitSwitchDetection.Busy THEN
				nHomingState:=nHomingState+1;
			END_IF
		  3:
		  	IF fbStepLimitSwitchDetection.Done THEN
				fbStepLimitSwitch.Execute:=FALSE;
				fbStepLimitSwitch.LimitSwitchMode:=mcFallingEdge;
				fbStepLimitSwitch.Velocity:=fbHomeReadNCVelocities.fVelocityFromCam;
				fbStepLimitSwitch.Setposition:=fHomePosition;
				CASE nHomeProcLocal OF
					1: fbStepLimitSwitch.Direction:=mcNegativeDirection;
					2: fbStepLimitSwitch.Direction:=mcPositiveDirection;
				END_CASE
				nHomingState:=nHomingState+1;
			END_IF	
		  4:
			fbStepLimitSwitch.Execute:=TRUE;
			nHomingState:=nHomingState+1;	
		  5:	  	
		  	IF fbStepLimitSwitch.Busy THEN
				nHomingState:=nHomingState+1;
			END_IF
		  6: 
		  	IF fbStepLimitSwitch.Done THEN
				fbFinishHoming.Execute:=TRUE;
				nHomingState:=nHomingState+1;
			END_IF
		  7:
		  	IF fbFinishHoming.Done THEN
				bHomingInProgress:=FALSE;
				fbFinishHoming.Execute:=FALSE;
				bReadNCVelocities:=FALSE;
				nHomingState:=0;
			END_IF
		END_CASE
	3,4: // Home to bHomeSensor via bLimitBwd(3) or bLimitFwd(4)
		CASE nHomingState OF
		  0: 
			fbStepLimitSwitchDetection.Execute:=FALSE;
			fbStepLimitSwitchDetection.LimitSwitchMode:=mcRisingEdge;
			fbStepLimitSwitchDetection.Velocity:=fbHomeReadNCVelocities.fVelocityToCam;
			CASE nHomeProcLocal OF
				3: fbStepLimitSwitchDetection.Direction:=mcNegativeDirection;
				4: fbStepLimitSwitchDetection.Direction:=mcPositiveDirection;
			END_CASE
			nHomingState:=nHomingState+1;
	 	  1:
			fbStepLimitSwitchDetection.Execute:=TRUE;
			nHomingState:=nHomingState+1;
		  2:
			IF fbStepLimitSwitchDetection.Busy THEN
				nHomingState:=nHomingState+1;
			END_IF
		  3:
		  	IF fbStepLimitSwitchDetection.Done THEN
				CASE nHomeProcLocal OF
					3: nHomeProcLocal:=8;
					4: nHomeProcLocal:=7;
				END_CASE
				nHomingState:=0;
			END_IF
		END_CASE
	5,6: // Home to index pulse of an encoder via bLimitBwd(5) or bLimitFwd(6)
		CASE nHomingState OF
		  0: 
			fbStepLimitSwitchDetection.Execute:=FALSE;
			fbStepLimitSwitchDetection.LimitSwitchMode:=mcRisingEdge;
			fbStepLimitSwitchDetection.Velocity:=fbHomeReadNCVelocities.fVelocityToCam;
			CASE nHomeProcLocal OF
				5: fbStepLimitSwitchDetection.Direction:=mcNegativeDirection;
				6: fbStepLimitSwitchDetection.Direction:=mcPositiveDirection;
			END_CASE
			nHomingState:=nHomingState+1;
	 	  1:
			fbStepLimitSwitchDetection.Execute:=TRUE;
			nHomingState:=nHomingState+1;
		  2:
			IF fbStepLimitSwitchDetection.Busy THEN
				nHomingState:=nHomingState+1;
			END_IF
		  3:
		  	IF fbStepLimitSwitchDetection.Done THEN
				CASE nHomeProcLocal OF
					5: nHomeProcLocal:=10;
					6: nHomeProcLocal:=9;
				END_CASE
				nHomingState:=0;
			END_IF
		END_CASE
	7,8: // Home to bHome Sensor moving in the negative(7) or positive(8) direction
		CASE nHomingState OF
		  0: 
			fbStepAbsoluteSwitch.Execute:=FALSE;
			fbStepAbsoluteSwitch.SwitchMode:=mcFallingEdge;
			fbStepAbsoluteSwitch.SetPosition:=fHomePosition;
			fbStepAbsoluteSwitch.Velocity:=fbHomeReadNCVelocities.fVelocityFromCam;
			CASE nHomeProcLocal OF
				7: fbStepAbsoluteSwitch.Direction:=mcNegativeDirection;
				8: fbStepAbsoluteSwitch.Direction:=mcPositiveDirection;
			END_CASE
			nHomingState:=nHomingState+1;
	 	  1:
			fbStepAbsoluteSwitch.Execute:=TRUE;
			nHomingState:=nHomingState+1;
		  2:
			IF fbStepAbsoluteSwitch.Busy THEN
				nHomingState:=nHomingState+1;
			END_IF
		  3:
		  	IF fbStepAbsoluteSwitch.Done THEN
				fbFinishHoming.Execute:=TRUE;
				nHomingState:=nHomingState+1;
			END_IF
		  4:
		  	IF fbFinishHoming.Done THEN
				bHomingInProgress:=FALSE;
				fbFinishHoming.Execute:=FALSE;
				bReadNCVelocities:=FALSE;
				nHomingState:=0;
			END_IF
		END_CASE
	9,10: // Home index pulse of an encoder in the negative(9) or positive(10) direction
		CASE nHomingState OF
		  0:
		  	fbStepReferencePulse.Execute:=FALSE;
			fbStepReferencePulse.SetPosition:=fHomePosition;
			fbStepReferencePulse.Velocity:=fbHomeReadNCVelocities.fVelocityFromCam;
			fbRef_Signal_Ref4.SignalSource:=SignalSource_ZeroPulse;
			fbRef_Signal_Ref4.TouchProbe:=TouchProbe1;
			CASE nHomeProcLocal OF
				9: fbStepReferencePulse.Direction:=mcNegativeDirection;
				10: fbStepReferencePulse.Direction:=mcPositiveDirection;
			END_CASE
			nHomingState:=nHomingState+1;
	 	  1:
			fbStepReferencePulse.Execute:=TRUE;
			nHomingState:=nHomingState+1;
		  2:
			IF fbStepReferencePulse.Busy THEN
				nHomingState:=nHomingState+1;
			END_IF
		  3:
		  	IF fbStepReferencePulse.Done THEN
				fbStepReferencePulse.Execute:=FALSE;
				fbFinishHoming.Execute:=TRUE;
				nHomingState:=nHomingState+1;
			END_IF
		  4:
		  	IF fbFinishHoming.Done THEN
				bHomingInProgress:=FALSE;
				fbFinishHoming.Execute:=FALSE;
				bReadNCVelocities:=FALSE;			
				nHomingState:=0;
			END_IF
		END_CASE
	15: // Set current position without moving
	   CASE nHomingState OF
		  0:
		  	fbHomeDirect.Execute:=FALSE;
			fbHomeDirect.SetPosition:=fHomePosition;
			nHomingState:=nHomingState+1;
	 	  1:
			fbHomeDirect.Execute:=TRUE;
			nHomingState:=nHomingState+1;
		  2: // Check that started
			IF fbHomeDirect.Busy THEN
				nHomingState:=nHomingState+1;
			END_IF
		  3: // Check that finished
		  	IF fbHomeDirect.Done THEN
				fbHomeDirect.Execute:=FALSE;
				bHomingInProgress:=FALSE;
				bReadNCVelocities:=FALSE;
			END_IF
		END_CASE	
END_CASE
ELSE
	fbStepLimitSwitch.Execute:=FALSE;
	fbStepLimitSwitchDetection.Execute:=FALSE;
	fbStepAbsoluteSwitch.Execute:=FALSE;
	fbStepReferencePulse.Execute:=FALSE;
	fbHomeDirect.Execute:=FALSE;
END_IF

fbHomeReadNCVelocities(
	En:=TRUE,
	bExecute:=bReadNCVelocities,
	bReset:=bReset,
	Axis:=Axis );

StOptions4.DisableDriveAccess:=TRUE;
stOptions4.EnableLagErrorDetection:=TRUE;

IF fbStepLimitSwitch.Direction=mcPositiveDirection THEN
	fbRef_Signal_Ref1.Level:=NOT(bLimitFwd);
ELSIF fbStepLimitSwitch.Direction=mcNegativeDirection THEN
	fbRef_Signal_Ref1.Level:=NOT(bLimitBwd);
END_IF
fbStepLimitSwitch(
	Axis:= Axis, 
	Parameter:= fbHomingParameter, 
	LimitSwitchSignal:= fbRef_Signal_Ref1, 
	Options:= StOptions4);

IF fbStepLimitSwitchDetection.Direction=mcPositiveDirection THEN
	fbRef_Signal_Ref2.Level:=NOT(bLimitFwd);
ELSIF fbStepLimitSwitchDetection.Direction=mcNegativeDirection THEN
	fbRef_Signal_Ref2.Level:=NOT(bLimitBwd);
END_IF	
fbStepLimitSwitchDetection(
	Axis:= AXIS, 
	Parameter:= fbHomingParameter, 
	Execute:= , 
	Direction:= , 
	LimitSwitchMode:= , 
	LimitSwitchSignal:= fbRef_Signal_Ref2, 
	Options:= StOptions4);

fbRef_Signal_Ref3.Level:=bHomeSensor;	
fbStepAbsoluteSwitch(
	Axis:= Axis, 
	Parameter:= fbHomingParameter, 
	ReferenceSignal:= fbRef_Signal_Ref3, 
	PositiveLimitSwitch:=NOT(bLimitFwd),
	NegativeLimitSwitch:=NOT(bLimitBwd),
	Options:= StOptions4);

fbStepReferencePulse(
	Axis:= Axis, 
	Parameter:= fbHomingParameter, 
	ReferenceSignal:= fbRef_Signal_Ref4, 
	Options:= StOptions4);
	
fbHomeDirect(
	Axis:= Axis, 
	Parameter:= fbHomingParameter);

StOptions2.DisableDriveAccess:=TRUE;
fbFinishHoming(
	Axis:= Axis, 
	Parameter:= fbHomingParameter,
	Velocity:=,
	Options:= StOptions2);
	
fbAbortHoming(
	Axis:= Axis, 
	Parameter:= fbHomingParameter, 
	Options:= StOptions2);

IF fbStepLimitSwitch.Error THEN
	bError:=TRUE;
	nErrorId:=fbStepLimitSwitch.ErrorID;
ELSIF fbStepLimitSwitchDetection.Error THEN
	bError:=TRUE;
	nErrorId:=fbStepLimitSwitchDetection.ErrorID;
ELSIF fbStepAbsoluteSwitch.Error THEN
	bError:=TRUE;
	nErrorId:=fbStepAbsoluteSwitch.ErrorID;
ELSIF fbStepReferencePulse.Error THEN
	bError:=TRUE;
	nErrorId:=fbStepReferencePulse.ErrorID;
ELSIF fbHomeDirect.Error THEN
	bError:=TRUE;
	nErrorId:=fbHomeDirect.ErrorID;
ELSIF fbAbortHoming.Error THEN
	bError:=TRUE;
	nErrorId:=fbAbortHoming.ErrorID;
ELSIF fbFinishHoming.Error THEN
	bError:=TRUE;
	nErrorId:=fbFinishHoming.ErrorID;
END_IF

IF fbStepLimitSwitch.CommandAborted OR fbStepLimitSwitchDetection.CommandAborted OR fbStepAbsoluteSwitch.CommandAborted OR 
fbStepReferencePulse.CommandAborted OR fbHomeDirect.CommandAborted THEN
	nHomingState:=0;
	bHomingInProgress:=FALSE;
END_IF
	
bHomed:=Axis.Status.Homed;]]></ST>
    </Implementation>
    <LineIds Name="FB_Homing">
      <LineId Id="1130" Count="1" />
      <LineId Id="1194" Count="0" />
      <LineId Id="1132" Count="7" />
      <LineId Id="1193" Count="0" />
      <LineId Id="1140" Count="0" />
      <LineId Id="1610" Count="0" />
      <LineId Id="1127" Count="1" />
      <LineId Id="50" Count="2" />
      <LineId Id="945" Count="0" />
      <LineId Id="993" Count="0" />
      <LineId Id="940" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="58" Count="6" />
      <LineId Id="900" Count="0" />
      <LineId Id="899" Count="0" />
      <LineId Id="902" Count="0" />
      <LineId Id="901" Count="0" />
      <LineId Id="65" Count="2" />
      <LineId Id="753" Count="0" />
      <LineId Id="68" Count="2" />
      <LineId Id="754" Count="0" />
      <LineId Id="974" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="1423" Count="17" />
      <LineId Id="1385" Count="0" />
      <LineId Id="1270" Count="1" />
      <LineId Id="1200" Count="0" />
      <LineId Id="1269" Count="0" />
      <LineId Id="1273" Count="2" />
      <LineId Id="1272" Count="0" />
      <LineId Id="1206" Count="0" />
      <LineId Id="1205" Count="0" />
      <LineId Id="1276" Count="0" />
      <LineId Id="1287" Count="0" />
      <LineId Id="1286" Count="0" />
      <LineId Id="1288" Count="0" />
      <LineId Id="1277" Count="2" />
      <LineId Id="678" Count="0" />
      <LineId Id="1006" Count="0" />
      <LineId Id="682" Count="0" />
      <LineId Id="1007" Count="0" />
      <LineId Id="681" Count="0" />
      <LineId Id="1001" Count="3" />
      <LineId Id="1077" Count="0" />
      <LineId Id="1005" Count="0" />
      <LineId Id="1000" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="584" Count="0" />
      <LineId Id="766" Count="1" />
      <LineId Id="833" Count="0" />
      <LineId Id="769" Count="0" />
      <LineId Id="964" Count="0" />
      <LineId Id="1067" Count="1" />
      <LineId Id="1070" Count="0" />
      <LineId Id="1633" Count="8" />
      <LineId Id="779" Count="1" />
      <LineId Id="1234" Count="2" />
      <LineId Id="1215" Count="0" />
      <LineId Id="781" Count="0" />
      <LineId Id="783" Count="0" />
      <LineId Id="765" Count="0" />
      <LineId Id="586" Count="0" />
      <LineId Id="1642" Count="24" />
      <LineId Id="1238" Count="0" />
      <LineId Id="871" Count="0" />
      <LineId Id="1622" Count="5" />
      <LineId Id="932" Count="2" />
      <LineId Id="910" Count="0" />
      <LineId Id="903" Count="0" />
      <LineId Id="878" Count="8" />
      <LineId Id="890" Count="0" />
      <LineId Id="887" Count="0" />
      <LineId Id="889" Count="0" />
      <LineId Id="892" Count="0" />
      <LineId Id="894" Count="0" />
      <LineId Id="897" Count="0" />
      <LineId Id="937" Count="0" />
      <LineId Id="1075" Count="0" />
      <LineId Id="895" Count="1" />
      <LineId Id="1669" Count="0" />
      <LineId Id="590" Count="0" />
      <LineId Id="813" Count="1" />
      <LineId Id="831" Count="0" />
      <LineId Id="919" Count="0" />
      <LineId Id="961" Count="0" />
      <LineId Id="815" Count="0" />
      <LineId Id="841" Count="0" />
      <LineId Id="921" Count="3" />
      <LineId Id="816" Count="10" />
      <LineId Id="936" Count="0" />
      <LineId Id="827" Count="1" />
      <LineId Id="928" Count="2" />
      <LineId Id="938" Count="0" />
      <LineId Id="1074" Count="0" />
      <LineId Id="931" Count="0" />
      <LineId Id="927" Count="0" />
      <LineId Id="812" Count="0" />
      <LineId Id="588" Count="0" />
      <LineId Id="733" Count="1" />
      <LineId Id="830" Count="0" />
      <LineId Id="735" Count="0" />
      <LineId Id="738" Count="9" />
      <LineId Id="751" Count="0" />
      <LineId Id="756" Count="0" />
      <LineId Id="1073" Count="0" />
      <LineId Id="750" Count="0" />
      <LineId Id="732" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="1611" Count="0" />
      <LineId Id="1613" Count="3" />
      <LineId Id="1612" Count="0" />
      <LineId Id="755" Count="0" />
      <LineId Id="984" Count="4" />
      <LineId Id="983" Count="0" />
      <LineId Id="688" Count="1" />
      <LineId Id="935" Count="0" />
      <LineId Id="1060" Count="0" />
      <LineId Id="1016" Count="0" />
      <LineId Id="1015" Count="0" />
      <LineId Id="1064" Count="0" />
      <LineId Id="1017" Count="0" />
      <LineId Id="1063" Count="0" />
      <LineId Id="461" Count="2" />
      <LineId Id="467" Count="0" />
      <LineId Id="477" Count="0" />
      <LineId Id="1446" Count="4" />
      <LineId Id="1212" Count="0" />
      <LineId Id="787" Count="1" />
      <LineId Id="1474" Count="2" />
      <LineId Id="789" Count="0" />
      <LineId Id="793" Count="0" />
      <LineId Id="802" Count="0" />
      <LineId Id="915" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="535" Count="2" />
      <LineId Id="541" Count="0" />
      <LineId Id="1516" Count="1" />
      <LineId Id="553" Count="0" />
      <LineId Id="559" Count="0" />
      <LineId Id="562" Count="2" />
      <LineId Id="567" Count="0" />
      <LineId Id="577" Count="0" />
      <LineId Id="670" Count="0" />
      <LineId Id="646" Count="2" />
      <LineId Id="683" Count="1" />
      <LineId Id="614" Count="2" />
      <LineId Id="1581" Count="0" />
      <LineId Id="624" Count="0" />
      <LineId Id="659" Count="0" />
      <LineId Id="661" Count="2" />
      <LineId Id="665" Count="0" />
      <LineId Id="1539" Count="0" />
      <LineId Id="1541" Count="0" />
      <LineId Id="1546" Count="0" />
      <LineId Id="1582" Count="0" />
      <LineId Id="1585" Count="2" />
      <LineId Id="1590" Count="2" />
      <LineId Id="1588" Count="0" />
      <LineId Id="1596" Count="2" />
      <LineId Id="1602" Count="0" />
      <LineId Id="1601" Count="0" />
      <LineId Id="1604" Count="1" />
      <LineId Id="1603" Count="0" />
      <LineId Id="1607" Count="1" />
      <LineId Id="1606" Count="0" />
      <LineId Id="1609" Count="0" />
      <LineId Id="1600" Count="0" />
      <LineId Id="1599" Count="0" />
      <LineId Id="1578" Count="2" />
      <LineId Id="1540" Count="0" />
      <LineId Id="1114" Count="0" />
      <LineId Id="905" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>