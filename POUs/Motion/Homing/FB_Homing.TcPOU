<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Homing" Id="{b95d0b47-1221-0049-3c71-c4df2e544daa}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Homing
VAR_IN_OUT
    Axis: Axis_Ref;
END_VAR
VAR_INPUT
    bExecute: BOOL;
    bLimitFwd: BOOL;
    bLimitBwd: BOOL;
    bHomeSensor: BOOL;
    eHomeSeq: E_HomingRoutines;
    fHomePosition: LREAL;
    fHomeFinishDistance: LREAL;
    stConfig: ST_AxisConfig;
END_VAR
VAR_OUTPUT
    bDone: BOOL;
    bBusy: BOOL;
    bCommandAborted: BOOL;
    bError: BOOL;
    nErrorId: UDINT;
END_VAR
VAR
    bHWSignalForHoming: BOOL;

    //Hardware Signals
    stLimitSwitchSignal: MC_Ref_Signal_Ref;
    stRefSwitchSignal: MC_Ref_Signal_Ref;
    stEncPulseSignal: MC_Ref_Signal_Ref;

    //Beckhoff homing function blocks
    fbStepLimitSwitch: MC_StepLimitSwitch;
    fbStepAbsoluteSwitch: MC_StepAbsoluteSwitch;
    fbStepReferencePulse: MC_StepReferencePulse;
    fbStepBlockLag: MC_StepBlockLagBased;
    fbHomeDirect: MC_HomeDirect;
    fbSetPos: MC_SetPosition;
    fbFinishHoming: MC_FinishHoming;
    fbAbortHoming: MC_AbortHoming;
    fbExecute: R_TRIG;
    fbTimerOnDelay: TON;
    fbHWHomeSignalRTrig: R_TRIG;
    fbHWHomeSignalFTrig: F_TRIG;

    //Homing parameters
    stDetectDirection: MC_Home_Direction;
    stDetectLimitDirection: MC_Home_Direction;
    stHomingParameter: MC_HomingParameter;
    stOptions: ST_Home_Options4;
    stOptions3: ST_Home_Options3;

    fSetHomePosition: LREAL;
    fHomeRefPosition: LREAL;
    fActPosition_Done: LREAL;

    fbVelocityToCam: MC_ReadParameter;
    fVelocityToCam: LREAL;
    fbVelocityFromCam: MC_ReadParameter;
    fVelocityFromCam: LREAL;
    fDetectionVelocity: LREAL;
    fDetectionAcceleration: LREAL;
    fDetectionDeceleration: LREAL;

    //Signals for the Beckhoff homing function blocks
    bLocalHomingFB_Execute: BOOL;
    bLocalHomingFB_Done: BOOL;
    bLocalHomingFB_Busy: BOOL;
    bLocalHomingFB_CommandAborted: BOOL;
    bLocalHomingFB_Error: BOOL;
    nLocalHomingFB_ErrorID: UDINT;

    bRisingEdgeDetectionOn: BOOL;
    bFallingEdgeDetectionOn: BOOL;
    fRisingEdgePosition: LREAL;
    fFallingEdgePosition: LREAL;
    bDelay: BOOL;

    //State machine
    eHomingState: (eWaitForRequest := 0, eCoarseDetection := 1, eMoveReverse := 2, eFineDetection := 3, eSetPos := 4, eFinishHoming := 5, eAbortHoming := 20);
    bHomingToHomeSensor: BOOL;
    bHomingToLimitSwitch: BOOL;

    bTwoSpeedHoming:BOOL;
    bReversedDirection: BOOL;
    bFineDetectionDone: BOOL;
    bViaLimitCoarseDetect: BOOL;
    eRefSwitchModeReversed: MC_Switch_Mode;
END_VAR

VAR CONSTANT
    tDELAY_TIME: TIME := T#1S0MS; //Delay Time 1sec befor switching the motor direction for mechanical saftey
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[stLimitSwitchSignal.SignalSource := SignalSource_Default;
stLimitSwitchSignal.TouchProbe := PlcEvent;
stLimitSwitchSignal.Level := bHWSignalForHoming; //bHomeReference = NOT(bLimitFwd)/NOT(bLimitBwd)
stRefSwitchSignal.SignalSource := SignalSource_Default;
stRefSwitchSignal.TouchProbe := PlcEvent;
stRefSwitchSignal.Level := bHWSignalForHoming; //bHomeReference = bHomeSensor
stEncPulseSignal.SignalSource := SignalSource_ZeroPulse;
stEncPulseSignal.TouchProbe := TouchProbe1;

fbHWHomeSignalRTrig(CLK := bHWSignalForHoming);
fbHWHomeSignalFTrig(CLK := bHWSignalForHoming);

fbTimerOnDelay(IN := bDelay, PT := tDELAY_TIME);

//Default accelerations from the NC parameters
fDetectionAcceleration := stConfig.fDefaultAcc;
fDetectionDeceleration := stConfig.fDefaultDec;

//Constantly read the NC for homing velocities so they are available when a homing is executed
fbVelocityToCam(
    Axis := Axis,
    Enable := TRUE,
    ParameterNumber := E_AxisParameters.AxisVelocityToCam,
    ReadMode := READMODE_CYCLIC,
    Error => bLocalHomingFB_Error,
    ErrorID => nLocalHomingFB_ErrorID);

fbVelocityFromCam(
    Axis:= Axis,
    Enable := TRUE,
    ParameterNumber := E_AxisParameters.AxisVelocityFromCam,
    ReadMode := READMODE_CYCLIC,
    Error => bLocalHomingFB_Error,
    ErrorID => nLocalHomingFB_ErrorID);

//Only write velocity if the function block has not errored
IF NOT fbVelocityToCam.Error THEN
    fVelocityToCam := fbVelocityToCam.Value;
END_IF

IF NOT fbVelocityFromCam.Error THEN
    fVelocityFromCam := fbVelocityFromCam.Value;
END_IF

//Common function blocks used for all routines
stOptions.DisableDriveAccess := stConfig.stHomingConfig.bDisableDriveAccess;
stOptions.EnableLagErrorDetection := stConfig.stHomingConfig.bEnableLagErrorDetection;

//For StepBlockLagDetection
stOptions3.DisableDriveAccess := stConfig.stHomingConfig.bDisableDriveAccess;
stOptions3.InstantLagReduction := stConfig.stHomingConfig.bInstantLagReduction;

fbSetPos.Options.ClearPositionLag := TRUE;
fbSetPos(
    Axis := Axis,
    Position := (fActPosition_Done - fHomeRefPosition) + fHomePosition,
    Busy => bLocalHomingFB_Busy,
    Error => bLocalHomingFB_Error,
    ErrorID => nLocalHomingFB_ErrorID);

fbFinishHoming.Options.DisableDriveAccess := stOptions.DisableDriveAccess;
fbFinishHoming(
    Axis := Axis,
    Velocity := fVelocityToCam,
    Acceleration := fDetectionAcceleration,
    Deceleration := fDetectionDeceleration,
    Distance := fHomeFinishDistance,
    Parameter := stHomingParameter,
    Busy => bLocalHomingFB_Busy,
    Error => bLocalHomingFB_Error,
    ErrorID => nLocalHomingFB_ErrorID,
    Done => bDone);

fbAbortHoming.Options.DisableDriveAccess := stOptions.DisableDriveAccess;
fbAbortHoming(
    Axis := Axis,
    Parameter := stHomingParameter,
    Busy => bLocalHomingFB_Busy);


//ACTs contain function blocks custom to each individual routine for the detection stage
CASE eHomeSeq OF
    E_HomingRoutines.eHomeToLimit_Fwd,
    E_HomingRoutines.eHomeToLimit_Bwd:
        actHomeToLimit();

    E_HomingRoutines.eHomeToRef_Fwd,
    E_HomingRoutines.eHomeToRef_Bwd:
        actHomeToSensor();

    E_HomingRoutines.eHomeToEncPulse_Fwd,
    E_HomingRoutines.eHomeToEncPulse_Bwd,
    E_HomingRoutines.eHomeToEncPulse_viaFwdLimit,
    E_HomingRoutines.eHomeToEncPulse_viaBwdLimit:
        actHomeToEncPulse();

    E_HomingRoutines.eHomeToBlock_Fwd,
    E_HomingRoutines.eHomeToBlock_Bwd:
        actHomeToBlock();

    E_HomingRoutines.eHomeDirect:
        actHomeDirect();
END_CASE

//State machine for Two Speed Homing
fbExecute(CLK := bExecute);
CASE eHomingState OF
    eWaitForRequest:
        IF NOT bExecute THEN
            bDelay := FALSE;
            bLocalHomingFB_Execute := FALSE;
            bTwoSpeedHoming := FALSE;
            bHomingToHomeSensor := FALSE;
            bHomingToLimitSwitch := FALSE;
            bReversedDirection := FALSE;
            bRisingEdgeDetectionOn := FALSE;
            bFallingEdgeDetectionOn := FALSE;
            bFineDetectionDone := FALSE;
            fbSetPos.Execute := FALSE;
            fbFinishHoming.Execute := FALSE;
            fbAbortHoming.Execute := FALSE;
        ELSE
            bCommandAborted := FALSE;
            bError := FALSE;
            nErrorID := 0;
        END_IF

        IF fbExecute.Q AND NOT(eHomeSeq = E_HomingRoutines.eNoHoming)THEN
            IF eHomeSeq = E_HomingRoutines.eHomeDirect THEN
                fSetHomePosition := fHomePosition;
                bLocalHomingFB_Execute := TRUE;
                IF NOT bLocalHomingFB_Busy AND bLocalHomingFB_Done THEN
                    bLocalHomingFB_Execute := FALSE;
                    eHomingState := eFinishHoming;
                END_IF
            ELSIF bTwoSpeedHoming THEN
                IF NOT bBusy AND bHWSignalForHoming THEN
                    IF bHomingToHomeSensor AND bFallingEdgeDetectionOn THEN
                        eHomingState := eFineDetection;
                    ELSIF bHomingToHomeSensor AND bRisingEdgeDetectionOn THEN
                        eHomingState := eMoveReverse;
                    END_IF
                ELSIF NOT bBusy AND NOT bHWSignalForHoming THEN
                    eHomingState := eCoarseDetection;
                END_IF
            ELSE
                eHomingState := eFineDetection;
            END_IF
        END_IF

    eCoarseDetection: //Detect the Home Reference with high speed (fVelocityToCam).
        bDelay := TRUE;
        bBusy := TRUE;
        bViaLimitCoarseDetect := TRUE;
        bReversedDirection := FALSE;
        fDetectionVelocity := fVelocityToCam;
        fSetHomePosition := Axis.NcToPlc.ActPos; //Set the Act. position as home position (no change until the home procedure is finished)
        IF fbTimerOnDelay.Q THEN
            bLocalHomingFB_Execute := TRUE;
            bBusy := bLocalHomingFB_Busy;
            IF NOT bLocalHomingFB_Busy AND bLocalHomingFB_Done THEN
                bLocalHomingFB_Execute := FALSE;
                bDelay := FALSE;
                IF bHomingToHomeSensor THEN
                    eHomingState := eMoveReverse;
                ELSE
                    eHomingState := eFineDetection;
                END_IF
            ELSIF NOT bLocalHomingFB_Busy AND (bLocalHomingFB_Error OR bLocalHomingFB_CommandAborted) THEN
                bLocalHomingFB_Execute := FALSE;
                bDelay := FALSE;
                eHomingState := eAbortHoming;
            END_IF
        END_IF

    eMoveReverse: //After detecting the reference sensor reversed direction
        bDelay := TRUE;
        bBusy := TRUE;
        bReversedDirection := TRUE;
        fDetectionVelocity := fVelocityToCam;
        fSetHomePosition := Axis.NcToPlc.ActPos;
        IF fbTimerOnDelay.Q THEN
            bLocalHomingFB_Execute := TRUE;
            bBusy := bLocalHomingFB_Busy;
            IF NOT bLocalHomingFB_Busy AND bLocalHomingFB_Done THEN
                bLocalHomingFB_Execute := FALSE;
                bDelay := FALSE;
                eHomingState := eFineDetection;
            ELSIF NOT bLocalHomingFB_Busy AND (bLocalHomingFB_Error OR bLocalHomingFB_CommandAborted) THEN
                bLocalHomingFB_Execute := FALSE;
                bDelay := FALSE;
                eHomingState := eAbortHoming;
            END_IF
        END_IF

    eFineDetection: //Detect the Home Reference with low speed (fVelocityFromCam).
        bDelay := TRUE;
        bBusy := TRUE;
        bViaLimitCoarseDetect := FALSE;
        bReversedDirection := FALSE;
        fDetectionVelocity := fVelocityFromCam;
        IF bHomingToLimitSwitch OR bHomingToHomeSensor THEN
            fSetHomePosition := Axis.NcToPlc.ActPos;
            IF bFineDetectionDone THEN
                bFineDetectionDone := FALSE;
                eHomingState := eSetPos;
            END_IF
        ELSE
            fSetHomePosition := fHomePosition;
            IF bFineDetectionDone THEN
                bFineDetectionDone := FALSE;
                eHomingState := eFinishHoming;
            END_IF
        END_IF

        IF fbTimerOnDelay.Q THEN
            bLocalHomingFB_Execute := TRUE;
            bBusy := bLocalHomingFB_Busy;
            IF bHomingToLimitSwitch OR bHomingToHomeSensor THEN
                IF bRisingEdgeDetectionOn AND fbHWHomeSignalRTrig.Q THEN
                    fRisingEdgePosition := Axis.NcToPlc.ActPos; //Read positon when Rising Edge of the home reference (Sensor/Limit)
                    fHomeRefPosition := fRisingEdgePosition;
                ELSIF bFallingEdgeDetectionOn AND fbHWHomeSignalFTrig.Q THEN
                    fFallingEdgePosition := Axis.NcToPlc.ActPos; //Read positon when Falling Edge of the home reference (Sensor/Limit)
                    fHomeRefPosition := fFallingEdgePosition;
                END_IF
            END_IF
            IF NOT bLocalHomingFB_Busy AND bLocalHomingFB_Done THEN
                fActPosition_Done := Axis.NcToPlc.ActPos;
                bLocalHomingFB_Execute := FALSE;
                bDelay := FALSE;
                bFineDetectionDone := TRUE;
            ELSIF NOT bLocalHomingFB_Busy AND (bLocalHomingFB_Error OR bLocalHomingFB_CommandAborted) THEN
                bLocalHomingFB_Execute := FALSE;
                bDelay := FALSE;
                eHomingState := eAbortHoming;
            END_IF
        END_IF

    eSetPos:
        fbSetPos.Execute := TRUE;
        IF NOT fbSetPos.Busy AND fbSetPos.Done THEN
            fbSetPos.Execute := FALSE;
            eHomingState := eFinishHoming;
        ELSIF NOT fbSetPos.Busy AND fbSetPos.Error THEN
            fbSetPos.Execute := FALSE;
            eHomingState := eAbortHoming;
        END_IF

    eFinishHoming:
        fbFinishHoming.Execute := TRUE;
        IF NOT fbFinishHoming.Busy AND fbFinishHoming.Done THEN
            fbFinishHoming.Execute := FALSE;
            bDelay := FALSE;
            eHomingState := eWaitForRequest;
            bBusy := fbFinishHoming.Busy;
        ELSIF NOT fbFinishHoming.Busy AND (fbFinishHoming.Error OR fbFinishHoming.CommandAborted) THEN
            fbFinishHoming.Execute := FALSE;
            bDelay := FALSE;
            eHomingState := eAbortHoming;
        END_IF

    eAbortHoming:
        fbAbortHoming.Execute := TRUE;
        bError := bLocalHomingFB_Error;
        nErrorID := nLocalHomingFB_ErrorID;
        IF NOT fbAbortHoming.Busy AND fbAbortHoming.Done THEN
            bCommandAborted := TRUE;
            fbAbortHoming.Execute := FALSE;
            bFineDetectionDone := FALSE;
            bDelay := FALSE;
            eHomingState := eWaitForRequest;
            bBusy := fbAbortHoming.Busy;
        ELSIF NOT fbAbortHoming.Busy AND fbAbortHoming.Error THEN
            bError := fbAbortHoming.Error;
            nErrorID := fbAbortHoming.ErrorID;
            fbAbortHoming.Execute := FALSE;
            bFineDetectionDone := FALSE;
            bDelay := FALSE;
            eHomingState := eWaitForRequest;
        END_IF
 END_CASE

]]></ST>
    </Implementation>
    <Action Name="actHomeDirect" Id="{29103e93-4f6a-001d-162a-15d735c384e0}">
      <Implementation>
        <ST><![CDATA[bTwoSpeedHoming := FALSE;

fbHomeDirect(
    Axis := Axis,
    Parameter := stHomingParameter,
    Execute := bLocalHomingFB_Execute,
    SetPosition := fSetHomePosition,
    Done => bLocalHomingFB_Done,
    Busy => bLocalHomingFB_Busy,
    CommandAborted => bLocalHomingFB_CommandAborted,
    Error => bLocalHomingFB_Error,
    ErrorID => nLocalHomingFB_ErrorID);
]]></ST>
      </Implementation>
    </Action>
    <Action Name="actHomeToBlock" Id="{84502fb1-1846-027d-3fd0-d28d252528b8}">
      <Implementation>
        <ST><![CDATA[CASE eHomeSeq OF
    E_HomingRoutines.eHomeToBlock_Bwd:
        stDetectDirection := mcNegativeDirection;
    E_HomingRoutines.eHomeToBlock_Fwd:
        stDetectDirection := mcPositiveDirection;
END_CASE

bTwoSpeedHoming := FALSE;

fbStepBlockLag(
    Axis := Axis,
    Execute := bLocalHomingFB_Execute,
    Parameter := stHomingParameter,
    Direction := stDetectDirection,
    Velocity := fDetectionVelocity, //Maximum travel velocity (>0).
    DetectionVelocityLimit := stConfig.stHomingConfig.fDetectionVelocityLimit, //Velocity that must be fallen below for the time DetectionVelocityTime in order to detect driving against the fixed stop.
    DetectionVelocityTime := stConfig.stHomingConfig.tDetectionVelocityTime, //Time for detecting the velocity undershoot when driving against the fixed stop.
    TimeLimit :=  stConfig.stHomingConfig.tTimeLimit, //Exceeding this time leads to the search procedure being aborted.
    DistanceLimit := stConfig.stHomingConfig.fDistanceLimit, //Exceeding this distance in relation to the start position leads to the search procedure being aborted.
    TorqueLimit := stConfig.stHomingConfig.fTorqueLimit, //The motor torque is limited to this value (percentage of configured channel peak torque), in relation to the weight counterbalance that is possibly parameterized in the drive, in order to avoid mechanical damage.
    LagLimit := stConfig.stHomingConfig.fLagLimit, //Position lag value which, if exceeded, leads to detection of driving against the fixed stop.
    SetPosition:= fSetHomePosition,
    Options := stOptions3,
    Done => bLocalHomingFB_Done,
    Busy => bLocalHomingFB_Busy,
    CommandAborted => bLocalHomingFB_CommandAborted,
    Error => bLocalHomingFB_Error,
    ErrorID => nLocalHomingFB_ErrorID);

]]></ST>
      </Implementation>
    </Action>
    <Action Name="actHomeToEncPulse" Id="{b3952ebf-3315-0245-216a-e98995622eb5}">
      <Implementation>
        <ST><![CDATA[CASE eHomeSeq OF
    E_HomingRoutines.eHomeToEncPulse_Fwd:
        stDetectDirection := mcPositiveDirection;
        bTwoSpeedHoming := FALSE;
    E_HomingRoutines.eHomeToEncPulse_Bwd:
        stDetectDirection := mcNegativeDirection;
        bTwoSpeedHoming := FALSE;
    E_HomingRoutines.eHomeToEncPulse_viaFwdLimit:
        stDetectLimitDirection := mcPositiveDirection;
        stDetectDirection := mcNegativeDirection;
        bHWSignalForHoming := NOT(bLimitFwd);
        bTwoSpeedHoming := TRUE;
    E_HomingRoutines.eHomeToEncPulse_viaBwdLimit:
        stDetectLimitDirection := mcNegativeDirection;
        stDetectDirection := mcPositiveDirection;
        bHWSignalForHoming := NOT(bLimitBwd);
        bTwoSpeedHoming := TRUE;
END_CASE

IF bViaLimitCoarseDetect AND bTwoSpeedHoming THEN
   fbStepLimitSwitch.Options.DisableDriveAccess := stOptions.DisableDriveAccess;
   fbStepLimitSwitch(
        Axis := Axis,
        Execute := bLocalHomingFB_Execute,
        Parameter := stHomingParameter,
        Direction := stDetectLimitDirection,
        LimitSwitchMode := stConfig.stHomingConfig.eLimitSwitchMode,
        LimitSwitchSignal := stLimitSwitchSignal,
        Velocity := fDetectionVelocity,
        Acceleration := fDetectionAcceleration,
        Deceleration := fDetectionDeceleration,
        SetPosition := fSetHomePosition, //This fSetPosition is not used to set the Home position. Needs to be there so FB works correctly.
        Options := stOptions,
        Done => bLocalHomingFB_Done,
        Busy => bLocalHomingFB_Busy,
        CommandAborted => bLocalHomingFB_CommandAborted,
        Error => bLocalHomingFB_Error,
        ErrorID => nLocalHomingFB_ErrorID);

ELSIF NOT bViaLimitCoarseDetect THEN
    fbStepReferencePulse.Options.DisableDriveAccess := stOptions.DisableDriveAccess;
    fbStepReferencePulse(
        Axis := Axis,
        Execute := bLocalHomingFB_Execute,
        Parameter := stHomingParameter,
        Direction := stDetectDirection,
        ReferenceSignal := stEncPulseSignal,
        Velocity := fDetectionVelocity,
        Options := stOptions,
        SetPosition := fSetHomePosition,
        Done => bLocalHomingFB_Done,
        Busy => bLocalHomingFB_Busy,
        CommandAborted => bLocalHomingFB_CommandAborted,
        Error => bLocalHomingFB_Error,
        ErrorID => nLocalHomingFB_ErrorID);
END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="actHomeToLimit" Id="{c37ff63b-7bb9-08c6-066e-3b41216a018d}">
      <Implementation>
        <ST><![CDATA[CASE eHomeSeq OF
    E_HomingRoutines.eHomeToLimit_Fwd:
    stDetectDirection:= mcPositiveDirection;
    bHWSignalForHoming := NOT(bLimitFwd); //The hardware signal is the Fwd Limit switch

    E_HomingRoutines.eHomeToLimit_Bwd:
    stDetectDirection:= mcNegativeDirection;
    bHWSignalForHoming := NOT(bLimitBwd); //The hardware signal is the Bwd Limit switch
END_CASE

bTwoSpeedHoming := TRUE;
bHomingToLimitSwitch := TRUE;

IF stConfig.stHomingConfig.eLimitSwitchMode = mcRisingEdge THEN
    bRisingEdgeDetectionOn := TRUE;
    bFallingEdgeDetectionOn := FALSE;
ELSIF stConfig.stHomingConfig.eLimitSwitchMode = mcFallingEdge THEN
    bRisingEdgeDetectionOn := FALSE;
    bFallingEdgeDetectionOn := TRUE;
END_IF

fbStepLimitSwitch.Options.DisableDriveAccess := stOptions.DisableDriveAccess;
fbStepLimitSwitch(
    Axis := Axis,
    Execute := bLocalHomingFB_Execute,
    Parameter := stHomingParameter,
    Direction := stDetectDirection,
    LimitSwitchMode := stConfig.stHomingConfig.eLimitSwitchMode,
    LimitSwitchSignal := stLimitSwitchSignal,
    Velocity := fDetectionVelocity,
    Acceleration := fDetectionAcceleration,
    Deceleration := fDetectionDeceleration,
    SetPosition := fSetHomePosition,
    Options := stOptions,
    Done => bLocalHomingFB_Done,
    Busy => bLocalHomingFB_Busy,
    CommandAborted => bLocalHomingFB_CommandAborted,
    Error => bLocalHomingFB_Error,
    ErrorID => nLocalHomingFB_ErrorID);
]]></ST>
      </Implementation>
    </Action>
    <Action Name="actHomeToSensor" Id="{e1621164-1a3d-0869-07bd-f8d9f952fe05}">
      <Implementation>
        <ST><![CDATA[CASE eHomeSeq OF
    E_HomingRoutines.eHomeToRef_Fwd:
    IF NOT bReversedDirection THEN
        stDetectDirection := mcPositiveDirection;
    ELSE
        stDetectDirection := mcNegativeDirection;
    END_IF

    E_HomingRoutines.eHomeToRef_Bwd:
    IF NOT bReversedDirection THEN
        stDetectDirection := mcNegativeDirection;
    ELSE
        stDetectDirection := mcPositiveDirection;
    END_IF
END_CASE

bHWSignalForHoming := bHomeSensor; //Hardware home sensor (Reference siganl for homing)
bTwoSpeedHoming := TRUE;
bHomingToHomeSensor := TRUE;

IF stConfig.stHomingConfig.eRefSwitchMode = mcRisingEdge THEN
    bRisingEdgeDetectionOn := TRUE;
    bFallingEdgeDetectionOn := FALSE;
    eRefSwitchModeReversed := mcFallingEdge;
ELSIF stConfig.stHomingConfig.eRefSwitchMode = mcFallingEdge THEN
    bRisingEdgeDetectionOn := FALSE;
    bFallingEdgeDetectionOn := TRUE;
    eRefSwitchModeReversed := mcRisingEdge;
END_IF

IF NOT bReversedDirection THEN
    fbStepAbsoluteSwitch.SwitchMode := stConfig.stHomingConfig.eRefSwitchMode;
ELSE
    fbStepAbsoluteSwitch.SwitchMode := eRefSwitchModeReversed;
END_IF




fbStepAbsoluteSwitch(
    Axis := Axis,
    Execute := bLocalHomingFB_Execute,
    Parameter := stHomingParameter,
    Direction := stDetectDirection,
    ReferenceSignal := stRefSwitchSignal,
    Velocity := fDetectionVelocity,
    Acceleration := fDetectionAcceleration,
    Deceleration := fDetectionDeceleration,
    SetPosition := fSetHomePosition,
    PositiveLimitSwitch := NOT(bLimitFwd),
    NegativeLimitSwitch := NOT(bLimitBwd),
    Options := stOptions,
    Done => bLocalHomingFB_Done,
    Busy => bLocalHomingFB_Busy,
    CommandAborted => bLocalHomingFB_CommandAborted,
    Error => bLocalHomingFB_Error,
    ErrorID => nLocalHomingFB_ErrorID);
]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>