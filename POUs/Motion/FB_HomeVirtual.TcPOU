<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.6">
  <POU Name="FB_HomeVirtual" Id="{a69b16ef-d088-4494-bcb3-4c391e3a9c2d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_HomeVirtual
VAR_INPUT
	En: BOOL;
	bReset: BOOL;
	bExecute: BOOL;
	nCmdData: UINT;
	bLimitFwd: BOOL;
	bLimitBwd: BOOL;	
	bHomeSensor: BOOL;	
	fHomePosition:LREAL;
	nHomeRevOffset: UINT;
END_VAR
VAR_IN_OUT
	Axis: AXIS_REF;
END_VAR
VAR_OUTPUT
	EnO: BOOL;	
	bBusy: BOOL;
	bDone: BOOL;
	bHomed:BOOL;
	bError: BOOL;
	nErrorId: UDINT;
END_VAR
VAR
	fbHomeToSwitch: FB_HomeToSwitch;
    fbHomeDirect: FB_HomeDirect; //Only used for direct homing (set of position)	
	fbExecuteRiseEdge: R_TRIG;
	fbExecuteFallEdge: F_TRIG;
	nHomingState:INT:=0;
	bExecuteHomeToSwitch:BOOL:=FALSE;
	bSequenceReady:BOOL:=TRUE;
	fVelocityToCamNC: LREAL;
	fVelocityFromCamNC: LREAL;
	fbHomeReadNCVelocities: FB_HomeReadNcVelocities;
	fbHomeRestoreNCVelocities: FB_HomeWriteNcVelocities;
	bExecuteReadNCVelocities: BOOL:=FALSE;
	bExecuteRestoreNCVelocities: BOOL:=FALSE;
	bNCVelocitiesReadOnce:BOOL:=FALSE;
	bRestoreNCVelocitiesDone: BOOL:=FALSE;
	bExecuteHomeDirect: BOOL;
	bNCVelocitiesCorrupted:BOOL:=FALSE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[EnO:=En;

IF bReset THEN	
	bError:=FALSE;
	nErrorId:=0;
END_IF

// Reset when bExecute is low
IF NOT bExecute THEN
  nHomingState:=0;
  bSequenceReady:=TRUE;
  bExecuteHomeToSwitch:=FALSE;
  bExecuteHomeDirect:=FALSE;
END_IF

//Start preparation of NC if rising edge on bExecute
fbExecuteRiseEdge(CLK:=bExecute);
IF fbExecuteRiseEdge.Q THEN
  bRestoreNCVelocitiesDone:=FALSE;
  bNCVelocitiesCorrupted:=FALSE;
  bSequenceReady:=FALSE;
  bExecuteReadNCVelocities:=NOT(nCmdData=15);  // Not needed for sequence 15 (set position only, no movement))
  bExecuteRestoreNCVelocities:=FALSE;
  //Check if valid nCmdData
  CASE nCmdData OF  	
    1:
    2:
    3:
    4:
    15:
    ELSE	
     bError:=TRUE;
     nErrorId:=16#4FFF;   
  END_CASE
END_IF

// Read NC homing velocities at bExecute rising edge
fbHomeReadNCVelocities(
  En:=En,
  bExecute:=bExecuteReadNCVelocities,
  bReset:=bReset,
  Axis:=Axis,
);

IF fbHomeReadNCVelocities.bDone THEN
  	fVelocityFromCamNC:=fbHomeReadNCVelocities.fVelocityFromCam;
    fVelocityToCamNC:=fbHomeReadNCVelocities.fVelocityToCam;
	bNCVelocitiesReadOnce:=TRUE;  //Allow write back of homing velocities
	bExecuteReadNCVelocities:=FALSE;
END_IF

//Homing Sequences
CASE nCmdData OF  
	
   1:  // Home to low limit switch
      fbHomeToSwitch.bSearchDirTwoardsCam:=0;
      fbHomeToSwitch.bSearchDirOffCam:=1;	 
      fbHomeToSwitch.bCamSensor:=NOT bLimitBwd;	  
	  fbHomeToSwitch.fVelocityToCamNC:=fVelocityToCamNC; // High speed
  	  fbHomeToSwitch.fVelocityFromCamNC:=fVelocityFromCamNC;  // Low speed
	  bHomed:=Axis.Status.Homed;
      // Wait for read of velocities from NC
	  IF fbHomeReadNCVelocities.bDone THEN
	    bExecuteHomeToSwitch:=bExecute;  // Execute MC_HOME		  
	  END_IF
	  IF fbHomeToSwitch.bDone THEN
	    bSequenceReady:=TRUE;
	  END_IF;	  
	  
   2:  // Home to high limit switch
      fbHomeToSwitch.bSearchDirTwoardsCam:=1;
      fbHomeToSwitch.bSearchDirOffCam:=0;	 
      fbHomeToSwitch.bCamSensor:=NOT bLimitFwd;  
	  fbHomeToSwitch.fVelocityToCamNC:=fVelocityToCamNC; // High speed
  	  fbHomeToSwitch.fVelocityFromCamNC:=fVelocityFromCamNC;  // Low speed	  
	  bHomed:=Axis.Status.Homed;
	  IF fbHomeReadNCVelocities.bDone THEN
	    bExecuteHomeToSwitch:=bExecute;  // Execute MC_HOME		  
	  END_IF
	  IF fbHomeToSwitch.bDone THEN
	    bSequenceReady:=TRUE;
	  END_IF;	
	  
   3:  // Home on bHomeSensor via bLimitBwd
      CASE nHomingState OF
		  0:
		    bHomed:=Axis.Status.Homed;
			IF fbHomeReadNCVelocities.bDone THEN
		      IF bLimitBwd THEN
			    nHomingState:=1;
			  ELSE  //Standing on limit switch go directlly to state 2
			    nHomingState:=2;
			  END_IF
            END_IF		  
		  1:  // Home to bLimitBwd switch
            bHomed:=FALSE;		  
		    fbHomeToSwitch.bSearchDirTwoardsCam:=0;
      		fbHomeToSwitch.bSearchDirOffCam:=1;	 
      		fbHomeToSwitch.bCamSensor:=NOT bLimitBwd;
            fbHomeToSwitch.fVelocityToCamNC:=fVelocityToCamNC; //High speed            
            fbHomeToSwitch.fVelocityFromCamNC:=fVelocityToCamNC; //High speed	 
            bNCVelocitiesCorrupted:=TRUE; //Only high speed since accurate homing is in next state (needs restore if sequence is interrupted)       
		    bExecuteHomeToSwitch:=bExecute;
			bSequenceReady:=FALSE;
			bHomed:=FALSE;	
			IF fbHomeToSwitch.bDone THEN
				nHomingState:=2;
				bExecuteHomeToSwitch:=FALSE;
			END_IF
		  2: // Home to bHomeSensor switch
		    bHomed:=FALSE;
		    fbHomeToSwitch.bSearchDirTwoardsCam:=1;
      		fbHomeToSwitch.bSearchDirOffCam:=1;	 
      		fbHomeToSwitch.bCamSensor:=bHomeSensor;
            fbHomeToSwitch.fVelocityToCamNC:=fVelocityToCamNC; // High speed
  	        fbHomeToSwitch.fVelocityFromCamNC:=fVelocityFromCamNC;  // Low speed	  
		    bExecuteHomeToSwitch:=bExecute;
			bSequenceReady:=FALSE;
			bHomed:=FALSE;
            IF fbHomeToSwitch.bDone THEN
				bNCVelocitiesCorrupted:=FALSE;  //Corerct velocities in NC
				nHomingState:=0;
				bExecuteHomeToSwitch:=FALSE;
				bHomed:=Axis.Status.Homed;
				bSequenceReady:=TRUE;	
            END_IF
	  END_CASE	  
   4: // Home on bHomeSensor via bLimitFwd
       CASE nHomingState OF		   
		  0:
		    bHomed:=Axis.Status.Homed;
		   IF fbHomeReadNCVelocities.bDone THEN  // Wait for read of velocities
		      IF bLimitFwd THEN
			    nHomingState:=1;
			  ELSE  //Standing on limit switch go directlly to state 2
			    nHomingState:=2;
			  END_IF
            END_IF		  
		  1:  // Home to bLimitFwd switch
		    bHomed:=FALSE;
		    fbHomeToSwitch.bSearchDirTwoardsCam:=1;
      		fbHomeToSwitch.bSearchDirOffCam:=0;	 
      		fbHomeToSwitch.bCamSensor:=NOT bLimitFwd;
		    fbHomeToSwitch.fVelocityToCamNC:=fVelocityToCamNC; //High speed
            fbHomeToSwitch.fVelocityFromCamNC:=fVelocityToCamNC; //High speed
			bNCVelocitiesCorrupted:=TRUE; //Only high speed since accurate homing is in next state (needs restore if sequence is interrupted)
		    bExecuteHomeToSwitch:=bExecute;
			bSequenceReady:=FALSE;
			bHomed:=FALSE;
			IF fbHomeToSwitch.bDone THEN
				nHomingState:=2;
				bExecuteHomeToSwitch:=FALSE;
			END_IF
		  2: // Home to bHomeSensor switch
		    bHomed:=FALSE;
		    fbHomeToSwitch.bSearchDirTwoardsCam:=0;
      		fbHomeToSwitch.bSearchDirOffCam:=0;	 
      		fbHomeToSwitch.bCamSensor:=bHomeSensor;
            fbHomeToSwitch.fVelocityToCamNC:=fVelocityToCamNC; // High speed
  	        fbHomeToSwitch.fVelocityFromCamNC:=fVelocityFromCamNC;  // Low speed	  
		    bExecuteHomeToSwitch:=bExecute;	
			bSequenceReady:=FALSE;
			bHomed:=FALSE;
            IF fbHomeToSwitch.bDone THEN  //Homing ready
				bNCVelocitiesCorrupted:=FALSE;  //Corerct velocities in NC
				nHomingState:=0;
				bExecuteHomeToSwitch:=FALSE;
				bHomed:=Axis.Status.Homed;
                bSequenceReady:=TRUE;	
            END_IF
	  END_CASE	  
	  
   15: //Set current position (simplest homing sequence)
     bExecuteHomeDirect:=bExecute;
	 bHomed:=Axis.Status.Homed;
     IF fbHomeDirect.bDone THEN  //Homing ready				
	   bExecuteHomeDirect:=FALSE;				
       bSequenceReady:=TRUE;	
     END_IF
	 bNCVelocitiesCorrupted:=FALSE; // no changes of NC velocities (no restore needed)
	 
ELSE
  fbHomeToSwitch.bCamSensor:=FALSE;
  bHomed:=Axis.Status.Homed;
END_CASE;

fbHomeToSwitch(
	bExecute:=bExecuteHomeToSwitch AND bExecute AND NOT bError,
 	bReset:=bReset,
	fHomePosition:=fHomePosition,
	Axis:=Axis
);

// No sequence, just set position value
fbHomeDirect(
	bExecute:=bExecuteHomeDirect AND bExecute AND NOT bError,
 	bReset:=bReset,
	fHomePosition:=fHomePosition,
	Axis:=Axis
);

// Restore NC homing velocities at bExecute falling edge or at finished homing sequence (if sequence is aborted during motion)
fbExecuteFallEdge(CLK:=bExecute);
IF fbExecuteFallEdge.Q THEN
  IF NOT bRestoreNCVelocitiesDone THEN //Ensure that velocities are read atleast once before restore
    bExecuteRestoreNCVelocities:=TRUE;
  END_IF
  bExecuteReadNCVelocities:=FALSE;	
END_IF

// Only restore NC home velocities if the velocities have been successfully read (bNCVelocitiesReadOnce) and are corrupted (bNCVelocitiesCorrupted).
// The velocities should only be corrupted if a homing sequence is interrupted  by a falling edge on bExecute and in that case a restore is needed.
fbHomeRestoreNCVelocities(
  En:=En,
  bExecute:=bNCVelocitiesReadOnce AND bNCVelocitiesCorrupted AND (bExecuteRestoreNCVelocities OR (bSequenceReady AND bExecute)),
  bReset:=bReset,
  fVelocityFromCam:=fVelocityFromCamNC,
  fVelocityToCam:=fVelocityToCamNC,
  Axis:=Axis);
  
IF fbHomeRestoreNCVelocities.bDone THEN
  bExecuteRestoreNCVelocities:=FALSE;
  bRestoreNCVelocitiesDone:=TRUE;
END_IF

// Error handling
IF NOT bError THEN
  IF fbHomeToSwitch.bError THEN 
	bError:=fbHomeToSwitch.bError;
	nErrorId:=fbHomeToSwitch.nErrorId;
  ELSIF fbHomeReadNCVelocities.bError THEN
	bError:=fbHomeReadNCVelocities.bError;
	nErrorId:=fbHomeReadNCVelocities.nErrorId;
  ELSIF fbHomeRestoreNCVelocities.bError THEN
	bError:=fbHomeRestoreNCVelocities.bError;
	nErrorId:=fbHomeRestoreNCVelocities.nErrorId;
  ELSIF fbHomeDirect.bError THEN
	bError:=fbHomeDirect.bError;
	nErrorId:=fbHomeDirect.nErrorId;    		
  END_IF;	
END_IF

// Done and busy bit
bDone:=bSequenceReady AND bExecute AND (fbHomeRestoreNCVelocities.bDone OR NOT bNCVelocitiesCorrupted);
bBusy:=NOT bSequenceReady OR fbHomeRestoreNCVelocities.bBusy;	 

RETURN;]]></ST>
    </Implementation>
    <LineIds Name="FB_HomeVirtual">
      <LineId Id="9" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="181" Count="1" />
      <LineId Id="95" Count="0" />
      <LineId Id="505" Count="3" />
      <LineId Id="573" Count="0" />
      <LineId Id="665" Count="1" />
      <LineId Id="509" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="595" Count="0" />
      <LineId Id="625" Count="0" />
      <LineId Id="549" Count="0" />
      <LineId Id="460" Count="0" />
      <LineId Id="492" Count="0" />
      <LineId Id="646" Count="0" />
      <LineId Id="648" Count="0" />
      <LineId Id="647" Count="0" />
      <LineId Id="651" Count="4" />
      <LineId Id="658" Count="1" />
      <LineId Id="650" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="485" Count="0" />
      <LineId Id="438" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="445" Count="0" />
      <LineId Id="440" Count="2" />
      <LineId Id="439" Count="0" />
      <LineId Id="495" Count="4" />
      <LineId Id="543" Count="0" />
      <LineId Id="500" Count="0" />
      <LineId Id="535" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="431" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="269" Count="1" />
      <LineId Id="140" Count="0" />
      <LineId Id="564" Count="0" />
      <LineId Id="561" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="464" Count="3" />
      <LineId Id="516" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="517" Count="1" />
      <LineId Id="142" Count="0" />
      <LineId Id="271" Count="1" />
      <LineId Id="148" Count="0" />
      <LineId Id="563" Count="0" />
      <LineId Id="553" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="471" Count="1" />
      <LineId Id="470" Count="0" />
      <LineId Id="520" Count="1" />
      <LineId Id="519" Count="0" />
      <LineId Id="633" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="359" Count="0" />
      <LineId Id="378" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="361" Count="1" />
      <LineId Id="364" Count="1" />
      <LineId Id="363" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="379" Count="0" />
      <LineId Id="287" Count="1" />
      <LineId Id="286" Count="0" />
      <LineId Id="556" Count="0" />
      <LineId Id="565" Count="0" />
      <LineId Id="634" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="289" Count="1" />
      <LineId Id="292" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="380" Count="0" />
      <LineId Id="294" Count="2" />
      <LineId Id="571" Count="1" />
      <LineId Id="297" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="635" Count="0" />
      <LineId Id="333" Count="1" />
      <LineId Id="377" Count="0" />
      <LineId Id="392" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="306" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="376" Count="0" />
      <LineId Id="385" Count="5" />
      <LineId Id="374" Count="0" />
      <LineId Id="368" Count="0" />
      <LineId Id="381" Count="0" />
      <LineId Id="308" Count="2" />
      <LineId Id="566" Count="0" />
      <LineId Id="559" Count="0" />
      <LineId Id="637" Count="0" />
      <LineId Id="311" Count="1" />
      <LineId Id="355" Count="0" />
      <LineId Id="313" Count="4" />
      <LineId Id="382" Count="0" />
      <LineId Id="318" Count="2" />
      <LineId Id="568" Count="1" />
      <LineId Id="321" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="636" Count="0" />
      <LineId Id="340" Count="1" />
      <LineId Id="375" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="342" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="630" Count="0" />
      <LineId Id="602" Count="0" />
      <LineId Id="605" Count="0" />
      <LineId Id="623" Count="0" />
      <LineId Id="618" Count="0" />
      <LineId Id="620" Count="0" />
      <LineId Id="622" Count="0" />
      <LineId Id="604" Count="0" />
      <LineId Id="631" Count="0" />
      <LineId Id="645" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="477" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="151" Count="4" />
      <LineId Id="667" Count="0" />
      <LineId Id="609" Count="0" />
      <LineId Id="608" Count="0" />
      <LineId Id="611" Count="2" />
      <LineId Id="610" Count="0" />
      <LineId Id="614" Count="0" />
      <LineId Id="574" Count="2" />
      <LineId Id="661" Count="0" />
      <LineId Id="664" Count="0" />
      <LineId Id="578" Count="0" />
      <LineId Id="598" Count="0" />
      <LineId Id="579" Count="1" />
      <LineId Id="632" Count="0" />
      <LineId Id="581" Count="0" />
      <LineId Id="638" Count="0" />
      <LineId Id="582" Count="9" />
      <LineId Id="594" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="592" Count="0" />
      <LineId Id="171" Count="1" />
      <LineId Id="524" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="526" Count="0" />
      <LineId Id="528" Count="4" />
      <LineId Id="642" Count="2" />
      <LineId Id="522" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="538" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="540" Count="1" />
      <LineId Id="670" Count="0" />
      <LineId Id="539" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>