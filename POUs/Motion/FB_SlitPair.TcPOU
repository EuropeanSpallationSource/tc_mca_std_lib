<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.5">
  <POU Name="FB_SlitPair" Id="{1223aca9-e4c9-4d31-9356-dca9871f7373}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SlitPair
VAR_INPUT
	iBladeNegative : UINT; //Axis ID for negatively positioned blade
	iBladePositive : UINT; //Axis ID for positively positioned blade
	iGapSize : UINT; //Axis ID for the size of gap between slit blades
	iGapCentre : UINT; //Axis ID for the centre position of the gap formed by slit blades
	bEnable : BOOL;	//Enable/Disable the slit set
	bReset : BOOL;	
	fEncoderScaling : LREAL:=10000; //default scaling denominator of 10000
END_VAR
VAR_OUTPUT
	bEnabled : BOOL; //Enabled status of function
	bBusy : BOOL;
	bError : BOOL;
	bHoming : BOOL := FALSE; //TRUE if function is homing axes
	
END_VAR
VAR
	iState : INT := 0; //statemachine index
	bAxesEnabled : BOOL:= FALSE;
	bBladesHomed : BOOL:= FALSE;
	bGapHomed : BOOL:= FALSE;
	bBladesCoupled : BOOL:= FALSE;
	bBladesNotCoupled : BOOL := FALSE;
	bAnyErrors : BOOL := FALSE;
	
	fGapSizePosition : LREAL;
	iGapSizePosition AT %Q* : UDINT := 0;
	fGapCentrePosition : LREAL;
	iGapCentrePosition AT %Q* : UDINT := 0;
	
	resetCounterTimeout : UINT :=0;

	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* NOTES
	Issue with posSync may be due to the axes finishing home but still moving as they're geared in.
	Would need to introduce a delay (or monitor not moving).
	The old method of just sending a command to the slave axis no longer works. This used to gear it out but now it stays locked.
	I may need to add some "memory" to the system so it can retain a user command to a slaved axis, gear out, do the command, then gear back in.
	Sending HOME to virtual axis will break.

*)
GVL.astAxes[iGapSize].stConfig.eHomeSeq:=E_HomingRoutines.eHomeDirect;
GVL.astAxes[iGapCentre].stConfig.eHomeSeq:=E_HomingRoutines.eHomeDirect;

actErrorHandling();
actGapLimits();

checkBladesHomed(bHomeStatus=>bBladesHomed); //check blade calibration flags
checkGapHomed(bHomeStatus=>bGapHomed); //check gap calibration flags
checkBladesCoupled(bCoupledStatus=>bBladesCoupled);
checkBladesNotCoupled(bNotCoupledStatus=>bBladesNotCoupled);
anyErrors(axisErrors=> bAnyErrors);

fGapSizePosition:= GVL.astAxes[iBladePositive].stStatus.fActPosition - GVL.astAxes[iBladeNegative].stStatus.fActPosition;
fGapCentrePosition:= (GVL.astAxes[iBladePositive].stStatus.fActPosition + GVL.astAxes[iBladeNegative].stStatus.fActPosition)/2;
IF bBladesHomed THEN
	IF ABS(fGapSizePosition)<10000 THEN
		iGapSizePosition:= LREAL_TO_UDINT(fGapSizePosition*fEncoderScaling);
	END_IF
	IF ABS(fGapCentrePosition)<10000 THEN
		iGapCentrePosition:= LREAL_TO_UDINT(fGapCentrePosition*fEncoderScaling);
	END_IF
END_IF

CASE iState OF
	0: //Do nothing unless all axes enabled		
		IF bAxesEnabled THEN
			iState:=1;
		END_IF
	1: //Clear amy residual gearing
		actClearSlitGearing();
		iState:=2;
	2: //Check gearing cleared
		IF bBladesNotCoupled THEN
			iState:=10;
		END_IF
		
	10: //Homing status
		IF bBladesHomed THEN
			iState:=13; //Skip to functioning
		ELSE
			iState:=11;	//Homing first
		END_IF
	11: //Home blade axes
		GVL.astAxes[iBladeNegative].stControl.eCommand:=E_MotionFunctions.eHome;
		GVL.astAxes[iBladePositive].stControl.eCommand:=E_MotionFunctions.eHome;
		GVL.astAxes[iBladeNegative].stControl.bExecute:=TRUE;
		GVL.astAxes[iBladePositive].stControl.bExecute:=TRUE;
				bHoming:= TRUE;
		iState:=12;
		
	12: //Wait for blade homing completion
		IF bBladesHomed THEN
			iState:=13;
			bHoming:= FALSE;
		END_IF
	
	13: //"Home" the virtual axes
		GVL.astAxes[iGapSize].stConfig.eHomeSeq:= E_HomingRoutines.eHomeDirect;
		GVL.astAxes[iGapCentre].stConfig.eHomeSeq:= E_HomingRoutines.eHomeDirect;
		GVL.astAxes[iGapSize].stConfig.fHomePosition:= fGapSizePosition;
		GVL.astAxes[iGapCentre].stConfig.fHomePosition:= fGapCentrePosition;
		GVL.astAxes[iGapSize].stControl.eCommand:=E_MotionFunctions.eHome;
		GVL.astAxes[iGapCentre].stControl.eCommand:=E_MotionFunctions.eHome;
		GVL.astAxes[iGapSize].stControl.bExecute:=TRUE;
		GVL.astAxes[iGapCentre].stControl.bExecute:=TRUE;
		iState:=14;
	14: //Wait for virtual homing completion
		IF bGapHomed THEN
			iState:= 20;
		END_IF
		
	20: //Setup gearing
		actSetupSlitGearing();
		iState:=21;
	21: //Wait for gearing complete
		IF bBladesCoupled THEN
			iState:=22;
		END_IF
	
	22: //General operational state. Monitor for if any blades are not geared and not busy, they performed an action and need to be regeared.
		IF NOT bBladesCoupled AND NOT GVL.astAxes[iBladeNegative].stStatus.bBusy AND NOT GVL.astAxes[iBladePositive].stStatus.bBusy THEN
			iState:=23;
		END_IF
	23: //Clear amy residual gearing
		actClearSlitGearing();
		iState:=24;
	24: //Check gearing cleared
		IF bBladesNotCoupled THEN
			iState:=13;	//Back to homing, this ensures the setpoint position of the axis is updated.
		END_IF
			
	999: //ERROR STATE
		resetCounterTimeout:=0;
		bError:=TRUE;
		IF bReset THEN
			iState:= 900;
		END_IF
		
	900: //Try to clear issues
		actClearSlitGearing();
		iState:=901;
	901:
		IF bBladesNotCoupled THEN
			iState:=902;	//Back to homing, this ensures the setpoint position of the axis is updated.
		END_IF
	902: //RESET ALL AXES
		GVL.astAxes[iBladeNegative].stControl.bReset := TRUE;
		GVL.astAxes[iBladePositive].stControl.bReset := TRUE;
		GVL.astAxes[iGapSize].stControl.bReset := TRUE;
		GVL.astAxes[iGapCentre].stControl.bReset := TRUE;
		resetCounterTimeout:= resetCounterTimeout+1;
		iState:=903;
	//903: 
		IF resetCounterTimeout>10 THEN
			iState:=999;
			RETURN;
		END_IF
		IF bAnyErrors THEN
			iState:= 902;
		ELSE
			iState:=0;
			bError:= FALSE;			
		END_IF		
END_CASE
bReset:= FALSE;]]></ST>
    </Implementation>
    <Action Name="actClearSlitGearing" Id="{e01ab92a-20cf-48ae-913a-9b4bc1f3c9a3}">
      <Implementation>
        <ST><![CDATA[GVL.astAxes[iBladeNegative].stControl.eCommand:=E_MotionFunctions.eGearOut;
GVL.astAxes[iBladePositive].stControl.eCommand:=E_MotionFunctions.eGearOut;
GVL.astAxes[iBladeNegative].stControl.bExecute:= TRUE;
GVL.astAxes[iBladePositive].stControl.bExecute:= TRUE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="actErrorHandling" Id="{2d890ec8-2bb8-4662-99bf-f20cfc75f93d}">
      <Implementation>
        <ST><![CDATA[IF iState<800 THEN
	IF (GVL.astAxes[iBladeNegative].stStatus.bError) THEN
		iState:=999;
	END_IF
	IF (GVL.astAxes[iBladePositive].stStatus.bError) THEN
		iState:=999;
	END_IF
	IF (GVL.astAxes[iGapSize].stStatus.bError) THEN
		iState:=999;
	END_IF
	IF (GVL.astAxes[iGapCentre].stStatus.bError) THEN
		iState:=999;
	END_IF
END_IF
	
checkEnabled(bEnableStatus => bAxesEnabled);
IF iState <> 0 AND NOT bAxesEnabled THEN
	iState:= 999;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="actGapLimits" Id="{25d5c061-b303-4e71-ae15-49914f4789a8}">
      <Implementation>
        <ST><![CDATA[//No hardware inputs to virtual axes so set true. Will be controlled by slave axis limits.

GVL.astAxes[iGapSize].stInputs.bLimitBwd:=TRUE;
GVL.astAxes[iGapSize].stInputs.bLimitFwd:=TRUE;
GVL.astAxes[iGapCentre].stInputs.bLimitBwd:=TRUE;
GVL.astAxes[iGapCentre].stInputs.bLimitFwd:=TRUE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="actSetupSlitGearing" Id="{8c35be5d-8704-40d0-99d8-cf48bc76a94c}">
      <Implementation>
        <ST><![CDATA[GVL.astAxes[iBladeNegative].stControl.eCommand:=E_MotionFunctions.eGearInMultiMaster;
GVL.astAxes[iBladeNegative].stConfig.astMultiMasterAxis[1].nIndex := iGapSize;
GVL.astAxes[iBladeNegative].stConfig.astMultiMasterAxis[1].fRatio := -0.5;
GVL.astAxes[iBladeNegative].stConfig.astMultiMasterAxis[2].nIndex := iGapCentre;
GVL.astAxes[iBladeNegative].stConfig.astMultiMasterAxis[2].fRatio := 1;
GVL.astAxes[iBladePositive].stControl.eCommand:=E_MotionFunctions.eGearInMultiMaster;
GVL.astAxes[iBladePositive].stConfig.astMultiMasterAxis[1].nIndex := iGapSize;
GVL.astAxes[iBladePositive].stConfig.astMultiMasterAxis[1].fRatio := 0.5;
GVL.astAxes[iBladePositive].stConfig.astMultiMasterAxis[2].nIndex := iGapCentre;
GVL.astAxes[iBladePositive].stConfig.astMultiMasterAxis[2].fRatio := 1;
GVL.astAxes[iBladeNegative].stControl.bExecute:= TRUE;
GVL.astAxes[iBladePositive].stControl.bExecute:= TRUE;]]></ST>
      </Implementation>
    </Action>
    <Method Name="anyErrors" Id="{c3f4c623-4869-4c97-837f-af64e9be8aeb}">
      <Declaration><![CDATA[METHOD anyErrors : BOOL
VAR_OUTPUT
	axisErrors : BOOL :=FALSE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF GVL.astAxes[iGapSize].stStatus.bError THEN
	axisErrors:=TRUE;
END_IF
IF GVL.astAxes[iGapCentre].stStatus.bError THEN
	axisErrors:=TRUE;
END_IF
IF GVL.astAxes[iBladeNegative].stStatus.bError THEN
	axisErrors:=TRUE;
END_IF
IF GVL.astAxes[iBladePositive].stStatus.bError THEN
	axisErrors:=TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkBladesCoupled" Id="{b67c9216-9a28-4bc7-afbb-4bdb360ee51b}">
      <Declaration><![CDATA[METHOD checkBladesCoupled : BOOL
VAR_OUTPUT
	bCoupledStatus : BOOL:= TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT GVL.astAxes[iBladeNegative].stStatus.bGeared THEN
	bCoupledStatus := FALSE;
END_IF
IF NOT GVL.astAxes[iBladePositive].stStatus.bGeared THEN
	bCoupledStatus := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkBladesHomed" Id="{7ae32968-8cc1-44db-8a5f-f24d48501289}">
      <Declaration><![CDATA[METHOD checkBladesHomed: BOOL
VAR_INPUT
END_VAR
VAR_OUTPUT
	bHomeStatus : BOOL:= TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT GVL.astAxes[iBladeNegative].stStatus.bHomed THEN
	bHomeStatus:=FALSE;
END_IF
IF NOT GVL.astAxes[iBladePositive].stStatus.bHomed THEN
	bHomeStatus:=FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkBladesNotCoupled" Id="{395fac39-106a-4583-b85a-5e2978dacde5}">
      <Declaration><![CDATA[METHOD checkBladesNotCoupled : BOOL
VAR_OUTPUT
	bNotCoupledStatus : BOOL:= TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF GVL.astAxes[iBladeNegative].stStatus.bGeared THEN
	bNotCoupledStatus := FALSE;
END_IF
IF GVL.astAxes[iBladePositive].stStatus.bGeared THEN
	bNotCoupledStatus := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkEnabled" Id="{93a74cd7-6e1a-4704-9a10-e4205cfbe435}">
      <Declaration><![CDATA[METHOD checkEnabled : BOOL
VAR_INPUT
END_VAR
VAR_OUTPUT
	bEnableStatus : BOOL:= TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT GVL.astAxes[iBladeNegative].stStatus.bEnabled THEN
	bEnableStatus:=FALSE;
END_IF
IF NOT GVL.astAxes[iBladePositive].stStatus.bEnabled THEN
	bEnableStatus:=FALSE;
END_IF
IF NOT GVL.astAxes[iGapSize].stStatus.bEnabled THEN
	bEnableStatus:=FALSE;
END_IF
IF NOT GVL.astAxes[iGapCentre].stStatus.bEnabled THEN
	bEnableStatus:=FALSE;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="checkGapHomed" Id="{bf6f8458-4b3f-4dc9-a487-cf311d4f41bd}">
      <Declaration><![CDATA[METHOD checkGapHomed : BOOL
VAR_INPUT
END_VAR
VAR_OUTPUT
	bHomeStatus : BOOL:= TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT GVL.astAxes[iGapSize].stStatus.bHomed THEN
	bHomeStatus:=FALSE;
END_IF
IF NOT GVL.astAxes[iGapCentre].stStatus.bHomed THEN
	bHomeStatus:=FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SlitPair">
      <LineId Id="280" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="289" Count="2" />
      <LineId Id="283" Count="0" />
      <LineId Id="281" Count="1" />
      <LineId Id="358" Count="0" />
      <LineId Id="147" Count="5" />
      <LineId Id="219" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="241" Count="1" />
      <LineId Id="240" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="158" Count="4" />
      <LineId Id="213" Count="0" />
      <LineId Id="215" Count="2" />
      <LineId Id="214" Count="0" />
      <LineId Id="220" Count="2" />
      <LineId Id="163" Count="16" />
      <LineId Id="360" Count="0" />
      <LineId Id="180" Count="20" />
      <LineId Id="207" Count="3" />
      <LineId Id="212" Count="0" />
      <LineId Id="347" Count="2" />
      <LineId Id="352" Count="5" />
      <LineId Id="229" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="382" Count="0" />
      <LineId Id="394" Count="0" />
      <LineId Id="203" Count="1" />
      <LineId Id="206" Count="0" />
      <LineId Id="361" Count="2" />
      <LineId Id="365" Count="1" />
      <LineId Id="368" Count="1" />
      <LineId Id="367" Count="0" />
      <LineId Id="370" Count="1" />
      <LineId Id="364" Count="0" />
      <LineId Id="372" Count="1" />
      <LineId Id="381" Count="0" />
      <LineId Id="375" Count="1" />
      <LineId Id="389" Count="1" />
      <LineId Id="392" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="378" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="387" Count="1" />
      <LineId Id="395" Count="0" />
      <LineId Id="386" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="396" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlitPair.actClearSlitGearing">
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlitPair.actErrorHandling">
      <LineId Id="41" Count="0" />
      <LineId Id="2" Count="1" />
      <LineId Id="5" Count="2" />
      <LineId Id="9" Count="2" />
      <LineId Id="13" Count="2" />
      <LineId Id="17" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlitPair.actGapLimits">
      <LineId Id="5" Count="1" />
      <LineId Id="2" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlitPair.actSetupSlitGearing">
      <LineId Id="2" Count="10" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlitPair.anyErrors">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="10" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlitPair.checkBladesCoupled">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="10" Count="1" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlitPair.checkBladesHomed">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="12" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlitPair.checkBladesNotCoupled">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="10" Count="1" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlitPair.checkEnabled">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="12" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlitPair.checkGapHomed">
      <LineId Id="9" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>