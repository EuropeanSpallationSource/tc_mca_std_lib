<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_ESSMonitoringMCU500x" Id="{dc25224c-2805-4e0c-98fe-daa6f852a4e2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ESSMonitoringMCU500x
VAR_INPUT
    nEcMasterNetId: T_AmsNetId;
END_VAR
VAR_OUTPUT
    aErrorID: ARRAY [1..nMaxAlarms] OF INT;
    aErrorMsg: ARRAY [1..nMaxAlarms] OF STRING;
    nEcMasterFramesLost: UDINT;
    nCPULoad: UDINT;
    fCycleExecTime_ms: REAL;
    nAlarmGrpBitNumber: UDINT;
END_VAR
VAR
    //Outputs
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 8 (EL2014)^DIG Outputs^Channel 1^Output'}
    bStatusLED AT %Q*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 7 (EL2014)^DIG Outputs^Channel 4^Output'}
    bAcknowledgeLED AT %Q*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 8 (EL2014)^DIG Outputs^Channel 2^Output'}
    bEStopLED AT %Q*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 8 (EL2014)^DIG Outputs^Channel 3^Output'}
    bEmergencyLED AT %Q*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 8 (EL2014)^DIG Outputs^Channel 4^Output'}
    bAbnormalLED AT %Q*: BOOL;

    //Inputs
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 4 (EL1808)^Channel 1^Input'}
    b24VDC1_OK AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 4 (EL1808)^Channel 2^Input'}
    b24VDC2_OK AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 4 (EL1808)^Channel 3^Input'}
    b24VDC3_OK AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 4 (EL1808)^Channel 4^Input'}
    b48VDC1_OK AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 4 (EL1808)^Channel 5^Input'}
    b48VDC2_OK AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 4 (EL1808)^Channel 6^Input'}
    b48VDC3_OK AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 4 (EL1808)^Channel 7^Input'}
    b48VDC4_OK AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 3 (EL1808)^Channel 1^Input'}
    bFuse1_OK AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 3 (EL1808)^Channel 2^Input'}
    bFuse2_OK AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 3 (EL1808)^Channel 3^Input'}
    bFuse3_OK AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 3 (EL1808)^Channel 4^Input'}
    bFuse4_OK AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 3 (EL1808)^Channel 5^Input'}
    bFuse5_OK AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 3 (EL1808)^Channel 6^Input'}
    bFuse6_OK AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 3 (EL1808)^Channel 7^Input'}
    bFuse7_OK AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 3 (EL1808)^Channel 8^Input'}
    bFuse8_OK AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 5 (EL1808)^Channel 1^Input'}
    bEStop1Triggered AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 5 (EL1808)^Channel 2^Input'}
    bSTO1Triggered AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 5 (EL1808)^Channel 3^Input'}
    bEStop2Triggered AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 5 (EL1808)^Channel 4^Input'}
    bSTO2Triggered AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 6 (EL1808)^Channel 2^Input'}
    bMCB_OK AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 6 (EL1808)^Channel 3^Input'}
    bSPD_OK AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 6 (EL1808)^Channel 4^Input'}
    bDoorClosed AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 6 (EL1808)^Channel 5^Input'}
    bAcknowledgeButton AT %I*: BOOL;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 9 (EL3214)^RTD Inputs Channel 1^Value'}
    nTemp1 AT %I*: INT;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 9 (EL3214)^RTD Inputs Channel 2^Value'}
    nTemp2 AT %I*: INT;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 9 (EL3214)^RTD Inputs Channel 3^Value'}
    nTemp3 AT %I*: INT;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Term 1 (EK1100)^Term 9 (EL3214)^RTD Inputs Channel 4^Value'}
    nTemp4 AT %I*: INT;
    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^Inputs^DevState'}
    nEcMasterDevState AT %I*: UINT;

    aAlarmList: ARRAY [1..nMaxAlarms] OF ST_MonitoringAlarm := [
(*[1]*)(nErrorID:=241, sErrorMsg:='The DC OK Status from PS 24V-1 is OFF.', nStatusLED:=E_MonitoringLedFunction.eFast, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eSteady, nAcknowledgeLED:=E_MonitoringLedFunction.eSteady),
(*[2]*)(nErrorID:=242, sErrorMsg:='The DC OK Status from PS 24V-2 is OFF.', nStatusLED:=E_MonitoringLedFunction.eFast, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eSteady, nAcknowledgeLED:=E_MonitoringLedFunction.eSteady),
(*[3]*)(nErrorID:=243, sErrorMsg:='The DC OK Status from PS 24V-3 is OFF.', nStatusLED:=E_MonitoringLedFunction.eFast, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eSteady, nAcknowledgeLED:=E_MonitoringLedFunction.eSteady),
(*[4]*)(nErrorID:=481, sErrorMsg:='The DC OK Status from PS 48V-1 is OFF.', nStatusLED:=E_MonitoringLedFunction.eFast, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eSteady, nAcknowledgeLED:=E_MonitoringLedFunction.eSteady),
(*[5]*)(nErrorID:=482, sErrorMsg:='The DC OK Status from PS 48V-2 is OFF.', nStatusLED:=E_MonitoringLedFunction.eFast, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eSteady, nAcknowledgeLED:=E_MonitoringLedFunction.eSteady),
(*[6]*)(nErrorID:=483, sErrorMsg:='The DC OK Status from PS 48V-3 is OFF.', nStatusLED:=E_MonitoringLedFunction.eFast, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eSteady, nAcknowledgeLED:=E_MonitoringLedFunction.eSteady),
(*[7]*)(nErrorID:=484, sErrorMsg:='The DC OK Status from PS 48V-4 is OFF.', nStatusLED:=E_MonitoringLedFunction.eFast, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eSteady, nAcknowledgeLED:=E_MonitoringLedFunction.eSteady),
(*[8]*)(nErrorID:=11, sErrorMsg:='MCB OK status is OFF', nStatusLED:=E_MonitoringLedFunction.eFast, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eSteady, nAcknowledgeLED:=E_MonitoringLedFunction.eSteady),
(*[9]*)(nErrorID:=12, sErrorMsg:='SPD OK status is OFF', nStatusLED:=E_MonitoringLedFunction.eFast, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eSteady, nAcknowledgeLED:=E_MonitoringLedFunction.eSteady),
(*[10]*)(nErrorID:=13, sErrorMsg:='Cabinet door Opened', nStatusLED:=E_MonitoringLedFunction.eSteady, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eSteady, nAcknowledgeLED:=E_MonitoringLedFunction.eUndefined),
(*[11]*)(nErrorID:=301, sErrorMsg:='Fuse 1 tripped', nStatusLED:=E_MonitoringLedFunction.eUndefined, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eUndefined, nAcknowledgeLED:=E_MonitoringLedFunction.eSteady),
(*[12]*)(nErrorID:=302, sErrorMsg:='Fuse 2 tripped', nStatusLED:=E_MonitoringLedFunction.eSlow, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eSteady, nAcknowledgeLED:=E_MonitoringLedFunction.eSteady),
(*[13]*)(nErrorID:=303, sErrorMsg:='Fuse 3 tripped', nStatusLED:=E_MonitoringLedFunction.eSlow, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eSteady, nAcknowledgeLED:=E_MonitoringLedFunction.eSteady),
(*[14]*)(nErrorID:=304, sErrorMsg:='Fuse 4 tripped', nStatusLED:=E_MonitoringLedFunction.eSlow, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eUndefined, nAcknowledgeLED:=E_MonitoringLedFunction.eSteady),
(*[15]*)(nErrorID:=305, sErrorMsg:='Fuse 5 tripped', nStatusLED:=E_MonitoringLedFunction.eSlow, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eUndefined, nAcknowledgeLED:=E_MonitoringLedFunction.eSteady),
(*[16]*)(nErrorID:=306, sErrorMsg:='Fuse 6 tripped', nStatusLED:=E_MonitoringLedFunction.eSlow, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eUndefined, nAcknowledgeLED:=E_MonitoringLedFunction.eSteady),
(*[17]*)(nErrorID:=307, sErrorMsg:='Fuse 7 tripped', nStatusLED:=E_MonitoringLedFunction.eSlow, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eUndefined, nAcknowledgeLED:=E_MonitoringLedFunction.eSteady),
(*[18]*)(nErrorID:=308, sErrorMsg:='Fuse 8 tripped', nStatusLED:=E_MonitoringLedFunction.eSlow, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eUndefined, nAcknowledgeLED:=E_MonitoringLedFunction.eSteady),
(*[19]*)(nErrorID:=501, sErrorMsg:='E-Stop 1 active', nStatusLED:=E_MonitoringLedFunction.eSteady, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eUndefined, nAcknowledgeLED:=E_MonitoringLedFunction.eUndefined, nEStopLED:=E_MonitoringLedFunction.eSteady),
(*[20]*)(nErrorID:=511, sErrorMsg:='STO axis 1 active', nStatusLED:=E_MonitoringLedFunction.eFast, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eUndefined, nAcknowledgeLED:=E_MonitoringLedFunction.eUndefined),
(*[21]*)(nErrorID:=502, sErrorMsg:='E-Stop 2 active', nStatusLED:=E_MonitoringLedFunction.eSteady, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eUndefined, nAcknowledgeLED:=E_MonitoringLedFunction.eUndefined, nEStopLED:=E_MonitoringLedFunction.eSteady),
(*[22]*)(nErrorID:=512, sErrorMsg:='STO axis 2 active', nStatusLED:=E_MonitoringLedFunction.eFast, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eUndefined, nAcknowledgeLED:=E_MonitoringLedFunction.eUndefined),
(*[23]*)(nErrorID:=14, sErrorMsg:='Temperature 1 too high', nStatusLED:=E_MonitoringLedFunction.eUndefined, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eSteady, nAcknowledgeLED:=E_MonitoringLedFunction.eUndefined),
(*[24]*)(nErrorID:=15, sErrorMsg:='Temperature 2 too high', nStatusLED:=E_MonitoringLedFunction.eUndefined, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eSteady, nAcknowledgeLED:=E_MonitoringLedFunction.eUndefined),
(*[25]*)(nErrorID:=16, sErrorMsg:='Temperature 3 too high', nStatusLED:=E_MonitoringLedFunction.eUndefined, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eSteady, nAcknowledgeLED:=E_MonitoringLedFunction.eUndefined),
(*[26]*)(nErrorID:=17, sErrorMsg:='Temperature 4 too high', nStatusLED:=E_MonitoringLedFunction.eUndefined, nAbnormalLED:=E_MonitoringLedFunction.eSteady, nEmergencyLED:=E_MonitoringLedFunction.eSteady, nAcknowledgeLED:=E_MonitoringLedFunction.eUndefined),
(*[27]*)(nErrorID:=101, sErrorMsg:='EtherCAT Master is not ok', nStatusLED:=E_MonitoringLedFunction.eSteady, nAbnormalLED:=E_MonitoringLedFunction.eSlow, nEmergencyLED:=E_MonitoringLedFunction.eUndefined, nAcknowledgeLED:=E_MonitoringLedFunction.eUndefined),
(*[28]*)(nErrorID:=102, sErrorMsg:='At least one EtherCAT slave is not in OP state', nStatusLED:=E_MonitoringLedFunction.eSteady, nAbnormalLED:=E_MonitoringLedFunction.eSlow, nEmergencyLED:=E_MonitoringLedFunction.eSteady, nAcknowledgeLED:=E_MonitoringLedFunction.eUndefined),
(*[29]*)(nErrorID:=103, sErrorMsg:='At least one EtherCAT slave link is faulted', nStatusLED:=E_MonitoringLedFunction.eSteady, nAbnormalLED:=E_MonitoringLedFunction.eSlow, nEmergencyLED:=E_MonitoringLedFunction.eSteady, nAcknowledgeLED:=E_MonitoringLedFunction.eUndefined),
(*[30]*)(nErrorID:=104, sErrorMsg:='Overflow in PLC cycle time', nStatusLED:=E_MonitoringLedFunction.eSteady, nAbnormalLED:=E_MonitoringLedFunction.eSlow, nEmergencyLED:=E_MonitoringLedFunction.eUndefined, nAcknowledgeLED:=E_MonitoringLedFunction.eUndefined),
(*[31]*)(nErrorID:=105, sErrorMsg:='CPU Load High', nStatusLED:=E_MonitoringLedFunction.eSteady, nAbnormalLED:=E_MonitoringLedFunction.eSlow, nEmergencyLED:=E_MonitoringLedFunction.eUndefined, nAcknowledgeLED:=E_MonitoringLedFunction.eUndefined)];

    aTempErrorID: ARRAY [1..nMaxAlarms] OF INT;
    aTempErrorMsg: ARRAY [1..nMaxAlarms] OF STRING;

    aFbErrorMessageTimer: ARRAY[1..nMaxAlarms] OF TON;
    aStartErrorMsgTimer: ARRAY[1..nMaxAlarms] OF BOOL;
    aFbErrorTrig: ARRAY[1..nMaxAlarms] OF R_TRIG;

    bLedActive: BOOL := FALSE;
    nAlarmCnt: INT;
    nAlarmBitNumber: UDINT;

    bCPUOverloaded: BOOL;
    bEcMasterError: BOOL;
    bSlaveStateNotOP: BOOL;
    bSlaveLinkError: BOOL;
    aExtraMessage: ARRAY[1..nMaxAlarms] OF STRING := [nMaxAlarms('')];
    bCycleTimeExceeded: BOOL;
    //Cpu Monitor
    fbMonitorCPU: TC_CpuUsage;
    fbUpdateCPULoadTON: TON;
    fMaxCPULoad: USINT := 85;
    //Ethercat master device state
    bEcLinkError: BOOL;
    bEcIOlocked: BOOL;
    bEcLinkErrorRedundancyAdapter: BOOL;
    bEcMissingFrame: BOOL;
    bEcOutofSendResources: BOOL;
    bEcWatchdogTriggered: BOOL;
    bEcEthernetDriverNotFound: BOOL;
    bEcIOresetActive: BOOL;
    bEcSlaveINIT: BOOL;
    bEcSlavePreOP: BOOL;
    bEcSlaveSafeOP: BOOL;
    bEcSlaveError: BOOL;
    bEcDCnotInSync: BOOL;
    //Ehtercat slave device state
    fbUpdateEcSlaveStateTON: TON;
    fbGetEcSlaveStates: FB_EcGetAllSlaveStates;
    stSlaveState: ARRAY[0..nMaxECSlaves] OF ST_EcSlaveState;
    nActualEcSlaves: UINT := 0;

    //Frame statistics
    fbUpdateEcMasterFrame: TON;
    fbGetEcMasterFrames: FB_EcMasterFrameStatistic;

    nAcknowledgeLED: E_MonitoringLedFunction;
    nStatusLED: E_MonitoringLedFunction;
    nAbnormalLED: E_MonitoringLedFunction;
    nEmergencyLED: E_MonitoringLedFunction;
    fbFastBlinkOn: TON;
    fbFastBlinkOff: TON;
    bFastBlink: BOOL;
    fbSlowBlinkOn: TON;
    fbSlowBlinkOff: TON;
    bSlowBlink: BOOL;

    fbAcknowledgeButtonTrig: R_TRIG;

    fbEtherCATAlarmDelayTON: TON;
    bStartEtherCATdelayTON: BOOL := FALSE;
    bEtherCATInitialized: BOOL := FALSE;
END_VAR
VAR CONSTANT
    nMaxAlarms: UINT := 50;
    nMaxECSlaves: INT := 255;
    nMaxTemp: INT := 10000;
    nSlaveStateNotOPEntry: UDINT := 28;
    nSlaveLinkErrorEntry: UDINT := 29;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[mMonitorAlarms();
mMonitorCPU();
mMonitorEtherCAT();
]]></ST>
    </Implementation>
    <Method Name="mAlarm" Id="{bc357e09-9ee8-4234-8c76-7cdeb0e72989}">
      <Declaration><![CDATA[METHOD mAlarm : BOOL
VAR_IN_OUT
    stAlarmData: ST_MonitoringAlarm;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF stAlarmData.bAlarmSet THEN
    stAlarmData.bAlarmActive := TRUE;
ELSIF stAlarmData.bAlarmReset THEN
    stAlarmData.bAlarmActive := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mLed" Id="{e7c0d21c-5d75-0ad9-14e4-781003dce579}">
      <Declaration><![CDATA[METHOD mLed : BOOL
VAR_IN_OUT
    stAlarmData: ST_MonitoringAlarm;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF stAlarmData.bLedSet THEN
    stAlarmData.bLedActive := TRUE;
ELSIF stAlarmData.bLedReset THEN
    stAlarmData.bLedActive := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mMonitorAlarms" Id="{542f94fc-2447-0df7-2067-48b1bdc9c1ba}">
      <Declaration><![CDATA[METHOD mMonitorAlarms
VAR
    i: UINT := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbAcknowledgeButtonTrig(CLK:=bAcknowledgeButton);
mSetResetAlarmsLeds();

// Reset before loop
nAlarmCnt := 0;
nAlarmBitNumber := 0;
MEMSET(ADR(aTempErrorID), 0, SIZEOF(aTempErrorID));
MEMSET(ADR(aTempErrorMsg), 0, SIZEOF(aTempErrorMsg));
bLedActive := FALSE;
nEmergencyLED := 0;
nAbnormalLED := 0;
nStatusLED := 0;
nAcknowledgeLED := 0;

FOR i:=1 TO nMaxAlarms DO
    afbErrorMessageTimer[i](IN:=aStartErrorMsgTimer[i], PT:=T#60S);
    aFbErrorTrig[i](clk:=aStartErrorMsgTimer[i]);
    // Update list of active alarms
    mAlarm(stAlarmData:=aAlarmList[i]);
    // Update list of active LEDs
    mLed(stAlarmData:=aAlarmList[i]);

    IF aAlarmList[i].bAlarmActive THEN
        nAlarmCnt := nAlarmCnt + 1;
        aTempErrorID[nAlarmCnt] := aAlarmList[i].nErrorID;
        aTempErrorMsg[nAlarmCnt] := CONCAT(aAlarmList[i].sErrorMsg, aExtraMessage[i]);

        mPrintErrorMessage(
            sErrorMessage:=aTempErrorMsg[nAlarmCnt],
            nErrorID:=aAlarmList[i].nErrorID,
            nIndex:=i);

        // Map nErrorID to nAlarmBitnumber, which later is mapped to output variable nAlarmGrpBitNumber.
        CASE aAlarmList[i].nErrorID OF
            241, 242, 243:
            nAlarmBitNumber.0 := TRUE;
            481, 482, 483, 484:
            nAlarmBitNumber.1 := TRUE;
            11, 12, 13:
            nAlarmBitNumber.2 := TRUE;
            14,15,16,17:
            nAlarmBitNumber.3 := TRUE;
            301, 302, 303, 304, 305, 306, 307, 308:
            nAlarmBitNumber.4 := TRUE;
            501, 502, 511, 512:
            nAlarmBitNumber.5 := TRUE;
            101:
            nAlarmBitNumber.6 := TRUE;
            102:
            nAlarmBitNumber.7 := TRUE;
            103:
            nAlarmBitNumber.8 := TRUE;
            104, 105:
            nAlarmBitNumber.9 := TRUE;
        END_CASE
    END_IF

    // Set the alarm LEDs according to first occurrence
    IF NOT bLedActive AND aALarmList[i].bLedActive THEN
        bLedActive := TRUE;
        nEmergencyLED := aAlarmList[i].nEmergencyLED;
        nAbnormalLED := aAlarmList[i].nAbnormalLED;
        nStatusLED := aAlarmList[i].nStatusLED;
        nAcknowledgeLED := aAlarmList[i].nAcknowledgeLED;
    END_IF
END_FOR


// Copy to output variables
aErrorID := aTempErrorID;
aErrorMsg := aTempErrorMsg;
nAlarmGrpBitNumber := nAlarmBitNumber;

// Handle LED blinking
fbFastBlinkOn(IN:=NOT fbFastBlinkOff.q , PT:=T#250MS , Q=> , ET=> );
fbFastBlinkOff(IN:=fbFastBlinkOn.Q , PT:=T#250MS , Q=> , ET=> );
bFastBlink := fbFastBlinkOn.q;

fbSlowBlinkOn(IN:=NOT fbSlowBlinkOff.q , PT:=T#750MS , Q=> , ET=> );
fbSlowBlinkOff(IN:=fbSlowBlinkOn.Q , PT:=T#750MS , Q=> , ET=> );
bSlowBlink := fbSlowBlinkOn.q;

bEmergencyLED :=
    (nEmergencyLED = E_MonitoringLedFunction.eSteady)
    OR (nEmergencyLED = E_MonitoringLedFunction.eFast AND bFastBlink)
    OR (nEmergencyLED = E_MonitoringLedFunction.eSlow AND bSlowBlink);
bAbnormalLED :=
    (nAbnormalLED = E_MonitoringLedFunction.eSteady)
    OR (nAbnormalLED = E_MonitoringLedFunction.eFast AND bFastBlink)
    OR (nAbnormalLED = E_MonitoringLedFunction.eSlow AND bSlowBlink);
bStatusLED :=
    (nStatusLED = E_MonitoringLedFunction.eSteady)
    OR (nStatusLED = E_MonitoringLedFunction.eFast AND bFastBlink)
    OR (nStatusLED = E_MonitoringLedFunction.eSlow AND bSlowBlink);
bAcknowledgeLED :=
    (nAcknowledgeLED = E_MonitoringLedFunction.eSteady)
    OR (nAcknowledgeLED = E_MonitoringLedFunction.eFast AND bFastBlink)
    OR (nAcknowledgeLED = E_MonitoringLedFunction.eSlow AND bSlowBlink);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mMonitorCPU" Id="{a61c27e8-4c84-0867-118e-ec0a5a4d454e}">
      <Declaration><![CDATA[METHOD mMonitorCPU
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Cpu Monitor
fbUpdateCPULoadTON(IN:=NOT fbUpdateCPULoadTON.q , PT:=T#100MS , Q=> , ET=> );
fbMonitorCPU(START:=fbUpdateCPULoadTON.q, TMOUT:= T#5S);

bCPUOverloaded := fbMonitorCPU.USAGE > fMaxCPULoad;
nCPULoad := fbMonitorCPU.USAGE;

fCycleExecTime_ms := UDINT_TO_REAL(_TaskInfo[fbGetCurTaskIndex.index].LastExecTime) / 10000;
bCycleTimeExceeded := _TaskInfo[fbGetCurTaskIndex.index].CycleTimeExceeded;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mMonitorEtherCAT" Id="{27ca7522-14a9-0d7c-33ae-0dd2d861dfe1}">
      <Declaration><![CDATA[METHOD mMonitorEtherCAT
VAR
    i: UINT := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Read frames
fbUpdateEcMasterFrame(IN:=NOT fbUpdateEcMasterFrame.q , PT:=T#1000MS , Q=> , ET=> );
fbGetEcMasterFrames(sNetId:= nEcMasterNetId, bExecute:= fbUpdateEcMasterFrame.q);

nEcMasterFramesLost := fbGetEcMasterFrames.nLostFrames;


//Check ethercat slave device state
fbUpdateEcSlaveStateTON(IN:=NOT fbUpdateEcSlaveStateTON.q , PT:=T#100MS , Q=> , ET=> );
fbGetEcSlaveStates(
    sNetId:=nEcMasterNetId,
    pStateBuf:=ADR(stSlaveState),
    cbBufLen:=SIZEOF(stSlaveState),
    bExecute:=fbUpdateEcSlaveStateTON.q);
nActualEcSlaves:=fbGetEcSlaveStates.nSlaves;

fbEtherCATAlarmDelayTON(IN:=bStartEtherCATdelayTON, PT:=T#1S);

IF fbEtherCATAlarmDelayTON.Q THEN
    bStartEtherCATdelayTON := FALSE;
    bEtherCATInitialized := TRUE;
END_IF

IF bEtherCATInitialized THEN
    FOR i:=0 TO nActualEcSlaves-1 DO
        IF i = 0 THEN
            bSlaveStateNotOP := FALSE;
            bSlaveLinkError := FALSE;
            aExtraMessage[nSlaveStateNotOPEntry] := ', Slave Id #: ';
            aExtraMessage[nSlaveLinkErrorEntry] := ', Slave Id #: ';
        END_IF

        IF stSlaveState[i].deviceState <> EC_DEVICE_STATE_OP THEN
            bSlaveStateNotOP := TRUE;
            aExtraMessage[nSlaveStateNotOPEntry] := CONCAT(STR1:=aExtraMessage[nSlaveStateNotOPEntry], STR2:= UINT_TO_STRING(i+1));
            aExtraMessage[nSlaveStateNotOPEntry] := CONCAT(STR1:=aExtraMessage[nSlaveStateNotOPEntry], STR2:=', ');
        END_IF

        IF stSlaveState[i].linkState <> EC_LINK_STATE_OK  THEN
            bSlaveLinkError := TRUE;
            aExtraMessage[nSlaveLinkErrorEntry] := CONCAT(STR1:=aExtraMessage[nSlaveLinkErrorEntry], STR2:=UINT_TO_STRING(i+1));
            aExtraMessage[nSlaveLinkErrorEntry] := CONCAT(STR1:=aExtraMessage[nSlaveLinkErrorEntry], STR2:=', ');
        END_IF
    END_FOR
ELSE
    bStartEtherCATdelayTON := TRUE;
END_IF

//Check ethercat master device state
bEcLinkError := nEcMasterDevState.0;
bEcIOlocked := nEcMasterDevState.1;
bEcLinkErrorRedundancyAdapter := nEcMasterDevState.2;
bEcMissingFrame := nEcMasterDevState.3;
bEcOutofSendResources := nEcMasterDevState.4;
bEcWatchdogTriggered := nEcMasterDevState.5;
bEcEthernetDriverNotFound := nEcMasterDevState.6;
bEcIOresetActive := nEcMasterDevState.7;
bEcSlaveINIT := nEcMasterDevState.8;
bEcSlavePreOP := nEcMasterDevState.9;
bEcSlaveSafeOP := nEcMasterDevState.10;
bEcSlaveError := nEcMasterDevState.11;
bEcDCnotInSync := nEcMasterDevState.12;

bEcMasterError := nEcMasterDevState > 0;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mPrintErrorMessage" Id="{3e321397-22af-4d7e-a9bd-c132b0a3b842}">
      <Declaration><![CDATA[METHOD mPrintErrorMessage : BOOL
VAR_INPUT
    sErrorMessage: STRING;
    nErrorID: INT;
    nIndex: UINT;
END_VAR
VAR
    sFullErrorMessage: STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[sFullErrorMessage := CONCAT(STR1:='ERROR. ErrorID: ', STR2:=INT_TO_STRING(nErrorID));
sFullErrorMessage := CONCAT(STR1:=sFullErrorMessage, STR2:='. ');
sFullErrorMessage := CONCAT(STR1:=sFullErrorMessage, STR2:=sErrorMessage);

IF aAlarmList[nIndex].bAlarmActive THEN
    aStartErrorMsgTimer[nIndex]:=TRUE;
    IF afbErrorTrig[nIndex].Q THEN
        ADSLOGSTR(
            msgCtrlMask:=ADSLOG_MSGTYPE_ERROR,
            msgFmtStr:='%s',
            strArg:=sFullErrorMessage);
    END_IF

    IF aFbErrorMessageTimer[nIndex].Q THEN
        aStartErrorMsgTimer[nIndex]:=FALSE;
    END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mSetResetAlarmsLeds" Id="{1241012c-ae73-450a-94a3-e603ad15f437}">
      <Declaration><![CDATA[METHOD mSetResetAlarmsLeds : BOOL
VAR_INST
    index: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT b24VDC1_OK THEN
    aAlarmList[1].bAlarmSet := TRUE;
    aAlarmList[1].bAlarmReset := FALSE;
    aAlarmList[1].bLedSet := TRUE;
    aAlarmList[1].bLedReset := FALSE;
ELSE
    aAlarmList[1].bAlarmSet := FALSE;
    aAlarmList[1].bAlarmReset := TRUE;
    aAlarmList[1].bLedSet := FALSE;
END_IF

IF NOT b24VDC2_OK THEN
    aAlarmList[2].bAlarmSet := TRUE;
    aAlarmList[2].bAlarmReset := FALSE;
    aAlarmList[2].bLedSet := TRUE;
    aAlarmList[2].bLedReset := FALSE;
ELSE
    aAlarmList[2].bAlarmSet := FALSE;
    aAlarmList[2].bAlarmReset := TRUE;
    aAlarmList[2].bLedSet := FALSE;
END_IF

IF NOT b24VDC3_OK THEN
    aAlarmList[3].bAlarmSet := TRUE;
    aAlarmList[3].bAlarmReset := FALSE;
    aAlarmList[3].bLedSet := TRUE;
    aAlarmList[3].bLedReset := FALSE;
ELSE
    aAlarmList[3].bAlarmSet := FALSE;
    aAlarmList[3].bAlarmReset := TRUE;
    aAlarmList[3].bLedSet := FALSE;
END_IF

IF NOT b48VDC1_OK THEN
    aAlarmList[4].bAlarmSet := TRUE;
    aAlarmList[4].bAlarmReset := FALSE;
    aAlarmList[4].bLedSet := TRUE;
    aAlarmList[4].bLedReset := FALSE;
ELSE
    aAlarmList[4].bAlarmSet := FALSE;
    aAlarmList[4].bAlarmReset := TRUE;
    aAlarmList[4].bLedSet := FALSE;
END_IF

IF NOT b48VDC2_OK THEN
    aAlarmList[5].bAlarmSet := TRUE;
    aAlarmList[5].bAlarmReset := FALSE;
    aAlarmList[5].bLedSet := TRUE;
    aAlarmList[5].bLedReset := FALSE;
ELSE
    aAlarmList[5].bAlarmSet := FALSE;
    aAlarmList[5].bAlarmReset := TRUE;
    aAlarmList[5].bLedSet := FALSE;
END_IF

IF NOT b48VDC3_OK THEN
    aAlarmList[6].bAlarmSet := TRUE;
    aAlarmList[6].bAlarmReset := FALSE;
    aAlarmList[6].bLedSet := TRUE;
    aAlarmList[6].bLedReset := FALSE;
ELSE
    aAlarmList[6].bAlarmSet := FALSE;
    aAlarmList[6].bAlarmReset := TRUE;
    aAlarmList[6].bLedSet := FALSE;
END_IF

IF NOT b48VDC4_OK THEN
    aAlarmList[7].bAlarmSet := TRUE;
    aAlarmList[7].bAlarmReset := FALSE;
    aAlarmList[7].bLedSet := TRUE;
    aAlarmList[7].bLedReset := FALSE;
ELSE
    aAlarmList[7].bAlarmSet := FALSE;
    aAlarmList[7].bAlarmReset := TRUE;
    aAlarmList[7].bLedSet := FALSE;
END_IF

IF NOT bMCB_OK THEN
    aAlarmList[8].bAlarmSet := TRUE;
    aAlarmList[8].bAlarmReset := FALSE;
    aAlarmList[8].bLedSet := TRUE;
    aAlarmList[8].bLedReset := FALSE;
ELSE
    aAlarmList[8].bAlarmSet := FALSE;
    aAlarmList[8].bAlarmReset := TRUE;
    aAlarmList[8].bLedSet := FALSE;
END_IF

IF NOT bSPD_OK THEN
    aAlarmList[9].bAlarmSet := TRUE;
    aAlarmList[9].bAlarmReset := FALSE;
    aAlarmList[9].bLedSet := TRUE;
    aAlarmList[9].bLedReset := FALSE;
ELSE
    aAlarmList[9].bAlarmSet := FALSE;
    aAlarmList[9].bAlarmReset := TRUE;
    aAlarmList[9].bLedSet := FALSE;
END_IF

IF NOT bDoorClosed THEN
    aAlarmList[10].bAlarmSet := TRUE;
    aAlarmList[10].bAlarmReset := FALSE;
    aAlarmList[10].bLedSet := TRUE;
    aAlarmList[10].bLedReset := FALSE;
ELSE
    aAlarmList[10].bAlarmSet := FALSE;
    aAlarmList[10].bAlarmReset:= TRUE;
    aAlarmList[10].bLedSet := FALSE;
END_IF

IF NOT bFuse1_OK THEN
    aAlarmList[11].bAlarmSet := TRUE;
    aAlarmList[11].bAlarmReset := FALSE;
    aAlarmList[11].bLedSet := TRUE;
    aAlarmList[11].bLedReset := FALSE;
ELSE
    aAlarmList[11].bAlarmSet := FALSE;
    aAlarmList[11].bAlarmReset:= TRUE;
    aAlarmList[11].bLedSet := FALSE;
END_IF

IF bFuse2_OK THEN
    aAlarmList[12].bAlarmSet := TRUE;
    aAlarmList[12].bAlarmReset := FALSE;
    aAlarmList[12].bLedSet := TRUE;
    aAlarmList[12].bLedReset := FALSE;
ELSE
    aAlarmList[12].bAlarmSet := FALSE;
    aAlarmList[12].bAlarmReset:= TRUE;
    aAlarmList[12].bLedSet := FALSE;
END_IF

IF bFuse3_OK THEN
    aAlarmList[13].bAlarmSet := TRUE;
    aAlarmList[13].bAlarmReset := FALSE;
    aAlarmList[13].bLedSet := TRUE;
    aAlarmList[13].bLedReset := FALSE;
ELSE
    aAlarmList[13].bAlarmSet := FALSE;
    aAlarmList[13].bAlarmReset:= TRUE;
    aAlarmList[13].bLedSet := FALSE;
END_IF

IF NOT bFuse4_OK THEN
    aAlarmList[14].bAlarmSet := TRUE;
    aAlarmList[14].bAlarmReset := FALSE;
    aAlarmList[14].bLedSet := TRUE;
    aAlarmList[14].bLedReset := FALSE;
ELSE
    aAlarmList[14].bAlarmSet := FALSE;
    aAlarmList[14].bAlarmReset:= TRUE;
    aAlarmList[14].bLedSet := FALSE;
END_IF

IF NOT bFuse5_OK THEN
    aAlarmList[15].bAlarmSet := TRUE;
    aAlarmList[15].bAlarmReset := FALSE;
    aAlarmList[15].bLedSet := TRUE;
    aAlarmList[15].bLedReset := FALSE;
ELSE
    aAlarmList[15].bAlarmSet := FALSE;
    aAlarmList[15].bAlarmReset:= TRUE;
    aAlarmList[15].bLedSet := FALSE;
END_IF

IF NOT bFuse6_OK THEN
    aAlarmList[16].bAlarmSet := TRUE;
    aAlarmList[16].bAlarmReset := FALSE;
    aAlarmList[16].bLedSet := TRUE;
    aAlarmList[16].bLedReset := FALSE;
ELSE
    aAlarmList[16].bAlarmSet := FALSE;
    aAlarmList[16].bAlarmReset:= TRUE;
    aAlarmList[16].bLedSet := FALSE;
END_IF

IF NOT bFuse7_OK THEN
    aAlarmList[17].bAlarmSet := TRUE;
    aAlarmList[17].bAlarmReset := FALSE;
    aAlarmList[17].bLedSet := TRUE;
    aAlarmList[17].bLedReset := FALSE;
ELSE
    aAlarmList[17].bAlarmSet := FALSE;
    aAlarmList[17].bAlarmReset:= TRUE;
    aAlarmList[17].bLedSet := FALSE;
END_IF

IF NOT bFuse8_OK THEN
    aAlarmList[18].bAlarmSet := TRUE;
    aAlarmList[18].bAlarmReset := FALSE;
    aAlarmList[18].bLedSet := TRUE;
    aAlarmList[18].bLedReset := FALSE;
ELSE
    aAlarmList[18].bAlarmSet := FALSE;
    aAlarmList[18].bAlarmReset:= TRUE;
    aAlarmList[18].bLedSet := FALSE;
END_IF

IF NOT bEStop1Triggered THEN
    aAlarmList[19].bAlarmSet := TRUE;
    aAlarmList[19].bAlarmReset := FALSE;
    aAlarmList[19].bLedSet := TRUE;
    aAlarmList[19].bLedReset := FALSE;
ELSE
    aAlarmList[19].bAlarmSet := FALSE;
    aAlarmList[19].bAlarmReset:= TRUE;
    aAlarmList[19].bLedSet := FALSE;
END_IF

IF NOT bSTO1Triggered THEN
    aAlarmList[20].bAlarmSet := TRUE;
    aAlarmList[20].bAlarmReset := FALSE;
    aAlarmList[20].bLedSet := TRUE;
    aAlarmList[20].bLedReset := FALSE;
ELSE
    aAlarmList[20].bAlarmSet := FALSE;
    aAlarmList[20].bAlarmReset:= TRUE;
    aAlarmList[20].bLedSet := FALSE;
END_IF

IF NOT bEStop2Triggered THEN
    aAlarmList[21].bAlarmSet := TRUE;
    aAlarmList[21].bAlarmReset := FALSE;
    aAlarmList[21].bLedSet := TRUE;
    aAlarmList[21].bLedReset := FALSE;
ELSE
    aAlarmList[21].bAlarmSet := FALSE;
    aAlarmList[21].bAlarmReset:= TRUE;
    aAlarmList[21].bLedSet := FALSE;
END_IF

IF NOT bSTO2Triggered THEN
    aAlarmList[22].bAlarmSet := TRUE;
    aAlarmList[22].bAlarmReset := FALSE;
    aAlarmList[22].bLedSet := TRUE;
    aAlarmList[22].bLedReset := FALSE;
ELSE
    aAlarmList[22].bAlarmSet := FALSE;
    aAlarmList[22].bAlarmReset:= TRUE;
    aAlarmList[22].bLedSet := FALSE;
END_IF

IF nTemp1 > nMaxTemp THEN
    aAlarmList[23].bAlarmSet := TRUE;
    aAlarmList[23].bAlarmReset := FALSE;
    aAlarmList[23].bLedSet := TRUE;
    aAlarmList[23].bLedReset := FALSE;
ELSE
    aAlarmList[23].bAlarmSet := FALSE;
    aAlarmList[23].bAlarmReset:= TRUE;
    aAlarmList[23].bLedSet := FALSE;
END_IF

IF nTemp2 > nMaxTemp THEN
    aAlarmList[24].bAlarmSet := TRUE;
    aAlarmList[24].bAlarmReset := FALSE;
    aAlarmList[24].bLedSet := TRUE;
    aAlarmList[24].bLedReset := FALSE;
ELSE
    aAlarmList[24].bAlarmSet := FALSE;
    aAlarmList[24].bAlarmReset:= TRUE;
    aAlarmList[24].bLedSet := FALSE;
END_IF

IF nTemp3 > nMaxTemp THEN
    aAlarmList[25].bAlarmSet := TRUE;
    aAlarmList[25].bAlarmReset := FALSE;
    aAlarmList[25].bLedSet := TRUE;
    aAlarmList[25].bLedReset := FALSE;
ELSE
    aAlarmList[25].bAlarmSet := FALSE;
    aAlarmList[25].bAlarmReset:= TRUE;
    aAlarmList[25].bLedSet := FALSE;
END_IF

IF nTemp4 > nMaxTemp THEN
    aAlarmList[26].bAlarmSet := TRUE;
    aAlarmList[26].bAlarmReset := FALSE;
    aAlarmList[26].bLedSet := TRUE;
    aAlarmList[26].bLedReset := FALSE;
ELSE
    aAlarmList[26].bAlarmSet := FALSE;
    aAlarmList[26].bAlarmReset:= TRUE;
    aAlarmList[26].bLedSet := FALSE;
END_IF

IF bEcMasterError THEN
    aAlarmList[27].bAlarmSet := TRUE;
    aAlarmList[27].bAlarmReset := FALSE;
    aAlarmList[27].bLedSet := TRUE;
    aAlarmList[27].bLedReset := FALSE;
ELSE
    aAlarmList[27].bAlarmSet := FALSE;
    aAlarmList[27].bAlarmReset:= TRUE;
    aAlarmList[27].bLedSet := FALSE;
END_IF

IF bSlaveStateNotOP THEN
    aAlarmList[28].bAlarmSet := TRUE;
    aAlarmList[28].bAlarmReset := FALSE;
    aAlarmList[28].bLedSet := TRUE;
    aAlarmList[28].bLedReset := FALSE;
ELSE
    aAlarmList[28].bAlarmSet := FALSE;
    aAlarmList[28].bAlarmReset:= TRUE;
    aAlarmList[28].bLedSet := FALSE;
END_IF

IF bSlaveLinkError THEN
    aAlarmList[29].bAlarmSet := TRUE;
    aAlarmList[29].bAlarmReset := FALSE;
    aAlarmList[29].bLedSet := TRUE;
    aAlarmList[29].bLedReset := FALSE;
ELSE
    aAlarmList[29].bAlarmSet := FALSE;
    aAlarmList[29].bAlarmReset:= TRUE;
    aAlarmList[29].bLedSet := FALSE;
END_IF

IF bCycleTimeExceeded THEN
    aAlarmList[30].bAlarmSet := TRUE;
    aAlarmList[30].bAlarmReset := FALSE;
    aAlarmList[30].bLedSet := TRUE;
    aAlarmList[30].bLedReset := FALSE;
ELSE
    aAlarmList[30].bAlarmSet := FALSE;
    aAlarmList[30].bAlarmReset:= TRUE;
    aAlarmList[30].bLedSet := FALSE;
END_IF

IF bCPUOverloaded THEN
    aAlarmList[31].bAlarmSet := TRUE;
    aAlarmList[31].bAlarmReset := FALSE;
    aAlarmList[31].bLedSet := TRUE;
    aAlarmList[31].bLedReset := FALSE;
ELSE
    aAlarmList[31].bAlarmSet := FALSE;
    aAlarmList[31].bAlarmReset:= TRUE;
    aAlarmList[31].bLedSet := FALSE;
END_IF

//Reset selected alarms just when acknowledge button has been pressed
IF fbAcknowledgeButtonTrig.Q THEN
    FOR index:=1 TO nMaxAlarms DO
        aAlarmList[index].bAlarmSet := FALSE;
        aAlarmList[index].bAlarmReset := TRUE;
        aAlarmList[index].bLedSet := FALSE;
        aAlarmList[index].bLedReset := TRUE;
    END_FOR
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>