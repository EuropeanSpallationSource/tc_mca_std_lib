<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.5">
  <POU Name="FB_Monitoring" Id="{dc4431e2-7ed3-4317-a6e3-038e11ac0910}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Monitoring
VAR_INPUT
    nEcMasterNetId: T_AmsNetId;
END_VAR
VAR_OUTPUT
    anErrorID: ARRAY [1..nMaxAlarms] OF INT;
    asErrorMsg: ARRAY [1..nMaxAlarms] OF STRING;
    nEcMasterFramesLost: UDINT;
    nCPULoad: UDINT;
    fCycleExecTime_ms: REAL;
    nAlarmGrpBitNumber: UDINT;
END_VAR
VAR
    //Outputs
    bFan1 AT %Q*: BOOL := TRUE;
    bFan2 AT %Q*: BOOL := TRUE;
    bDCSupplyLED AT %Q*: BOOL;
    bAcknowledgeLED AT %Q*: BOOL;
    bStatusLED AT %Q*: BOOL;
    bWarningLED AT %Q*: BOOL;
    bEmergencyLED AT %Q*: BOOL;
    //Inputs
    b24VDC1_OK AT %I*: BOOL;
    b24VDC2_OK AT %I*: BOOL;
    b48VDC1_OK AT %I*: BOOL;
    bFuse1_OK AT %I*: BOOL;
    bFuse2_OK AT %I*: BOOL;
    bFuse3_OK AT %I*: BOOL;
    bFuse4_OK AT %I*: BOOL;
    bFuse5_OK AT %I*: BOOL;
    bFuse6_OK AT %I*: BOOL;
    bFuse7_OK AT %I*: BOOL;
    bFuse8_OK AT %I*: BOOL;
    bSafety_OK AT %I*: BOOL;
    bFan1_OK AT %I*: BOOL;
    bFan2_OK AT %I*: BOOL;
    nTemp1 AT %I*: INT;
    nTemp2 AT %I*: INT;
    nEcMasterDevState AT %I*: UINT;
    astAlarmList: ARRAY [1..nMaxAlarms] OF ST_Alarm := [
                    (*[1]*)(eStatusLED:=E_LedFunction.eFast, eWarningLED:=E_LedFunction.eUndefined, eEmergencyLED:=E_LedFunction.eSteady, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=1 ,sErrorMsg:='The DC OK Status from PS or DC-DC converter 24V-1 is OFF.'),
                    (*[2]*)(eStatusLED:=E_LedFunction.eUndefined, eWarningLED:=E_LedFunction.eUndefined, eEmergencyLED:=E_LedFunction.eUndefined, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=2 ,sErrorMsg:='The DC OK Status from PS 24V-2 is OFF.'),
                    (*[3]*)(eStatusLED:=E_LedFunction.eFast, eWarningLED:=E_LedFunction.eUndefined, eEmergencyLED:=E_LedFunction.eSteady, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=4 ,sErrorMsg:='The DC OK Status from PS 48V-1 is OFF.'),
                    (*[4]*)(eStatusLED:=E_LedFunction.eUndefined, eWarningLED:=E_LedFunction.eUndefined, eEmergencyLED:=E_LedFunction.eUndefined, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=8 ,sErrorMsg:='Output 1 on LOCC box 1 tripped'),
                    (*[5]*)(eStatusLED:=E_LedFunction.eSlow, eWarningLED:=E_LedFunction.eUndefined, eEmergencyLED:=E_LedFunction.eSteady, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=9 ,sErrorMsg:='Output 2 on LOCC box 1 tripped'),
                    (*[6]*)(eStatusLED:=E_LedFunction.eUndefined, eWarningLED:=E_LedFunction.eUndefined, eEmergencyLED:=E_LedFunction.eUndefined, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=10 ,sErrorMsg:='Output 1 on LOCC box 2 tripped'),
                    (*[7]*)(eStatusLED:=E_LedFunction.eSlow, eWarningLED:=E_LedFunction.eUndefined, eEmergencyLED:=E_LedFunction.eSteady, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=11 ,sErrorMsg:='Output 2 on LOCC box 2 tripped'),
                    (*[8]*)(eStatusLED:=E_LedFunction.eSteady, eWarningLED:=E_LedFunction.eSteady, eEmergencyLED:=E_LedFunction.eUndefined, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=12 ,sErrorMsg:='Output 1 on LOCC box 3 tripped'),
                    (*[9]*)(eStatusLED:=E_LedFunction.eSteady, eWarningLED:=E_LedFunction.eSteady, eEmergencyLED:=E_LedFunction.eUndefined, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=13 ,sErrorMsg:='Output 2 on LOCC box 3 tripped'),
                    (*[10]*)(eStatusLED:=E_LedFunction.eSlow, eWarningLED:=E_LedFunction.eSteady, eEmergencyLED:=E_LedFunction.eUndefined, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=14 ,sErrorMsg:='LOCC box 4 or single DC breaker 1 tripped'),
                    (*[11]*)(eStatusLED:=E_LedFunction.eSlow, eWarningLED:=E_LedFunction.eSteady, eEmergencyLED:=E_LedFunction.eUndefined, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=15 ,sErrorMsg:='LOCC box 5 or single DC breaker 2 tripped'),
                    (*[12]*)(eStatusLED:=E_LedFunction.eUndefined, eWarningLED:=E_LedFunction.eSteady, eEmergencyLED:=E_LedFunction.eUndefined, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=21 ,sErrorMsg:='Speed of Fan 1 below a critical limit'),
                    (*[13]*)(eStatusLED:=E_LedFunction.eUndefined, eWarningLED:=E_LedFunction.eSteady, eEmergencyLED:=E_LedFunction.eUndefined, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=22 ,sErrorMsg:='Speed of Fan 2 below a critical limit'),
                    (*[14]*)(eStatusLED:=E_LedFunction.eUndefined, eWarningLED:=E_LedFunction.eSteady, eEmergencyLED:=E_LedFunction.eSteady, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=23 ,sErrorMsg:='Temperature 1 too high' ),
                    (*[15]*)(eStatusLED:=E_LedFunction.eUndefined, eWarningLED:=E_LedFunction.eSteady, eEmergencyLED:=E_LedFunction.eSteady, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=24 ,sErrorMsg:='Temperature 2 too high'),
                    (*[16]*)(eStatusLED:=E_LedFunction.eSteady, eWarningLED:=E_LedFunction.eSteady, eEmergencyLED:=E_LedFunction.eUndefined, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=30 ,sErrorMsg:='Safety relay 1 triggered'),
                    (*[17]*)(eStatusLED:=E_LedFunction.eSteady, eWarningLED:=E_LedFunction.eSlow, eEmergencyLED:=E_LedFunction.eUndefined, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=101 ,sErrorMsg:='EtherCAT Master is not ok'),
                    (*[18]*)(eStatusLED:=E_LedFunction.eSteady, eWarningLED:=E_LedFunction.eSlow, eEmergencyLED:=E_LedFunction.eSteady, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=102 ,sErrorMsg:='At least one EtherCAT slave is not in OP state'),
                    (*[19]*)(eStatusLED:=E_LedFunction.eSteady, eWarningLED:=E_LedFunction.eSlow, eEmergencyLED:=E_LedFunction.eSteady, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=103 ,sErrorMsg:='At least one EtherCAT slave link is faulted'),
                    (*[20]*)(eStatusLED:=E_LedFunction.eSteady, eWarningLED:=E_LedFunction.eSlow, eEmergencyLED:=E_LedFunction.eUndefined, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=104 ,sErrorMsg:='Overflow in PLC cycle time'),
                    (*[21]*)(eStatusLED:=E_LedFunction.eSteady, eWarningLED:=E_LedFunction.eSlow, eEmergencyLED:=E_LedFunction.eUndefined, eAcknowledgeLED:=E_LedFunction.eUndefined, nErrorID:=105 ,sErrorMsg:='CPU Load High')];

    anTempErrorID: ARRAY [1..nMaxAlarms] OF INT;
    asTempErrorMsg: ARRAY [1..nMaxAlarms] OF STRING;
    nLEDAlarmID: INT;
    sLEDAlarmMsg: STRING;
    nAlarmCnt: INT;
    nAlarmBitNumber: UDINT;

    bCPUOverloaded: BOOL;
    bEcMasterNotOK: BOOL;
    bSlaveStateNotOP: BOOL;
    bSlaveLinkNotOK: BOOL;
    bCycleTimeExceeded: BOOL;
    //Cpu Monitor
    fbMonitorCPU: TC_CpuUsage;
    fbUpdateCPULoadTON: TON;
    nMaxCPULoad: USINT := 85;
    //Ehtercat master device state
    bEcLinkError: BOOL;
    bEcIOlocked: BOOL;
    bEcLinkErrorRedundancyAdapter: BOOL;
    bEcMissingFrame: BOOL;
    bEcOutofSendResources: BOOL;
    bEcWatchdogTriggered: BOOL;
    bEcEthernetDriverNotFound: BOOL;
    bEcIOresetActive: BOOL;
    bEcSlaveINIT: BOOL;
    bEcSlavePreOP: BOOL;
    bEcSlaveSafeOP: BOOL;
    bEcSlaveError: BOOL;
    bEcDCnotInSync: BOOL;
    //Ehtercat slave device state
    fbUpdateEcSlaveStateTON: TON;
    fbGetEcSlaveStates: FB_EcGetAllSlaveStates;
    astSlaveState: ARRAY[0..nMaxECSlaves] OF ST_EcSlaveState;
    nActualEcSlaves: INT := 0;
    iAlarm: INT;
    //Frame statistics
    fbUpdateEcMasterFrame: TON;
    fbGetEcMasterFrames: FB_EcMasterFrameStatistic;

    fbFastBlinkOn: TON;
    fbFastBlinkOff: TON;
    bFastBlink: BOOL;
    fbSlowBlinkOn: TON;
    fbSlowBlinkOff: TON;
    bSlowBlink: BOOL;
END_VAR
VAR CONSTANT
    nMaxAlarms: INT := 50;
    nMaxECSlaves: INT := 255;
    nMaxTemp: INT := 10000;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[actMonitorAlarms();
actMonitorCPU();
actMonitorEtherCAT();
]]></ST>
    </Implementation>
    <Action Name="actMonitorAlarms" Id="{a6718a6d-0d11-4e42-a872-e8dfd89a550b}">
      <Implementation>
        <ST><![CDATA[astAlarmList[1].bAlarmSet := NOT b24VDC1_OK;
astAlarmList[1].bAlarmReset:= TRUE;
astAlarmList[2].bAlarmSet := b24VDC2_OK;
astAlarmList[2].bAlarmReset:= TRUE;
astAlarmList[3].bAlarmSet := NOT b48VDC1_OK;
astAlarmList[3].bAlarmReset:= TRUE;
astAlarmList[4].bAlarmSet := bFuse1_OK;
astAlarmList[4].bAlarmReset:= TRUE;
astAlarmList[5].bAlarmSet :=  bFuse2_OK;
astAlarmList[5].bAlarmReset:= TRUE;
astAlarmList[6].bAlarmSet := bFuse3_OK;
astAlarmList[6].bAlarmReset:= TRUE;
astAlarmList[7].bAlarmSet := bFuse4_OK;
astAlarmList[7].bAlarmReset:= TRUE;
astAlarmList[8].bAlarmSet := bFuse5_OK;
astAlarmList[8].bAlarmReset:= TRUE;
astAlarmList[9].bAlarmSet := bFuse6_OK;
astAlarmList[9].bAlarmReset:= TRUE;
astAlarmList[10].bAlarmSet := bFuse7_OK;
astAlarmList[10].bAlarmReset:= TRUE;
astAlarmList[11].bAlarmSet := bFuse8_OK;
astAlarmList[11].bAlarmReset:= TRUE;
astAlarmList[12].bAlarmSet := NOT bFan1_OK;
astAlarmList[12].bAlarmReset:= TRUE;
astAlarmList[13].bAlarmSet := NOT bFan2_OK;
astAlarmList[13].bAlarmReset:= TRUE;
astAlarmList[14].bAlarmSet := nTemp1 > nMaxTemp;
astAlarmList[14].bAlarmReset:= TRUE;
astAlarmList[15].bAlarmSet := nTemp2 > nMaxTemp;
astAlarmList[15].bAlarmReset:= TRUE;
astAlarmList[16].bAlarmSet := NOT bSafety_OK;
astAlarmList[16].bAlarmReset:= TRUE;
astAlarmList[17].bAlarmSet := bEcMasterNotOK;
astAlarmList[17].bAlarmReset:= TRUE;
astAlarmList[18].bAlarmSet := bSlaveStateNotOP;
astAlarmList[18].bAlarmReset:= TRUE;
astAlarmList[19].bAlarmSet := bSlaveLinkNotOK;
astAlarmList[19].bAlarmReset:= TRUE;
astAlarmList[20].bAlarmSet := bCycleTimeExceeded;
astAlarmList[20].bAlarmReset:= TRUE;
astAlarmList[21].bAlarmSet := bCPUOverloaded;
astAlarmList[21].bAlarmReset:= TRUE;

FOR iAlarm:=1 TO nMaxAlarms DO
    mAlarm(stAlarmData:= astAlarmList[iAlarm]);
    IF iAlarm = 1 THEN
        nAlarmCnt := 0;
        nAlarmBitNumber := 0;
        MEMSET(ADR(anTempErrorID), 0, SIZEOF(anTempErrorID));
        MEMSET(ADR(asTempErrorMsg), 0, SIZEOF(asTempErrorMsg));
    ELSIF iAlarm = nMaxAlarms THEN
        anErrorID := anTempErrorID;
        asErrorMsg := asTempErrorMsg;
        nAlarmGrpBitNumber := nAlarmBitNumber;
    END_IF

    IF astAlarmList[iAlarm].bAlarmActive THEN
        nAlarmCnt := nAlarmCnt + 1;
        anTempErrorID[nAlarmCnt] := astAlarmList[iAlarm].nErrorID;
        asTempErrorMsg[nAlarmCnt] := astAlarmList[iAlarm].sErrorMsg;
        IF nLEDAlarmID = 0 OR (nWarningLED = E_LedFunction.eUndefined AND nEmergencyLED = E_LedFunction.eUndefined AND astAlarmList[iAlarm].eWarningLED > E_LedFunction.eUndefined) OR (nEmergencyLED = E_LedFunction.eUndefined AND astAlarmList[iAlarm].eEmergencyLED > E_LedFunction.eUndefined) THEN
            nLEDAlarmID := iAlarm;
            sLEDAlarmMsg := astAlarmList[iAlarm].sErrorMsg;
            nEmergencyLED := astAlarmList[iAlarm].eEmergencyLED;
            nWarningLED := astAlarmList[iAlarm].eWarningLED;
            nStatusLED := astAlarmList[iAlarm].eStatusLED;
            nAcknowledgeLED := astAlarmList[iAlarm].eAcknowledgeLED;
        END_IF
        CASE astAlarmList[iAlarm].nErrorID OF
            1,4:
            nAlarmBitNumber.0 := TRUE;
            9,12,13:
            nAlarmBitNumber.1 := TRUE;
            10,11:
            nAlarmBitNumber.2 := TRUE;
            14,15:
            nAlarmBitNumber.3 := TRUE;
            21,22:
            nAlarmBitNumber.4 := TRUE;
            23,24:
            nAlarmBitNumber.5 := TRUE;
            104,105:
            nAlarmBitNumber.6 := TRUE;
            103:
            nAlarmBitNumber.7 := TRUE;
            102:
            nAlarmBitNumber.8 := TRUE;
            30:
            nAlarmBitNumber.9 := TRUE;
        END_CASE
    ELSIF NOT astAlarmList[iAlarm].bAlarmActive THEN
        IF nLEDAlarmID = iAlarm THEN
            nLEDAlarmID := 0;
            sLEDAlarmMsg := '';
            nEmergencyLED := 0;
            nWarningLED := 0;
            nStatusLED := 0;
            nAcknowledgeLED := 0;
        END_IF
    END_IF
END_FOR

fbFastBlinkOn(IN:=NOT fbFastBlinkOff.q , PT:=T#250MS , Q=> , ET=> );
fbFastBlinkOff(IN:=fbFastBlinkOn.Q , PT:=T#250MS , Q=> , ET=> );
bFastBlink := fbFastBlinkOn.q;

fbSlowBlinkOn(IN:=NOT fbSlowBlinkOff.q , PT:=T#750MS , Q=> , ET=> );
fbSlowBlinkOff(IN:=fbSlowBlinkOn.Q , PT:=T#750MS , Q=> , ET=> );
bSlowBlink := fbSlowBlinkOn.q;

bEmergencyLED := (nEmergencyLED = E_LedFunction.eSteady) OR (nEmergencyLED = E_LedFunction.eFast AND bFastBlink) OR (nEmergencyLED = E_LedFunction.eSlow AND bSlowBlink);
bWarningLED := (nWarningLED = E_LedFunction.eSteady) OR (nWarningLED = E_LedFunction.eFast AND bFastBlink) OR (nWarningLED = E_LedFunction.eSlow AND bSlowBlink);
bStatusLED := (nStatusLED = E_LedFunction.eSteady) OR (nStatusLED = E_LedFunction.eFast AND bFastBlink) OR (nStatusLED = E_LedFunction.eSlow AND bSlowBlink);
bAcknowledgeLED := (nAcknowledgeLED = E_LedFunction.eSteady) OR (nAcknowledgeLED = E_LedFunction.eFast AND bFastBlink) OR (nAcknowledgeLED = E_LedFunction.eSlow AND bSlowBlink);









]]></ST>
      </Implementation>
    </Action>
    <Action Name="actMonitorCPU" Id="{50fd1f1e-d31a-4c60-ab54-9bd200182c11}">
      <Implementation>
        <ST><![CDATA[//Cpu Monitor
fbUpdateCPULoadTON(IN:=NOT fbUpdateCPULoadTON.q , PT:=T#100MS , Q=> , ET=> );
fbMonitorCPU(START:=fbUpdateCPULoadTON.q, TMOUT:= T#5S);

bCPUOverloaded := fbMonitorCPU.USAGE > nMaxCPULoad;
nCPULoad := fbMonitorCPU.USAGE;

fCycleExecTime_ms := UDINT_TO_REAL(_TaskInfo[fbGetCurTaskIndex.index].LastExecTime) / 10000;
bCycleTimeExceeded := _TaskInfo[fbGetCurTaskIndex.index].CycleTimeExceeded;]]></ST>
      </Implementation>
    </Action>
    <Action Name="actMonitorEtherCAT" Id="{393a7135-5760-4419-90d0-1b5894704c98}">
      <Implementation>
        <ST><![CDATA[//Read frames
fbUpdateEcMasterFrame(IN:=NOT fbUpdateEcMasterFrame.q , PT:=T#1000MS , Q=> , ET=> );
fbGetEcMasterFrames(sNetId:= nEcMasterNetId, bExecute:= fbUpdateEcMasterFrame.q);

nEcMasterFramesLost := fbGetEcMasterFrames.nLostFrames;


//Check ethercat slave device state
fbUpdateEcSlaveStateTON(IN:=NOT fbUpdateEcSlaveStateTON.q , PT:=T#100MS , Q=> , ET=> );
fbGetEcSlaveStates(sNetId:= nEcMasterNetId, pStateBuf := ADR(astSlaveState), cbBufLen:=SIZEOF(astSlaveState), bExecute:=fbUpdateEcSlaveStateTON.q);
nActualEcSlaves:=UINT_TO_INT(fbGetEcSlaveStates.nSlaves);

FOR iAlarm:=0 TO nActualEcSlaves-1 DO
    IF iAlarm = 0 THEN
        bSlaveStateNotOP := FALSE;
        bSlaveLinkNotOK := FALSE;
    END_IF
    IF astSlaveState[iAlarm].deviceState <> EC_DEVICE_STATE_OP THEN
        bSlaveStateNotOP := TRUE;
    END_IF
    IF astSlaveState[iAlarm].linkState <> EC_LINK_STATE_OK THEN
        bSlaveLinkNotOK := TRUE;
    END_IF
END_FOR

//Check ethercat master device state
bEcLinkError := nEcMasterDevState.0;
bEcIOlocked := nEcMasterDevState.1;
bEcLinkErrorRedundancyAdapter := nEcMasterDevState.2;
bEcMissingFrame := nEcMasterDevState.3;
bEcOutofSendResources := nEcMasterDevState.4;
bEcWatchdogTriggered := nEcMasterDevState.5;
bEcEthernetDriverNotFound := nEcMasterDevState.6;
bEcIOresetActive := nEcMasterDevState.7;
bEcSlaveINIT := nEcMasterDevState.8;
bEcSlavePreOP := nEcMasterDevState.9;
bEcSlaveSafeOP := nEcMasterDevState.10;
bEcSlaveError := nEcMasterDevState.11;
bEcDCnotInSync := nEcMasterDevState.12;

bEcMasterNotOK := nEcMasterDevState > 0;]]></ST>
      </Implementation>
    </Action>
    <Method Name="mAlarm" Id="{90084986-c6d4-4ab8-8e9d-f1097d507950}">
      <Declaration><![CDATA[METHOD mAlarm : BOOL
VAR_IN_OUT
    stAlarmData: ST_Alarm;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF stAlarmData.bAlarmSet THEN
    stAlarmData.bAlarmActive := TRUE;
ELSIF stAlarmData.bAlarmReset THEN
    stAlarmData.bAlarmActive := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Monitoring">
      <LineId Id="1543" Count="2" />
      <LineId Id="115" Count="0" />
    </LineIds>
    <LineIds Name="FB_Monitoring.actMonitorAlarms">
      <LineId Id="243" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="262" Count="2" />
      <LineId Id="249" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="271" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="284" Count="1" />
      <LineId Id="287" Count="1" />
      <LineId Id="290" Count="1" />
      <LineId Id="293" Count="1" />
      <LineId Id="296" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="166" Count="1" />
      <LineId Id="76" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="151" Count="2" />
      <LineId Id="93" Count="0" />
      <LineId Id="126" Count="3" />
      <LineId Id="95" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="183" Count="1" />
      <LineId Id="182" Count="0" />
      <LineId Id="185" Count="2" />
      <LineId Id="191" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="193" Count="3" />
      <LineId Id="190" Count="0" />
      <LineId Id="303" Count="1" />
      <LineId Id="177" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="99" Count="2" />
      <LineId Id="134" Count="2" />
      <LineId Id="130" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="144" Count="2" />
      <LineId Id="62" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="64" Count="2" />
      <LineId Id="68" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="169" Count="5" />
      <LineId Id="168" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Monitoring.actMonitorCPU">
      <LineId Id="2" Count="7" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Monitoring.actMonitorEtherCAT">
      <LineId Id="2" Count="39" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Monitoring.mAlarm">
      <LineId Id="21" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>